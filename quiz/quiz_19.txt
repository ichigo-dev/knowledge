====================

 *********** は、Docker HubからDockerイメージを入手するコマンド。インターネット環境に繋がった状態で実行すると、イメージのダウンロードが始まる。

Answer: docker pull

Source: ../../note/development/docker/_/chapters/image.md

====================

 ************* は、入手したイメージ一覧を確認するコマンド。

Answer: docker images

Source: ../../note/development/docker/_/chapters/image.md

====================

 ********** は、イメージを削除するコマンド。イメージを削除するためには、そのイメージを元にしたコンテナを全て停止するか削除する必要がある。ただし、そのイメージを元にした停止中のコンテナがある場合には、 -f オプションを付与する必要がある。

Answer: docker rmi

Source: ../../note/development/docker/_/chapters/image.md

====================

 *********** は、イメージを tar 形式のアーカイブに変換するコマンド。

Answer: docker save

Source: ../../note/development/docker/_/chapters/image.md

====================

 *********** は、セーブしたイメージのアーカイブからイメージを取り込むコマンド。

Answer: docker load

Source: ../../note/development/docker/_/chapters/image.md

====================

 ************** は、複数のコンテナやマルチサーバに導入されているDockerの管理、コンテナのデプロイなど、コンテナをより便利に扱うための機能。

Answer: コンテナオーケストレーション

Source: ../../note/development/docker/_/chapters/kubernetes.md

====================

 ********** (K8s)は、Googleが開発したコンテナオーケストレーションツール。複数の物理サーバからなるマルチホストのコンテナ環境を統合的に管理するためのフレームワーク。 ********** は、マルチホストのコンテナ環境全体を管理する ********** 管理ノード（マスタノード）と、コンテナが稼働する管理対象ノード（ワーカノード）からなる。

 ********** は、Dockerだけではなくcontainerdやcri-oといったコンテナエンジンもサポートしている。

Answer: Kubernetes

Source: ../../note/development/docker/_/chapters/kubernetes.md

====================

Kubernetes( *** )は、Googleが開発したコンテナオーケストレーションツール。複数の物理サーバからなるマルチホストのコンテナ環境を統合的に管理するためのフレームワーク。Kubernetesは、マルチホストのコンテナ環境全体を管理するKubernetes管理ノード（マスタノード）と、コンテナが稼働する管理対象ノード（ワーカノード）からなる。

Kubernetesは、Dockerだけではなくcontainerdやcri-oといったコンテナエンジンもサポートしている。

Answer: K8s

Source: ../../note/development/docker/_/chapters/kubernetes.md

====================

Kubernetes(K8s)は、Googleが開発したコンテナオーケストレーションツール。複数の物理サーバからなるマルチホストのコンテナ環境を統合的に管理するためのフレームワーク。Kubernetesは、マルチホストのコンテナ環境全体を管理する *************** （マスタノード）と、コンテナが稼働する管理対象ノード（ワーカノード）からなる。

Kubernetesは、Dockerだけではなくcontainerdやcri-oといったコンテナエンジンもサポートしている。

Answer: Kubernetes管理ノード

Source: ../../note/development/docker/_/chapters/kubernetes.md

====================

Kubernetes(K8s)は、Googleが開発したコンテナオーケストレーションツール。複数の物理サーバからなるマルチホストのコンテナ環境を統合的に管理するためのフレームワーク。Kubernetesは、マルチホストのコンテナ環境全体を管理するKubernetes管理ノード（マスタノード）と、コンテナが稼働する ******* （ワーカノード）からなる。

Kubernetesは、Dockerだけではなくcontainerdやcri-oといったコンテナエンジンもサポートしている。

Answer: 管理対象ノード

Source: ../../note/development/docker/_/chapters/kubernetes.md

====================

 *** は、管理対象ノード上で稼働する複数のアプリケーションコンテナをひとまとめにしたものの単位。Kubernetesでは *** を単位としてアプリケーションを管理する。

Answer: Pod

Source: ../../note/development/docker/_/chapters/kubernetes.md

====================

 ********** は、Kubernetesにおいて複数のPodのレプリカをセットで作成する機能。

Answer: ReplicaSet

Source: ../../note/development/docker/_/chapters/kubernetes.md

====================

 *********** は、Pod単位でコンテナを起動するコマンド。

$  ***********  <pod> --image=<image>:<tag>

Answer: kubectl run

Source: ../../note/development/docker/_/chapters/kubernetes.md

====================

 **************** は、Podの状態を一覧で確認するコマンド。

$  **************** 

kubectl describe podsは、Podの詳細を確認するコマンド。

$ kubectl describe pods <pod>

Answer: kubectl get pods

Source: ../../note/development/docker/_/chapters/kubernetes.md

====================

kubectl get podsは、Podの状態を一覧で確認するコマンド。

$ kubectl get pods

 ********************* は、Podの詳細を確認するコマンド。

$  *********************  <pod>

Answer: kubectl describe pods

Source: ../../note/development/docker/_/chapters/kubernetes.md

====================

 ************** は、ReplicaSetの状態を一覧で確認するコマンド。

$  ************** 

Answer: kubectl get rs

Source: ../../note/development/docker/_/chapters/kubernetes.md

====================

 ************* は、ReplicaSetのスケールを行うコマンド。

$  *************  --replicas <replica num> -f <filename>

Answer: kubectl scale

Source: ../../note/development/docker/_/chapters/kubernetes.md

====================

 ****** は、デフォルトのネットワークドライバで、コンテナはブリッジを介してホストOSのネットワーク空間に接続される。vethペアの一方がコンテナの仮想ネットワークインタフェースとして割り当てられ、もう一方がブリッジネットワークを介してホストOSのネットワークインタフェースに接続される。

Answer: bridge

Source: ../../note/development/docker/_/chapters/network.md

====================

 **** は、Dockerのネットワークドライバのひとつで、コンテナがホスト側のネットワーク名前空間を共有する方法。Dockerの仮想ネットワークを介することがないため、本番環境における性能の最適化などに利用される。ただし、ホスト側とのポート競合が発生する可能性があるので注意が必要。

Answer: host

Source: ../../note/development/docker/_/chapters/network.md

====================

 ******* は、Dockerのネットワークドライバのひとつで、マルチホスト環境において複数のDockerデーモン上のコンテナを接続する方法。ネットワークトンネルを使用してホスト間通信を行うことで、コンテナが同じホスト上に存在するかのように動作させることができる。

Answer: overlay

Source: ../../note/development/docker/_/chapters/network.md

====================

 ****** は、Dockerのネットワークドライバのひとつで、IPv4とIPv6の両方のIPアドレスの割り当てをユーザがコントロールできる方法。

Answer: ipvlan

Source: ../../note/development/docker/_/chapters/network.md

====================

 ******* は、Dockerのネットワークドライバのひとつで、コンテナに対してMACアドレスを割り当て、ネットワーク上の物理デバイスをシミュレートする方法。コンテナを、ホストOSと同じLANセグメントに所属した、ひとつの物理機器として扱うことができる。

Answer: macvlan

Source: ../../note/development/docker/_/chapters/network.md

====================

 **** は、Dockerのネットワークドライバのひとつで、コンテナのネットワーク機能を無効化する方法。 **** ネットワークを割り当てたコンテナは、別のコンテナやホストOS、外部ネットワークには接続できなくなる。

Answer: none

Source: ../../note/development/docker/_/chapters/network.md

====================

 *********** は、Dockerをインストールした際に自動的に作成されるネットワーク。bridgeとhost、noneが作成される。デフォルトのbridgeは、docker0という名前になっており、コンテナに対してネットワークを指定しなかった場合はこれが利用される。

Answer: デフォルトネットワーク

Source: ../../note/development/docker/_/chapters/network.md

====================

デフォルトネットワークは、Dockerをインストールした際に自動的に作成されるネットワーク。bridgeとhost、noneが作成される。デフォルトのbridgeは、 ******* という名前になっており、コンテナに対してネットワークを指定しなかった場合はこれが利用される。

Answer: docker0

Source: ../../note/development/docker/_/chapters/network.md

====================

 ********************* は、新しいDockerネットワークを作成するコマンド。 --attachable オプションを付与すると、手動によるコンテナのアタッチが可能となる。また、 --subnet オプションを付与することで、コンテナが所属するサブネットを指定することができる。

Answer: docker network create

Source: ../../note/development/docker/_/chapters/network.md

====================

 ***************** は、Docker上に存在するネットワークを一覧で表示するコマンド。

$  ***************** 
NETWORK ID     NAME                DRIVER    SCOPE
e7d006713a1a   bridge              bridge    local
4d634efa7d98   host                host      local
58494b028369   none                null      local

Answer: docker network ls

Source: ../../note/development/docker/_/chapters/network.md

====================

 ***************** は、Docker上に存在するネットワークを削除するコマンド。

Answer: docker network rm

Source: ../../note/development/docker/_/chapters/network.md

====================

 ********************** は、Docker上に存在するネットワークの詳細を確認するコマンド。

Answer: docker network inspect

Source: ../../note/development/docker/_/chapters/network.md

====================

 ********************** は、コンテナをネットワークに接続するコマンド。

Answer: docker network connect

Source: ../../note/development/docker/_/chapters/network.md

====================

 ************************* は、コンテナをネットワークから切断するコマンド。

Answer: docker network disconnect

Source: ../../note/development/docker/_/chapters/network.md

====================

 ****** は、ホストOSが管理するデータをコンテナで利用できるようにする機能。 ****** を利用するには、コンテナ起動時に --mount オプションを付与し、 type=volume を指定する。また、 readonly を指定することで、読み取り専用でマウントすることができる。 --mount の代わりに -v オプションを利用することもできる。

 ****** は基本的に、ホストOS上の /var/lib/docker/volumes 以下に作成される。

Answer: Volume

Source: ../../note/development/docker/_/chapters/volume_and_mount.md

====================

 ******************** は、ボリュームを作成するコマンド。

Answer: docker volume create

Source: ../../note/development/docker/_/chapters/volume_and_mount.md

====================

 **************** は、ボリュームの一覧を確認するコマンド。

$ dokcer volume ls
DRIVER    VOLUME NAME
local     vol_hoge
local     vol_fuga

Answer: docker volume ls

Source: ../../note/development/docker/_/chapters/volume_and_mount.md

====================

 ********** は、ホストOS上のデバイスファイルやディレクトリなどをコンテナから参照するための機能。 ********** を行うには、コンテナ起動時に --mount オプションを付与し、 type=bind を指定する。また、 readonly を指定することで、読み取り専用でマウントすることができる。 --mount の代わりに -v オプションを利用することもできる。

 ********** を使用すると、ホストOS上のファイルシステムにコンテナが干渉できるようになるので、操作には注意が必要。

Answer: bind mount

Source: ../../note/development/docker/_/chapters/volume_and_mount.md

====================

 ***********  は、ホストOSのメモリの一部をファイルシステムとしてコンテナから利用する機能。オンメモリのファイルシステムを提供できるため、コンテナ内で非常に高速な読み書きができるが、メモリ上のデータは永続的に利用することはできない。 *********** を行うには、コンテナ起動時に --mount オプションを付与し、 type=tmpfs を指定する。また、オンメモリのファイルシステムのディレクトリや権限、サイズなどを指定できる。

Answer: tmpfs mount

Source: ../../note/development/docker/_/chapters/volume_and_mount.md

====================

 **** は、リポジトリのコミット履歴を分岐させる機能、あるいは枝分かれした流れ。一般的には管理の本流となる **** を master ( main )とし、分岐させる **** のことをトピック **** という。複数人が各自バグ修正や新機能の開発を並行して行うような場合に、各々がトピック **** 上で作業を進めることで、他のユーザの作業に影響を受けることなく独立した状態を保つことができる。

Answer: ブランチ

Source: ../../note/development/git/_/chapters/branch.md

====================

ブランチは、リポジトリのコミット履歴を分岐させる機能、あるいは枝分かれした流れ。一般的には管理の本流となるブランチを master ( main )とし、分岐させるブランチのことを ******** という。複数人が各自バグ修正や新機能の開発を並行して行うような場合に、各々が ******** 上で作業を進めることで、他のユーザの作業に影響を受けることなく独立した状態を保つことができる。

Answer: トピックブランチ

Source: ../../note/development/git/_/chapters/branch.md

====================

 ********** は、リポジトリ上のブランチの一覧を表示するコマンド。オプションを指定しない場合はローカルリポジトリのブランチを、 -r オプションを指定するとリモートリポジトリのブランチを確認できる。また、 -a オプションを指定することで、ローカルリポジトリとリモートリポジトリの両方を一覧表示できる。

Answer: git branch

Source: ../../note/development/git/_/chapters/branch.md

====================

 ********** は、指定したブランチへの切り替えを行うコマンド。切り換え先の HEAD の内容がワークツリーに展開される。  **********  コマンドに -c オプションを指定することで、新規ブランチの作成も同時に行える。

Answer: git swtich

Source: ../../note/development/git/_/chapters/branch.md

====================

 *** は、あるブランチの HEAD を別のブランチに取り込む操作。トピックブランチの変更を本流となるブランチに統合したり、本流となるブランチの変更点をトピックブランチに取り込むといった使い方をする。

 *** にはgit mergeコマンドを用いる。まずは HEAD を *** 先のブランチに切り替え、 git merge コマンドの引数に *** したいブランチ名を指定する。

Answer: マージ

Source: ../../note/development/git/_/chapters/branch.md

====================

マージは、あるブランチの HEAD を別のブランチに取り込む操作。トピックブランチの変更を本流となるブランチに統合したり、本流となるブランチの変更点をトピックブランチに取り込むといった使い方をする。

マージには ********* コマンドを用いる。まずは HEAD をマージ先のブランチに切り替え、  *********  コマンドの引数にマージしたいブランチ名を指定する。

Answer: git merge

Source: ../../note/development/git/_/chapters/branch.md

====================

 *************** （早送りマージ）は、マージ先のブランチの HEAD からマージしたいブランチの HEAD に向かって1本の直線的なパスのみが通っている場合に適用される戦略（マージしたいブランチ以外のブランチでコミットが行われていない状態でのマージ）。この場合は、実際には差分の統合が行われているわけではなく、マージ先の HEAD をマージしたいブランチの HEAD に移動する。これにより、実質的に全ての履歴が統合され、マージしたいブランチからアクセス可能であった全てのコミットがマージ先からも利用できるようになる。

Answer: Fast-forwardマージ

Source: ../../note/development/git/_/chapters/branch.md

====================

Fast-forwardマージ（ ****** ）は、マージ先のブランチの HEAD からマージしたいブランチの HEAD に向かって1本の直線的なパスのみが通っている場合に適用される戦略（マージしたいブランチ以外のブランチでコミットが行われていない状態でのマージ）。この場合は、実際には差分の統合が行われているわけではなく、マージ先の HEAD をマージしたいブランチの HEAD に移動する。これにより、実質的に全ての履歴が統合され、マージしたいブランチからアクセス可能であった全てのコミットがマージ先からも利用できるようになる。

Answer: 早送りマージ

Source: ../../note/development/git/_/chapters/branch.md

====================

 ******* （三方向マージ）は、マージ先のブランチとマージしたいブランチの両方でコミットが行われており、単純なFast-forwardマージが実行できない場合に適用される戦略。このマージ方法では、2つのブランチの HEAD を統合するような新たなマージコミットが作成される。

Answer: 3wayマージ

Source: ../../note/development/git/_/chapters/branch.md

====================

3wayマージ（ ****** ）は、マージ先のブランチとマージしたいブランチの両方でコミットが行われており、単純なFast-forwardマージが実行できない場合に適用される戦略。このマージ方法では、2つのブランチの HEAD を統合するような新たなマージコミットが作成される。

Answer: 三方向マージ

Source: ../../note/development/git/_/chapters/branch.md

====================

 ****** は、3wayマージの際に同じファイルの同じ行に対する変更があった場合や、片方のブランチで削除されたファイルに対してもう片方のブランチで編集を加えた場合などに、どちらの変更を優先すれば良いかを自動的に判断できなくなりマージに失敗する現象。 ****** が発生した場合、 ****** が発生したファイルの該当箇所に以下のようなマークが追加される。

<<<<<<< HEAD
// マージ先のブランチの変更
aaa
=======
// マージしたいブランチの変更
bbb
>>>>>>> <branch>

この部分を統合したい形に編集して保存し、コミットを作成すると、 ****** していたマージも完了した状態となる。また、 git merge コマンドに --abort オプションを指定することで、マージを中止することもできる。

$ git merge --abort

Answer: コンフリクト

Source: ../../note/development/git/_/chapters/branch.md

====================

 **** は、Fast-forwardマージができないような2つのブランチを、マージコミットを作成せずに統合する方法。統合元のブランチのコミット履歴の先頭に、統合先のブランチのコミット履歴の差分を全て直線的に追加する。これにより不要なマージコミットが除去され、履歴を汚さずに済む。ただし、 **** を行うと統合元のブランチのコミットを打ち消してしまう可能性があるので、本流となるブランチを自身が作業するトピックブランチに統合する場合などに限って利用すると良い。

 **** にはgit rebaseコマンドを用いる。まずは HEAD を統合先のブランチに切り替え、 git merge コマンドの引数に統合したいブランチ名を指定する。

Answer: リベース

Source: ../../note/development/git/_/chapters/branch.md

====================

リベースは、Fast-forwardマージができないような2つのブランチを、マージコミットを作成せずに統合する方法。統合元のブランチのコミット履歴の先頭に、統合先のブランチのコミット履歴の差分を全て直線的に追加する。これにより不要なマージコミットが除去され、履歴を汚さずに済む。ただし、リベースを行うと統合元のブランチのコミットを打ち消してしまう可能性があるので、本流となるブランチを自身が作業するトピックブランチに統合する場合などに限って利用すると良い。

リベースには ********** コマンドを用いる。まずは HEAD を統合先のブランチに切り替え、 git merge コマンドの引数に統合したいブランチ名を指定する。

Answer: git rebase

Source: ../../note/development/git/_/chapters/branch.md

====================

 ******* は、ブランチのマージを他のユーザに通知し、マージを実行してよいか確認する機能。 ******* はGit自身の機能ではなく、GitHubなどのGitホスティングサービスにより提供されているため、環境によっては利用できない場合もある。

実装者はGitホスティングサービス上でマージしたいブランチを指定して ******* を発行し、確認者がソースコードのレビューを行う。確認者が ******* を承認すると実際にマージが実行される。 ******* を活用することで、このようなコードレビューのフローが実施しやすくなる。

Answer: プルリクエスト

Source: ../../note/development/git/_/chapters/branch.md

====================

 ******* は、コミット履歴を確認するためのコマンド。

$  ******* 
commit xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (HEAD -> main, origin/main, origin/HEAD)
Author: name <example@example.com>
Date:   Thu Feb 2 00:00:00 2023

    feat: Add new utility functions

commit xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Author: name <example@example.com>
Date:   Wed Feb 1 00:00:00 2023

    Initial commit

Answer: git log

Source: ../../note/development/git/_/chapters/commit_history.md

====================

 ********** は、任意のコミットを打ち消すためのコマンド。コミット履歴を削除するのではなく、特定のコミットを打ち消すような新しいコミットを作成する。コミット履歴を破壊しないため、リモートリポジトリと同期済みのコミットを取り消しても安全。また、このコマンドでは特定のコミットのみを打ち消すため、指定したコミット以降のすべての変更内容を元に戻すわけではない。

Answer: git revert

Source: ../../note/development/git/_/chapters/commit_history.md

====================

 ********* は、コミットを取り消すためのコマンド。ブランチ上の HEAD の位置を移動し、オプションに応じてステージとワークツリーの状態も変更する。

| オプション | 概要                                                                                      | |------------|-------------------------------------------------------------------------------------------| | --hard   | HEAD を指定の位置に移動し、ステージとワークツリーをその時の状態に戻す                   | | --mixed  | HEAD を指定の位置に移動し、ステージをその時の状態に戻す（ワークツリーの変更内容は維持） | | --soft   | HEAD を指定の位置に移動する（ステージとワークツリーの変更内容は維持）                   |

Answer: git reset

Source: ../../note/development/git/_/chapters/commit_history.md

====================

 ********** は、Gitの操作履歴を確認するためのコマンド。Gitでは操作履歴に対してもハッシュがついており、 git reset コマンドにハッシュあるいは HEAD@{0} のようなエイリアスを指定することで、その操作を取り消すとこができる。誤って必要なブランチを消してしまったり、ワークツリーの変更内容を破棄してしまった場合などに、その操作を取り消すことで復旧できる。

$  ********** 
xxxxxxx (HEAD -> main, origin/main, origin/HEAD) HEAD@{0}: commit: example commit
xxxxxxx HEAD@{1}: pull origin main: Fast-forward
xxxxxxx HEAD@{2}: checkout: moving from exampole to main

Answer: git reflog

Source: ../../note/development/git/_/chapters/commit_history.md

====================

 ***** は、Gitの変更履歴を管理するディレクトリ、あるいはデータ構造。 ***** の配下のファイルやディレクトリは、履歴管理の対象となる。

開発チームや一般に公開されているサーバ上の ***** をリモート ***** 、ユーザの作業用コンピュータにコピーした ***** をローカル ***** という。

Answer: リポジトリ

Source: ../../note/development/git/_/chapters/create_repository.md

====================

 ******* は、ワークツリーを持たないリポジトリで、変更履歴の管理のみを行う。

Answer: ベアリポジトリ

Source: ../../note/development/git/_/chapters/create_repository.md

====================

 ********* は、ワークツリーを持つ、ユーザが作業を行うリポジトリ。

Answer: ノンベアリポジトリ

Source: ../../note/development/git/_/chapters/create_repository.md

====================

 ******** は、コンピュータ内でGitの管理対象としたい任意のディレクトリを、リポジトリとして初期化するにはコマンド。

Answer: git init

Source: ../../note/development/git/_/chapters/create_repository.md

====================

 **** は、リモートリポジトリの複製をローカルに作成する操作。基本的にはプロジェクトに加わった際に、最初に1度だけ実行する操作であり、それ以降のリモートリポジトリからの差分の取得にはフェッチやプルを用いる。

 **** 元となったリモートリポジトリは、ローカルリポジトリに origin というエイリアスで登録される。

リポジトリの **** には、git cloneコマンドを用いる。

Answer: クローン

Source: ../../note/development/git/_/chapters/create_repository.md

====================

クローンは、リモートリポジトリの複製をローカルに作成する操作。基本的にはプロジェクトに加わった際に、最初に1度だけ実行する操作であり、それ以降のリモートリポジトリからの差分の取得にはフェッチやプルを用いる。

クローン元となったリモートリポジトリは、ローカルリポジトリに origin というエイリアスで登録される。

リポジトリのクローンには、 ********* コマンドを用いる。

Answer: git clone

Source: ../../note/development/git/_/chapters/create_repository.md

====================

 **** は、リモートリポジトリの複製を別のリモートリポジトリとして作成する操作。クローンはあるプロジェクトに参加する場合などに用いるのに対し、 **** はあるプロジェクトを元に別のプロジェクトを作成したい場合に用いる。

実際にはワークフローの違いだけであり、新規に作成したリモートリポジトリに対して git clone したリポジトリをプッシュすることで、リポジトリを **** できる。

Answer: フォーク

Source: ../../note/development/git/_/chapters/create_repository.md

====================

 ******** は、2つの入力データセットを比較して、その差分を出力するコマンド。引数を指定しなかった場合は、 HEAD とワークツリーの差分を出力する。

$  ******** 

Answer: git diff

Source: ../../note/development/git/_/chapters/difference_comparison.md

====================

 ******** は、コミットハッシュを指定することで、指定したコミットと直前のコミットを git diff した結果を出力できる。

Answer: git show

Source: ../../note/development/git/_/chapters/difference_comparison.md

====================

 *********** (VCS: Version Control System)は、ファイルの変更履歴を管理するためのシステム。プログラムのソースコードやドキュメントなどの電子ファイルは、通常は段階を経て編集されていく。 *********** を用いることで、ファイルの編集の過程を履歴として記録し、ファイルの過去の状態を確認したり、その時の状態に戻したりすることができるようになる。また複数人で同じファイルを編集したいような場合に、ファイルの同じ行を変更してしまうことによる競合などの問題が発生する可能性があるが、 *********** はこのような状況を解決する仕組みも持っているものも多い。 *********** はプログラムの開発にとどまらず、電子データを扱う全てのケースで活用できるツールである。

Answer: バージョン管理システム

Source: ../../note/development/git/_/chapters/git.md

====================

バージョン管理システム( *** : Version Control System)は、ファイルの変更履歴を管理するためのシステム。プログラムのソースコードやドキュメントなどの電子ファイルは、通常は段階を経て編集されていく。バージョン管理システムを用いることで、ファイルの編集の過程を履歴として記録し、ファイルの過去の状態を確認したり、その時の状態に戻したりすることができるようになる。また複数人で同じファイルを編集したいような場合に、ファイルの同じ行を変更してしまうことによる競合などの問題が発生する可能性があるが、バージョン管理システムはこのような状況を解決する仕組みも持っているものも多い。バージョン管理システムはプログラムの開発にとどまらず、電子データを扱う全てのケースで活用できるツールである。

Answer: VCS

Source: ../../note/development/git/_/chapters/git.md

====================

 ****** （集中型）のバージョン管理システムは、バージョン管理のための専用サーバにリポジトリを用意しておき、そのサーバ上で履歴を一元管理する。ユーザはサーバから自身のコンピュータにファイルのコピーをダウンロードし、変更を加えたらその変更をサーバ上のリポジトリに記録する。

ユーザはネットワークに繋がっていない状態だと、変更を記録することができない。また、サーバが単一障害点となっており、サーバ上のリポジトリが破損するとデータが復旧できない可能性がある。

 ****** のバージョン管理システムとしては、CVSやSVNが代表的。

Answer: 集中管理方式

Source: ../../note/development/git/_/chapters/git.md

====================

集中管理方式（ *** ）のバージョン管理システムは、バージョン管理のための専用サーバにリポジトリを用意しておき、そのサーバ上で履歴を一元管理する。ユーザはサーバから自身のコンピュータにファイルのコピーをダウンロードし、変更を加えたらその変更をサーバ上のリポジトリに記録する。

ユーザはネットワークに繋がっていない状態だと、変更を記録することができない。また、サーバが単一障害点となっており、サーバ上のリポジトリが破損するとデータが復旧できない可能性がある。

集中管理方式のバージョン管理システムとしては、CVSやSVNが代表的。

Answer: 集中型

Source: ../../note/development/git/_/chapters/git.md

====================

集中管理方式（集中型）のバージョン管理システムは、バージョン管理のための専用サーバにリポジトリを用意しておき、そのサーバ上で履歴を一元管理する。ユーザはサーバから自身のコンピュータにファイルのコピーをダウンロードし、変更を加えたらその変更をサーバ上のリポジトリに記録する。

ユーザはネットワークに繋がっていない状態だと、変更を記録することができない。また、サーバが単一障害点となっており、サーバ上のリポジトリが破損するとデータが復旧できない可能性がある。

集中管理方式のバージョン管理システムとしては、 *** やSVNが代表的。

Answer: CVS

Source: ../../note/development/git/_/chapters/git.md

====================

集中管理方式（集中型）のバージョン管理システムは、バージョン管理のための専用サーバにリポジトリを用意しておき、そのサーバ上で履歴を一元管理する。ユーザはサーバから自身のコンピュータにファイルのコピーをダウンロードし、変更を加えたらその変更をサーバ上のリポジトリに記録する。

ユーザはネットワークに繋がっていない状態だと、変更を記録することができない。また、サーバが単一障害点となっており、サーバ上のリポジトリが破損するとデータが復旧できない可能性がある。

集中管理方式のバージョン管理システムとしては、CVSや *** が代表的。

Answer: SVN

Source: ../../note/development/git/_/chapters/git.md

====================

 ****** （分散型）のバージョン管理システムは、全ユーザの変更を集約する中央サーバにリポジトリを設置し、個々の作業用コンピュータにはそのリポジトリの複製（ローカルリポジトリ）を作成する。変更履歴の管理は各々のローカルリポジトリ上で行われ、リモートリポジトリと同期することで変更内容を共有する。

ユーザはネットワークに接続されていなくてもローカルリポジトリ上でほとんどの操作を行うことができる。また、各コンピュータ上にリポジトリの複製が存在するため、中央サーバのリポジトリが破損した場合の復旧が容易である。

 ****** のバージョン管理システムとしては、GitやMercurialが代表的。

Answer: 分散管理方式

Source: ../../note/development/git/_/chapters/git.md

====================

分散管理方式（ *** ）のバージョン管理システムは、全ユーザの変更を集約する中央サーバにリポジトリを設置し、個々の作業用コンピュータにはそのリポジトリの複製（ローカルリポジトリ）を作成する。変更履歴の管理は各々のローカルリポジトリ上で行われ、リモートリポジトリと同期することで変更内容を共有する。

ユーザはネットワークに接続されていなくてもローカルリポジトリ上でほとんどの操作を行うことができる。また、各コンピュータ上にリポジトリの複製が存在するため、中央サーバのリポジトリが破損した場合の復旧が容易である。

分散管理方式のバージョン管理システムとしては、GitやMercurialが代表的。

Answer: 分散型

Source: ../../note/development/git/_/chapters/git.md

====================

分散管理方式（分散型）のバージョン管理システムは、全ユーザの変更を集約する中央サーバにリポジトリを設置し、個々の作業用コンピュータにはそのリポジトリの複製（ローカルリポジトリ）を作成する。変更履歴の管理は各々のローカルリポジトリ上で行われ、リモートリポジトリと同期することで変更内容を共有する。

ユーザはネットワークに接続されていなくてもローカルリポジトリ上でほとんどの操作を行うことができる。また、各コンピュータ上にリポジトリの複製が存在するため、中央サーバのリポジトリが破損した場合の復旧が容易である。

分散管理方式のバージョン管理システムとしては、Gitや ********* が代表的。

Answer: Mercurial

Source: ../../note/development/git/_/chapters/git.md

====================

 *** は、開発におけるデファクトスタンダードとなっている分散型バージョン管理システム。もともとはLinuxの開発のためにLinus Torvaldsによって実装され、巨大なソースコードであっても変更点の抽出やリポジトリ操作が高速にできるように工夫されている。

Answer: Git

Source: ../../note/development/git/_/chapters/git.md

====================

 ************* は、クラウド上でGitの環境が整えられたサーバをサービスとして提供したSaaS。 ************* を利用することで、自身でサーバを用意することなく手軽にソースコードを共有するためのリモートリポジトリを用意することができる。

代表的な ************* としてはGitHubやGitLab、BitBucketなどがある。

• GitHub
• GitLab
• BitBucket

Answer: Gitホスティングサービス

Source: ../../note/development/git/_/chapters/git.md

====================

Gitホスティングサービスは、クラウド上でGitの環境が整えられたサーバをサービスとして提供したSaaS。Gitホスティングサービスを利用することで、自身でサーバを用意することなく手軽にソースコードを共有するためのリモートリポジトリを用意することができる。

代表的なGitホスティングサービスとしては ****** やGitLab、BitBucketなどがある。

•  ****** 
• GitLab
• BitBucket

Answer: GitHub

Source: ../../note/development/git/_/chapters/git.md

====================

Gitホスティングサービスは、クラウド上でGitの環境が整えられたサーバをサービスとして提供したSaaS。Gitホスティングサービスを利用することで、自身でサーバを用意することなく手軽にソースコードを共有するためのリモートリポジトリを用意することができる。

代表的なGitホスティングサービスとしてはGitHubや ****** 、BitBucketなどがある。

• GitHub
•  ****** 
• BitBucket

Answer: GitLab

Source: ../../note/development/git/_/chapters/git.md

====================

Gitホスティングサービスは、クラウド上でGitの環境が整えられたサーバをサービスとして提供したSaaS。Gitホスティングサービスを利用することで、自身でサーバを用意することなく手軽にソースコードを共有するためのリモートリポジトリを用意することができる。

代表的なGitホスティングサービスとしてはGitHubやGitLab、 ********* などがある。

• GitHub
• GitLab
•  ********* 

Answer: BitBucket

Source: ../../note/development/git/_/chapters/git.md

====================

Gitは設定によって、コミット時に記録されるユーザ名やメールアドレス、リモートリポジトリとの接続に関するオプションなどを変更することができる。

設定は、ホームディレクトリや各リポジトリの .git ディレクトリにある設定ファイルに記述することで適用される。また、 ********** コマンドによって設定の確認や変更が行える。

Answer: git config

Source: ../../note/development/git/_/chapters/git_config.md

====================

 ***** は、いくつかの設定値をまとめたグループ。

Answer: セクション

Source: ../../note/development/git/_/chapters/git_config.md

====================

 ** は、セクション内の個別の設定値。

Answer: キー

Source: ../../note/development/git/_/chapters/git_config.md

====================

 ********* は、ワークツリーに加えた変更を一時的に退避するためのコマンド。ワークツリーの変更内容をスタッシュ領域に退避しておき、緊急の作業等を行った後にスタッシュの内容を復元する、といった使い方ができる。また、引数にコメントをつけることで、複数のスタッシュが管理しやすくなる。

Answer: git stash

Source: ../../note/development/git/_/chapters/others.md

====================

git stashは、ワークツリーに加えた変更を一時的に退避するためのコマンド。ワークツリーの変更内容を ***** 領域に退避しておき、緊急の作業等を行った後に ***** の内容を復元する、といった使い方ができる。また、引数にコメントをつけることで、複数の ***** が管理しやすくなる。

Answer: スタッシュ

Source: ../../note/development/git/_/chapters/others.md

====================

 ************** は、スタッシュに退避した変更内容を一覧表示するコマンド。

$  ************** 

Answer: git stash list

Source: ../../note/development/git/_/chapters/others.md

====================

 *************** やgit stash popは、スタッシュに退避した変更内容をワークツリーに反映するコマンド。  ***************  はスタッシュの内容を維持したままワークツリーに反映し、 git stash pop はスタッシュの内容をワークツリーに反映した後に破棄される。また、 git stash list で確認できるスタッシュの識別子を指定してスタッシュを復元することもできる。

Answer: git stash apply

Source: ../../note/development/git/_/chapters/others.md

====================

git stash applyや ************* は、スタッシュに退避した変更内容をワークツリーに反映するコマンド。 git stash apply はスタッシュの内容を維持したままワークツリーに反映し、  *************  はスタッシュの内容をワークツリーに反映した後に破棄される。また、 git stash list で確認できるスタッシュの識別子を指定してスタッシュを復元することもできる。

Answer: git stash pop

Source: ../../note/development/git/_/chapters/others.md

====================

 ************** は、スタッシュの変更ファイルを確認するコマンド。引数を指定しなければ直前のスタッシュの変更ファイルを表示し、引数にスタッシュの識別子を指定すると任意のスタッシュの変更ファイルを表示できる。また、  **************  コマンドに -p オプションを指定することで、スタッシュの変更内容を確認できる。

Answer: git stash show

Source: ../../note/development/git/_/chapters/others.md

====================

 ************** は、スタッシュを削除するコマンド。引数としてスタッシュの識別子を指定することで、任意のスタッシュを削除できる。また、 git stash clear を用いることで全てのスタッシュを一括で削除できる。

Answer: git stash drop

Source: ../../note/development/git/_/chapters/others.md

====================

 ** は、特定のコミットをマークすることで参照しやすくするための機能。軽量 ** では、ある特定のコミットに対して名前を付けることができる。注釈付き ** では、 ** 名に加えて作成者や作成日、コメントといった情報を付与することができる。 ** はコミットハッシュのエイリアスとしても利用できる。

Answer: タグ

Source: ../../note/development/git/_/chapters/others.md

====================

タグは、特定のコミットをマークすることで参照しやすくするための機能。 **** では、ある特定のコミットに対して名前を付けることができる。注釈付きタグでは、タグ名に加えて作成者や作成日、コメントといった情報を付与することができる。タグはコミットハッシュのエイリアスとしても利用できる。

Answer: 軽量タグ

Source: ../../note/development/git/_/chapters/others.md

====================

タグは、特定のコミットをマークすることで参照しやすくするための機能。軽量タグでは、ある特定のコミットに対して名前を付けることができる。 ****** では、タグ名に加えて作成者や作成日、コメントといった情報を付与することができる。タグはコミットハッシュのエイリアスとしても利用できる。

Answer: 注釈付きタグ

Source: ../../note/development/git/_/chapters/others.md

====================

 ******* は、登録されているタグの一覧を表示するコマンド。

$  ******* 

Answer: git tag

Source: ../../note/development/git/_/chapters/others.md

====================

 ****** （ワーキングディレクトリ）は、ファイルの編集作業を行うディレクトリ。この領域での変更内容はまだリポジトリに記録されていない状態となる。

Answer: ワークツリー

Source: ../../note/development/git/_/chapters/record_history.md

====================

ワークツリー（ *********** ）は、ファイルの編集作業を行うディレクトリ。この領域での変更内容はまだリポジトリに記録されていない状態となる。

Answer: ワーキングディレクトリ

Source: ../../note/development/git/_/chapters/record_history.md

====================

 **** （インデックス）は、変更履歴を作成するための中間領域。コミットに含めたいファイルやディレクトリは一時的に **** に移動する必要がある。

Answer: ステージ

Source: ../../note/development/git/_/chapters/record_history.md

====================

ステージ（ ****** ）は、変更履歴を作成するための中間領域。コミットに含めたいファイルやディレクトリは一時的にステージに移動する必要がある。

Answer: インデックス

Source: ../../note/development/git/_/chapters/record_history.md

====================

 ********* は、実際にコミット履歴が記録される領域。コミットしただけではリモートリポジトリには反映されず、あくまで自身のローカル環境でのみ履歴として追加される。また、複数のリモートリポジトリと紐づけることも可能。基本的にはノンベアリポジトリで運用される。

Answer: ローカルリポジトリ

Source: ../../note/development/git/_/chapters/record_history.md

====================

 ********* は、各ユーザのローカルリポジトリの変更を集約し、全体のコミット履歴を管理する領域。インターネットやサーバ上に用意するリポジトリで、開発者間で変更内容を共有したり、開発したプログラムをOSSとして公開するために用いられる。基本的にはベアリポジトリで運用される。

Answer: リモートリポジトリ

Source: ../../note/development/git/_/chapters/record_history.md

====================

 ********** は、ワークツリー、ステージにあるファイルやディレクトリを確認するコマンド。

$  ********** 

特に変更がない場合は次のような出力となる。

$  ********** 
On branch main
Your branch is up to date with 'origin/main'.

nothing to commit, working tree clean

新しくファイルを追加した場合には次のような出力となる。

On branch main
Your branch is up to date with 'origin/main'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        example.txt

no changes added to commit (use "git add" and/or "git commit -a")

ファイルに変更を加えた場合は次のような出力となる。

On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   example.txt

no changes added to commit (use "git add" and/or "git commit -a")

ステージエリアにファイルが存在する場合は次のような出力となる。

On branch main
Your branch is up to date with 'origin/main'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   example1.txt
        new file:   example2.txt

Answer: git status

Source: ../../note/development/git/_/chapters/record_history.md

====================

 ****** は、履歴として記録したいワークツリーの変更内容を一時的にステージエリアに登録する操作。 ****** しただけでは変更は履歴に記録されないので注意が必要。

 ****** には、git addコマンドを用いる。

Answer: ステージング

Source: ../../note/development/git/_/chapters/record_history.md

====================

ステージングは、履歴として記録したいワークツリーの変更内容を一時的にステージエリアに登録する操作。ステージングしただけでは変更は履歴に記録されないので注意が必要。

ステージングには、 ******* コマンドを用いる。

Answer: git add

Source: ../../note/development/git/_/chapters/record_history.md

