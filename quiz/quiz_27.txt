====================

 *** (Elastic Network Interface)は、VPC内での仮想ネットワークインタフェースカード(NIC)を表す論理コンポーネント。インスタンスにアタッチしたりデタッチしたりすることで、IPアドレスやMACアドレスといったネットワークの属性を操作することができる。

Answer: ENI

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

 ************* (IGW)は、VPCをインターネットに接続するためのサービス。ひとつのVPCに対してひとつアタッチすることができ、VPCからインターネットへアクセスすることができるようになる。

Answer: インターネットゲートウェイ

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

インターネットゲートウェイ( *** )は、VPCをインターネットに接続するためのサービス。ひとつのVPCに対してひとつアタッチすることができ、VPCからインターネットへアクセスすることができるようになる。

Answer: IGW

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

 ************** は、PrivateLinkを用いて、VPCと他のサービスをプライベートに接続するためのサービス。同じリージョン内のサービスにしか接続できない。

Answer: インタフェースエンドポイント

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

 **************************** は、PrivateLinkを用いて、VPCとロードバランサ（GWLB）を接続し、ロードバランサを経由して目的のサービスに接続する。ロードバランサを用いるため、スケールが容易となる。

Answer: Gateway Load Balancerエンドポイント

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

 ************* は、VPCのルーティングテーブルにターゲットのグローバルIPアドレスを追加することでプライベートに接続するサービス。S3とDynamoDBにのみ対応しており、同じリージョン内のサービスにしか接続できない。

Answer: ゲートウェイエンドポイント

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

 ****************** は、AWSのクラウドサービスとオンプレミスのサーバなどを専用線でプライベート接続するためのサービス。インターネットを経由せず接続することができるので、高いセキュリティレベルを保持したまま安定した速度でデータの送受信が行える。

Answer: AWS Direct COnnect

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

 *************** は、トラフィックをパブリックインターネットに公開することなく、VPC、AWSのサービス、およびオンプレミスネットワーク間のプライベート接続を実現するサービス。異なるVPC同士の接続や、VPCとPrivateLinkに対応したサービスとの接続などに用いられる（インタフェースエンドポイント）。それぞれのサービスにENIを追加するため、グローバルIPアドレスではなくプライベートIPアドレスを用いて接続が可能。

Answer: AWS PrivateLink

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

 ************** は、静的なコンテンツをキャッシュしておき、低レイテンシでユーザにコンテンツを配信するCDNサービス。世界中にエッジサーバが存在しており、あらゆる場所からのアクセスに対しても対応できる。また、オリジンサービスの負荷を軽減にもつながる。

Answer: AWS CloudFront

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

 *************** は、ドメインの登録・管理やルーティングを行う、フルマネージドな権威DNSサービス。

Answer: Amazon Route 53

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

 ****** は、Route 53におけるレコード情報（ドメイン名とIPアドレスの対応）を管理するコンテナ。

Answer: ホストゾーン

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

 ********* は、Route 53特有のレコードで、CloudFrontやELB、S3などのAWSリソースFQDN、Zone Apex（最上位ドメイン）を指定できる。

Answer: Aliasレコード

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

 ********** は、ゾーン情報の名前解決の問い合わせに対する応答の方針。Route 53では次のようなポリシーを指定することができる。

• シンプル ********** : 特別な ********** を使わない1対1のルーティング。
• フェイルオーバ ********** : アクティブ/スタンバイ方式で、アクティブ側へのヘルスチェックが失敗したときにスタンバイ側のシステムへルーティングする。本番システム障害時にSorryサーバ（Webサイトやサービスが停止していることを知らせるサーバ）のIPアドレスをセカンダリレコードとして登録しておくなどの使い方。
• 位置情報 ********** : ユーザの位置情報に基づいてトラフィックをルーティングする。
• 地理的近接性 ********** : リソースの場所に基づいてトラフィックをルーティングする。
• レイテンシ ********** : 遅延が最も少ないサーバにリクエストをルーティングする。
• 複数値回答 ********** : 1つのレコードに異なるIPアドレスを複数登録して、ランダムに返却されたIPアドレスに接続する。ヘルスチェックがNGになったサーバのIPアドレスは返却されない。
• 加重 ********** : 指定した比率で複数のリソースにトラフィックをルーティングする。

Answer: ルーティングポリシー

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

ルーティングポリシーは、ゾーン情報の名前解決の問い合わせに対する応答の方針。Route 53では次のようなポリシーを指定することができる。

•  ************** : 特別なルーティングポリシーを使わない1対1のルーティング。
• フェイルオーバルーティングポリシー: アクティブ/スタンバイ方式で、アクティブ側へのヘルスチェックが失敗したときにスタンバイ側のシステムへルーティングする。本番システム障害時にSorryサーバ（Webサイトやサービスが停止していることを知らせるサーバ）のIPアドレスをセカンダリレコードとして登録しておくなどの使い方。
• 位置情報ルーティングポリシー: ユーザの位置情報に基づいてトラフィックをルーティングする。
• 地理的近接性ルーティングポリシー: リソースの場所に基づいてトラフィックをルーティングする。
• レイテンシルーティングポリシー: 遅延が最も少ないサーバにリクエストをルーティングする。
• 複数値回答ルーティングポリシー: 1つのレコードに異なるIPアドレスを複数登録して、ランダムに返却されたIPアドレスに接続する。ヘルスチェックがNGになったサーバのIPアドレスは返却されない。
• 加重ルーティングポリシー: 指定した比率で複数のリソースにトラフィックをルーティングする。

Answer: シンプルルーティングポリシー

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

ルーティングポリシーは、ゾーン情報の名前解決の問い合わせに対する応答の方針。Route 53では次のようなポリシーを指定することができる。

• シンプルルーティングポリシー: 特別なルーティングポリシーを使わない1対1のルーティング。
•  ***************** : アクティブ/スタンバイ方式で、アクティブ側へのヘルスチェックが失敗したときにスタンバイ側のシステムへルーティングする。本番システム障害時にSorryサーバ（Webサイトやサービスが停止していることを知らせるサーバ）のIPアドレスをセカンダリレコードとして登録しておくなどの使い方。
• 位置情報ルーティングポリシー: ユーザの位置情報に基づいてトラフィックをルーティングする。
• 地理的近接性ルーティングポリシー: リソースの場所に基づいてトラフィックをルーティングする。
• レイテンシルーティングポリシー: 遅延が最も少ないサーバにリクエストをルーティングする。
• 複数値回答ルーティングポリシー: 1つのレコードに異なるIPアドレスを複数登録して、ランダムに返却されたIPアドレスに接続する。ヘルスチェックがNGになったサーバのIPアドレスは返却されない。
• 加重ルーティングポリシー: 指定した比率で複数のリソースにトラフィックをルーティングする。

Answer: フェイルオーバルーティングポリシー

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

ルーティングポリシーは、ゾーン情報の名前解決の問い合わせに対する応答の方針。Route 53では次のようなポリシーを指定することができる。

• シンプルルーティングポリシー: 特別なルーティングポリシーを使わない1対1のルーティング。
• フェイルオーバルーティングポリシー: アクティブ/スタンバイ方式で、アクティブ側へのヘルスチェックが失敗したときにスタンバイ側のシステムへルーティングする。本番システム障害時にSorryサーバ（Webサイトやサービスが停止していることを知らせるサーバ）のIPアドレスをセカンダリレコードとして登録しておくなどの使い方。
•  ************** : ユーザの位置情報に基づいてトラフィックをルーティングする。
• 地理的近接性ルーティングポリシー: リソースの場所に基づいてトラフィックをルーティングする。
• レイテンシルーティングポリシー: 遅延が最も少ないサーバにリクエストをルーティングする。
• 複数値回答ルーティングポリシー: 1つのレコードに異なるIPアドレスを複数登録して、ランダムに返却されたIPアドレスに接続する。ヘルスチェックがNGになったサーバのIPアドレスは返却されない。
• 加重ルーティングポリシー: 指定した比率で複数のリソースにトラフィックをルーティングする。

Answer: 位置情報ルーティングポリシー

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

ルーティングポリシーは、ゾーン情報の名前解決の問い合わせに対する応答の方針。Route 53では次のようなポリシーを指定することができる。

• シンプルルーティングポリシー: 特別なルーティングポリシーを使わない1対1のルーティング。
• フェイルオーバルーティングポリシー: アクティブ/スタンバイ方式で、アクティブ側へのヘルスチェックが失敗したときにスタンバイ側のシステムへルーティングする。本番システム障害時にSorryサーバ（Webサイトやサービスが停止していることを知らせるサーバ）のIPアドレスをセカンダリレコードとして登録しておくなどの使い方。
• 位置情報ルーティングポリシー: ユーザの位置情報に基づいてトラフィックをルーティングする。
•  **************** : リソースの場所に基づいてトラフィックをルーティングする。
• レイテンシルーティングポリシー: 遅延が最も少ないサーバにリクエストをルーティングする。
• 複数値回答ルーティングポリシー: 1つのレコードに異なるIPアドレスを複数登録して、ランダムに返却されたIPアドレスに接続する。ヘルスチェックがNGになったサーバのIPアドレスは返却されない。
• 加重ルーティングポリシー: 指定した比率で複数のリソースにトラフィックをルーティングする。

Answer: 地理的近接性ルーティングポリシー

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

ルーティングポリシーは、ゾーン情報の名前解決の問い合わせに対する応答の方針。Route 53では次のようなポリシーを指定することができる。

• シンプルルーティングポリシー: 特別なルーティングポリシーを使わない1対1のルーティング。
• フェイルオーバルーティングポリシー: アクティブ/スタンバイ方式で、アクティブ側へのヘルスチェックが失敗したときにスタンバイ側のシステムへルーティングする。本番システム障害時にSorryサーバ（Webサイトやサービスが停止していることを知らせるサーバ）のIPアドレスをセカンダリレコードとして登録しておくなどの使い方。
• 位置情報ルーティングポリシー: ユーザの位置情報に基づいてトラフィックをルーティングする。
• 地理的近接性ルーティングポリシー: リソースの場所に基づいてトラフィックをルーティングする。
•  *************** : 遅延が最も少ないサーバにリクエストをルーティングする。
• 複数値回答ルーティングポリシー: 1つのレコードに異なるIPアドレスを複数登録して、ランダムに返却されたIPアドレスに接続する。ヘルスチェックがNGになったサーバのIPアドレスは返却されない。
• 加重ルーティングポリシー: 指定した比率で複数のリソースにトラフィックをルーティングする。

Answer: レイテンシルーティングポリシー

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

ルーティングポリシーは、ゾーン情報の名前解決の問い合わせに対する応答の方針。Route 53では次のようなポリシーを指定することができる。

• シンプルルーティングポリシー: 特別なルーティングポリシーを使わない1対1のルーティング。
• フェイルオーバルーティングポリシー: アクティブ/スタンバイ方式で、アクティブ側へのヘルスチェックが失敗したときにスタンバイ側のシステムへルーティングする。本番システム障害時にSorryサーバ（Webサイトやサービスが停止していることを知らせるサーバ）のIPアドレスをセカンダリレコードとして登録しておくなどの使い方。
• 位置情報ルーティングポリシー: ユーザの位置情報に基づいてトラフィックをルーティングする。
• 地理的近接性ルーティングポリシー: リソースの場所に基づいてトラフィックをルーティングする。
• レイテンシルーティングポリシー: 遅延が最も少ないサーバにリクエストをルーティングする。
•  *************** : 1つのレコードに異なるIPアドレスを複数登録して、ランダムに返却されたIPアドレスに接続する。ヘルスチェックがNGになったサーバのIPアドレスは返却されない。
• 加重ルーティングポリシー: 指定した比率で複数のリソースにトラフィックをルーティングする。

Answer: 複数値回答ルーティングポリシー

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

ルーティングポリシーは、ゾーン情報の名前解決の問い合わせに対する応答の方針。Route 53では次のようなポリシーを指定することができる。

• シンプルルーティングポリシー: 特別なルーティングポリシーを使わない1対1のルーティング。
• フェイルオーバルーティングポリシー: アクティブ/スタンバイ方式で、アクティブ側へのヘルスチェックが失敗したときにスタンバイ側のシステムへルーティングする。本番システム障害時にSorryサーバ（Webサイトやサービスが停止していることを知らせるサーバ）のIPアドレスをセカンダリレコードとして登録しておくなどの使い方。
• 位置情報ルーティングポリシー: ユーザの位置情報に基づいてトラフィックをルーティングする。
• 地理的近接性ルーティングポリシー: リソースの場所に基づいてトラフィックをルーティングする。
• レイテンシルーティングポリシー: 遅延が最も少ないサーバにリクエストをルーティングする。
• 複数値回答ルーティングポリシー: 1つのレコードに異なるIPアドレスを複数登録して、ランダムに返却されたIPアドレスに接続する。ヘルスチェックがNGになったサーバのIPアドレスは返却されない。
•  ************ : 指定した比率で複数のリソースにトラフィックをルーティングする。

Answer: 加重ルーティングポリシー

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

 *** (Elastic Load Balancing)は、AWSで提供されているロードバランササービス。

Answer: ELB

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

ELB( ********************** )は、AWSで提供されているロードバランササービス。

Answer: Elastic Load Balancing

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

 *** (Application Load Balancer)は、L7レイヤでの負荷分散を行うロードバランサ。IPアドレス、EC2インスタンス、Lambda関数などをターゲットとして指定することができ、プロトコルとしてはHTTPやHTTPS、gRPCをサポートしている。Webサービスに最適なロードバランサ。

Answer: ALB

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

ALB( ************************* )は、L7レイヤでの負荷分散を行うロードバランサ。IPアドレス、EC2インスタンス、Lambda関数などをターゲットとして指定することができ、プロトコルとしてはHTTPやHTTPS、gRPCをサポートしている。Webサービスに最適なロードバランサ。

Answer: Application Load Balancer

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

 *** (Network Load Balancer)は、L4レイヤでの負荷分散を行うロードバランサ。IPアドレス、EC2インスタンス、ALBなどをターゲットとして指定することができ、プロトコルとしてはTCPやUDP、TLSをサポートしている。HTTPプロトコル以外を扱いたい場合に最適なロードバランサ。

Answer: NLB

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

NLB( ********************* )は、L4レイヤでの負荷分散を行うロードバランサ。IPアドレス、EC2インスタンス、ALBなどをターゲットとして指定することができ、プロトコルとしてはTCPやUDP、TLSをサポートしている。HTTPプロトコル以外を扱いたい場合に最適なロードバランサ。

Answer: Network Load Balancer

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

 *** (Classic Load Balancer)は、L4-L7レイヤでの負荷分散を行うロードバランサ。クラシックなEC2インスタンスを対象としているため、新しいサービスを構築する場合は、用途に合わせてALBかNLBを用いることが推奨されている。

Answer: CLB

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

CLB( ********************* )は、L4-L7レイヤでの負荷分散を行うロードバランサ。クラシックなEC2インスタンスを対象としているため、新しいサービスを構築する場合は、用途に合わせてALBかNLBを用いることが推奨されている。

Answer: Classic Load Balancer

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

 **** (Gateway Load Balancer)は、VPCのGateway Load Balancerエンドポイントに用いられるロードバランサ。VPCでサードパーティのセキュリティ製品を利用したい場合などに最適。

Answer: GWLB

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

GWLB( ********************* )は、VPCの ********************* エンドポイントに用いられるロードバランサ。VPCでサードパーティのセキュリティ製品を利用したい場合などに最適。

Answer: Gateway Load Balancer

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

 *** (AWS Identity and Access Management)は、AWSサービスを利用する際の権限管理を行うサービス。

Answer: IAM

Source: ../../note/network/aws/_/chapters/security_and_identity.md

====================

IAM( ********************************** )は、AWSサービスを利用する際の権限管理を行うサービス。

Answer: AWS Identity and Access Management

Source: ../../note/network/aws/_/chapters/security_and_identity.md

====================

 ****** は、AWSリソースの操作をするユーザで、AWSのマネジメントコンソールにログインしたり、AWSの様々なサービスにアクセスするために用いる。

Answer: IAMユーザ

Source: ../../note/network/aws/_/chapters/security_and_identity.md

====================

 ******* は、AWSサービスにアクセスするための権限で、実行できるアクションやリソース、条件を制御することができる。IAMユーザを作成しただけでは、AWSサービスに対するアクセス権限が何もないため、AWSサービスを利用することができない。 ******* を作成し、IAMユーザに付与することで、与えられた権限の範囲内でAWSサービスを利用することができる。また、IAMユーザだけでなく、IAMユーザグループやIAMロールに対しても ******* を付与することができる。

Answer: IAMポリシー

Source: ../../note/network/aws/_/chapters/security_and_identity.md

====================

 ********** は、IAMユーザをグループ化して権限管理を行う機能。共通の権限を与えたいIAMユーザに対してまとめてIAMポリシーを適用することができる。

Answer: IAMユーザグループ

Source: ../../note/network/aws/_/chapters/security_and_identity.md

====================

 ****** は、AWSリソース自体に付与する権限。あるリソースに対して、サービス、リソース、アクションを指定して操作権限を付与することができる。

Answer: IAMロール

Source: ../../note/network/aws/_/chapters/security_and_identity.md

====================

 *** (AWS Key Management Service)は、データの暗号化/復号化をするためのキーをセキュアに管理できるサービス。鍵管理機能を持つ他、IAMによる権限管理といったAWSサービスとの連携が容易という利点もある。 *** は、エンベロープ暗号化を採用している。

Answer: KMS

Source: ../../note/network/aws/_/chapters/security_and_identity.md

====================

KMS( ************************** )は、データの暗号化/復号化をするためのキーをセキュアに管理できるサービス。鍵管理機能を持つ他、IAMによる権限管理といったAWSサービスとの連携が容易という利点もある。KMSは、エンベロープ暗号化を採用している。

Answer: AWS Key Management Service

Source: ../../note/network/aws/_/chapters/security_and_identity.md

====================

 ********* は、データを暗号化するためのキーと、そのキーをさらに暗号化するような2層構造の暗号化方式。

Answer: エンベロープ暗号化

Source: ../../note/network/aws/_/chapters/security_and_identity.md

====================

 *** (AWS Certification Manager)は、インターネットにおける通信をSSL/TLSプロトコルにより暗号化するための証明書の発行や管理を行うサービス。AWS自身が認証局となって、ドメイン証明書を発行し、RSAやSHA（暗号化方式）のSSL/TLSサーバ証明書の作成・管理を行うことができる。証明書の有効期限は13か月で、自動で更新するように設定することもできる。

Answer: ACM

Source: ../../note/network/aws/_/chapters/security_and_identity.md

====================

 ************** は、Webアプリケーションおよびモバイルアプリに素早く簡単にユーザーのサインアップ/サインイン、アクセスコントロールの機能を追加できるサービス。ユーザプールを保持し、ユーザのサインアップとサインインのためのインタフェースを提供する。

Answer: Amazon Cognito

Source: ../../note/network/aws/_/chapters/security_and_identity.md

====================

 *** (Amazon Elastic Block Store)は、AWSが提供するブロックストレージサービス。EC2のOS領域として利用したり、追加ボリュームとして複数の *** をEC2にアタッチすることもできる。RDSのデータ保存用にも用いられる。

 *** はEC2と1対1で対応するサービスであり、複数のEC2にアタッチするマルチアタッチ機能もあるが制約が多い。また、 *** は同じAZ内にあるEC2にしかアタッチすることはできず、別のAZのEC2にアタッチしたい場合は、 *** のスナップショットを取得して新しい *** ボリュームをEC2と同じAZ内に作る必要がある。

Answer: EBS

Source: ../../note/network/aws/_/chapters/storage.md

====================

EBS( ************************** )は、AWSが提供するブロックストレージサービス。EC2のOS領域として利用したり、追加ボリュームとして複数のEBSをEC2にアタッチすることもできる。RDSのデータ保存用にも用いられる。

EBSはEC2と1対1で対応するサービスであり、複数のEC2にアタッチするマルチアタッチ機能もあるが制約が多い。また、EBSは同じAZ内にあるEC2にしかアタッチすることはできず、別のAZのEC2にアタッチしたい場合は、EBSのスナップショットを取得して新しいEBSボリュームをEC2と同じAZ内に作る必要がある。

Answer: Amazon Elastic Block Store

Source: ../../note/network/aws/_/chapters/storage.md

====================

EBSには、SSDとHDDそれぞれにボリュームタイプの種類があり、それに加えて旧世代のHDDストレージタイプとしてマグネティックタイプがある。各タイプの性能を最大限発揮するためには、EBS最適化インスタンスオプションのついたEC2を利用することが推奨される。

•  ***** (gp2,gp3): EBSの中で最も一般的なボリュームタイプ。性能の指標としてIOPS（1秒あたりに処理できるI/Oアクセス数）を用い、容量に応じたベースライン性能がある。容量が少ないボリュームには、一時的なIOPSの上昇に対応できるようにバースト機能が用意されている。
• プロビジョンドIOPS SSD(io1): EBSの中で最も高性能なボリュームタイプ。RDSやEC2インスタンスでデータベースサーバを構成する場合など、高いIOPS性能が求められる場合や、高いスループットが必要なユースケースに適している。
• スループット最適化HDD(st1): HDDをベースとしたスループット重視のボリュームタイプ。ログデータに対する処理やバッチ処理のインプット用ファイルなど、大容量ファイルを高速に読み取るようなユースケースに適している。性能指標としてスループットを用いている。
• Cold HDD(sc1): 性能は高くはないが最も低コストなボリュームタイプ。利用頻度が少なく、アクセス時の性能も求められないデータにシーケンシャルアクセス（端から順番にアクセスする、⇔ ランダムアクセス）するようなユースケース、あるいはアーカイブ領域の用途に適している。

Answer: 汎用SSD

Source: ../../note/network/aws/_/chapters/storage.md

====================

EBSには、SSDとHDDそれぞれにボリュームタイプの種類があり、それに加えて旧世代のHDDストレージタイプとしてマグネティックタイプがある。各タイプの性能を最大限発揮するためには、EBS最適化インスタンスオプションのついたEC2を利用することが推奨される。

• 汎用SSD(gp2,gp3): EBSの中で最も一般的なボリュームタイプ。性能の指標としてIOPS（1秒あたりに処理できるI/Oアクセス数）を用い、容量に応じたベースライン性能がある。容量が少ないボリュームには、一時的なIOPSの上昇に対応できるようにバースト機能が用意されている。
•  *************** (io1): EBSの中で最も高性能なボリュームタイプ。RDSやEC2インスタンスでデータベースサーバを構成する場合など、高いIOPS性能が求められる場合や、高いスループットが必要なユースケースに適している。
• スループット最適化HDD(st1): HDDをベースとしたスループット重視のボリュームタイプ。ログデータに対する処理やバッチ処理のインプット用ファイルなど、大容量ファイルを高速に読み取るようなユースケースに適している。性能指標としてスループットを用いている。
• Cold HDD(sc1): 性能は高くはないが最も低コストなボリュームタイプ。利用頻度が少なく、アクセス時の性能も求められないデータにシーケンシャルアクセス（端から順番にアクセスする、⇔ ランダムアクセス）するようなユースケース、あるいはアーカイブ領域の用途に適している。

Answer: プロビジョンドIOPS SSD

Source: ../../note/network/aws/_/chapters/storage.md

====================

EBSには、SSDとHDDそれぞれにボリュームタイプの種類があり、それに加えて旧世代のHDDストレージタイプとしてマグネティックタイプがある。各タイプの性能を最大限発揮するためには、EBS最適化インスタンスオプションのついたEC2を利用することが推奨される。

• 汎用SSD(gp2,gp3): EBSの中で最も一般的なボリュームタイプ。性能の指標としてIOPS（1秒あたりに処理できるI/Oアクセス数）を用い、容量に応じたベースライン性能がある。容量が少ないボリュームには、一時的なIOPSの上昇に対応できるようにバースト機能が用意されている。
• プロビジョンドIOPS SSD(io1): EBSの中で最も高性能なボリュームタイプ。RDSやEC2インスタンスでデータベースサーバを構成する場合など、高いIOPS性能が求められる場合や、高いスループットが必要なユースケースに適している。
•  ************ (st1): HDDをベースとしたスループット重視のボリュームタイプ。ログデータに対する処理やバッチ処理のインプット用ファイルなど、大容量ファイルを高速に読み取るようなユースケースに適している。性能指標としてスループットを用いている。
• Cold HDD(sc1): 性能は高くはないが最も低コストなボリュームタイプ。利用頻度が少なく、アクセス時の性能も求められないデータにシーケンシャルアクセス（端から順番にアクセスする、⇔ ランダムアクセス）するようなユースケース、あるいはアーカイブ領域の用途に適している。

Answer: スループット最適化HDD

Source: ../../note/network/aws/_/chapters/storage.md

====================

EBSには、SSDとHDDそれぞれにボリュームタイプの種類があり、それに加えて旧世代のHDDストレージタイプとしてマグネティックタイプがある。各タイプの性能を最大限発揮するためには、EBS最適化インスタンスオプションのついたEC2を利用することが推奨される。

• 汎用SSD(gp2,gp3): EBSの中で最も一般的なボリュームタイプ。性能の指標としてIOPS（1秒あたりに処理できるI/Oアクセス数）を用い、容量に応じたベースライン性能がある。容量が少ないボリュームには、一時的なIOPSの上昇に対応できるようにバースト機能が用意されている。
• プロビジョンドIOPS SSD(io1): EBSの中で最も高性能なボリュームタイプ。RDSやEC2インスタンスでデータベースサーバを構成する場合など、高いIOPS性能が求められる場合や、高いスループットが必要なユースケースに適している。
• スループット最適化HDD(st1): HDDをベースとしたスループット重視のボリュームタイプ。ログデータに対する処理やバッチ処理のインプット用ファイルなど、大容量ファイルを高速に読み取るようなユースケースに適している。性能指標としてスループットを用いている。
•  ******** (sc1): 性能は高くはないが最も低コストなボリュームタイプ。利用頻度が少なく、アクセス時の性能も求められないデータにシーケンシャルアクセス（端から順番にアクセスする、⇔ ランダムアクセス）するようなユースケース、あるいはアーカイブ領域の用途に適している。

Answer: Cold HDD

Source: ../../note/network/aws/_/chapters/storage.md

====================

 ****** は、一時的な処理量の増加へどれほど対応できるかを表す、ストレージサービスの性能指標のひとつ。あくまでベースライン性能を中心に設計しておき、 ****** に頼ったシステムとならないようにする。

Answer: バースト性能

Source: ../../note/network/aws/_/chapters/storage.md

====================

 ********** は、複数のEC2インスタンスに同一のEBSをアタッチできるという機能。同一のAZのインスタンスからのみアタッチ可能で、書き込みの排他制御を利用者自身で検討する必要がある。

Answer: EBSマルチアタッチ

Source: ../../note/network/aws/_/chapters/storage.md

====================

 *** (Amazon Elastic File System)は、容量無制限で複数のEC2インスタンスから同時にアクセスできるファイルストレージサービス。クライアントから *** への接続は、一般的なNFS(Network File System)プロトコルをサポートしている。amazon-efs-utilsツールを使うと、 *** へのマウントに関する推奨オプションが含まれていたり、ファイルシステムにトラブルが発生した場合のトラブルシューティングに役立つログが記録できる。 *** はファイルが作成されると3か所以上のAZに保存される分散ファイルシステムを構成する。

Answer: EFS

Source: ../../note/network/aws/_/chapters/storage.md

====================

EFS( ************************** )は、容量無制限で複数のEC2インスタンスから同時にアクセスできるファイルストレージサービス。クライアントからEFSへの接続は、一般的なNFS(Network File System)プロトコルをサポートしている。amazon-efs-utilsツールを使うと、EFSへのマウントに関する推奨オプションが含まれていたり、ファイルシステムにトラブルが発生した場合のトラブルシューティングに役立つログが記録できる。EFSはファイルが作成されると3か所以上のAZに保存される分散ファイルシステムを構成する。

Answer: Amazon Elastic File System

Source: ../../note/network/aws/_/chapters/storage.md

====================

EFS(Amazon Elastic File System)は、容量無制限で複数のEC2インスタンスから同時にアクセスできるファイルストレージサービス。クライアントからEFSへの接続は、一般的な *** (Network File System)プロトコルをサポートしている。amazon-efs-utilsツールを使うと、EFSへのマウントに関する推奨オプションが含まれていたり、ファイルシステムにトラブルが発生した場合のトラブルシューティングに役立つログが記録できる。EFSはファイルが作成されると3か所以上のAZに保存される分散ファイルシステムを構成する。

Answer: NFS

Source: ../../note/network/aws/_/chapters/storage.md

====================

EFS(Amazon Elastic File System)は、容量無制限で複数のEC2インスタンスから同時にアクセスできるファイルストレージサービス。クライアントからEFSへの接続は、一般的なNFS(Network File System)プロトコルをサポートしている。 **************** ツールを使うと、EFSへのマウントに関する推奨オプションが含まれていたり、ファイルシステムにトラブルが発生した場合のトラブルシューティングに役立つログが記録できる。EFSはファイルが作成されると3か所以上のAZに保存される分散ファイルシステムを構成する。

Answer: amazon-efs-utils

Source: ../../note/network/aws/_/chapters/storage.md

====================

EFSには、 ************ と最大I/Oパフォーマンスモードがある。通常は ************ 、数百～数千台といったクライアントから同時にEFSにアクセスするようなユースケースでは最大I/Oパフォーマンスモードを用いる。

どちらのモードを用いるかの指標として、CloudWatchのPercentIOLimitというメトリクスが参考になる。 ************ でPercentIOLimitが長時間高い状態であれば、最大I/Oパフォーマンスモードに変更することを検討するとよい。

パフォーマンスモードは後から変更できないので注意する。

Answer: 汎用パフォーマンスモード

Source: ../../note/network/aws/_/chapters/storage.md

====================

EFSには、汎用パフォーマンスモードと *************** がある。通常は汎用パフォーマンスモード、数百～数千台といったクライアントから同時にEFSにアクセスするようなユースケースでは *************** を用いる。

どちらのモードを用いるかの指標として、CloudWatchのPercentIOLimitというメトリクスが参考になる。汎用パフォーマンスモードでPercentIOLimitが長時間高い状態であれば、 *************** に変更することを検討するとよい。

パフォーマンスモードは後から変更できないので注意する。

Answer: 最大I/Oパフォーマンスモード

Source: ../../note/network/aws/_/chapters/storage.md

====================

EFSには、汎用パフォーマンスモードと最大I/Oパフォーマンスモードがある。通常は汎用パフォーマンスモード、数百～数千台といったクライアントから同時にEFSにアクセスするようなユースケースでは最大I/Oパフォーマンスモードを用いる。

どちらのモードを用いるかの指標として、CloudWatchの ************** というメトリクスが参考になる。汎用パフォーマンスモードで ************** が長時間高い状態であれば、最大I/Oパフォーマンスモードに変更することを検討するとよい。

パフォーマンスモードは後から変更できないので注意する。

Answer: PercentIOLimit

Source: ../../note/network/aws/_/chapters/storage.md

====================

EFSには、 ************* とプロビジョニングスループットモードがある。

 ************* は、EFSに保存されているデータ容量に応じてベースラインとなるスループットが設定されている。一時的なスループットの上昇にも耐えられるようなバースト機能を持ったモードとなっている。

プロビジョニングスループットモードは、 ************* で設定されているベースラインスループットやバースト時の最大スループットでは性能が足りない場合に、任意のスループット値を指定することができるモード。Web配信コンテンツやアプリケーションデータなどの頻繁なアクセスが見込まれる場合に有用。

どちらのモードを用いるかの指標として、CloudWatchのBurstCreditBalanceというメトリクスが参考になる。クレジットバランスをすべて使い切ってしまったり、常に減少傾向である場合にはプロビジョニングスループットモードを選択する。

スループットモードはあとから変更できる。

Answer: バーストスループットモード

Source: ../../note/network/aws/_/chapters/storage.md

====================

EFSには、バーストスループットモードと ***************** がある。

バーストスループットモードは、EFSに保存されているデータ容量に応じてベースラインとなるスループットが設定されている。一時的なスループットの上昇にも耐えられるようなバースト機能を持ったモードとなっている。

 ***************** は、バーストスループットモードで設定されているベースラインスループットやバースト時の最大スループットでは性能が足りない場合に、任意のスループット値を指定することができるモード。Web配信コンテンツやアプリケーションデータなどの頻繁なアクセスが見込まれる場合に有用。

どちらのモードを用いるかの指標として、CloudWatchのBurstCreditBalanceというメトリクスが参考になる。クレジットバランスをすべて使い切ってしまったり、常に減少傾向である場合には ***************** を選択する。

スループットモードはあとから変更できる。

Answer: プロビジョニングスループットモード

Source: ../../note/network/aws/_/chapters/storage.md

====================

EFSには、バーストスループットモードとプロビジョニングスループットモードがある。

バーストスループットモードは、EFSに保存されているデータ容量に応じてベースラインとなるスループットが設定されている。一時的なスループットの上昇にも耐えられるようなバースト機能を持ったモードとなっている。

プロビジョニングスループットモードは、バーストスループットモードで設定されているベースラインスループットやバースト時の最大スループットでは性能が足りない場合に、任意のスループット値を指定することができるモード。Web配信コンテンツやアプリケーションデータなどの頻繁なアクセスが見込まれる場合に有用。

どちらのモードを用いるかの指標として、CloudWatchの ****************** というメトリクスが参考になる。クレジットバランスをすべて使い切ってしまったり、常に減少傾向である場合にはプロビジョニングスループットモードを選択する。

スループットモードはあとから変更できる。

Answer: BurstCreditBalance

Source: ../../note/network/aws/_/chapters/storage.md

====================

 ** (Amazon Simple Storage Service)は、高い耐久性を持つ容量無制限のオブジェクトストレージサービス。 ** の各オブジェクトには、RESTやSOAPといったHTTPベースのWeb APIを使ってアクセスする。柔軟性に優れており、アイデア次第で様々な利用方法がある。

• データバックアップ
• ビックデータ解析用のデータレイク
• ETL(Extract/Transform/Load)の中間ファイル保存
• Auto Scaling構成されたEC2インスタンスやコンテナからのログ転送先
• 静的コンテンツのホスティング
• Key-Value型のデータベース

Answer: S3

Source: ../../note/network/aws/_/chapters/storage.md

====================

S3( ***************************** )は、高い耐久性を持つ容量無制限のオブジェクトストレージサービス。S3の各オブジェクトには、RESTやSOAPといったHTTPベースのWeb APIを使ってアクセスする。柔軟性に優れており、アイデア次第で様々な利用方法がある。

• データバックアップ
• ビックデータ解析用のデータレイク
• ETL(Extract/Transform/Load)の中間ファイル保存
• Auto Scaling構成されたEC2インスタンスやコンテナからのログ転送先
• 静的コンテンツのホスティング
• Key-Value型のデータベース

Answer: Amazon Simple Storage Service

Source: ../../note/network/aws/_/chapters/storage.md

====================

 **** は、S3においてオブジェクトを保存するための領域。 **** 名はAWS内で一意である必要がある。

Answer: バケット

Source: ../../note/network/aws/_/chapters/storage.md

====================

 ****** は、S3において保存されるデータそのもの。各 ****** にはキーが付与され、「バケット名+キー名+バージョンID」で必ず一意になるURLが作成される。

Answer: オブジェクト

Source: ../../note/network/aws/_/chapters/storage.md

====================

 ***** は、S3においてオブジェクトを管理するための情報。アプリケーションで必要な情報をユーザ定義 ***** として保持することもできる。

Answer: メタデータ

Source: ../../note/network/aws/_/chapters/storage.md

====================

S3には用途に応じてランク分けされたストレージクラスがある。可用性の性能にはSLA(Service Level Agreement)が用いられている。

•  ****  : デフォルトのストレージクラス。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.99%
•  ****  - 低頻度アクセス : 格納コストが安価なストレージクラス。データの読み出し容量に対する従量課金が行われる。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.9%
• S3 1ゾーン - IA : 単一のAZ内のみでデータを複製するストレージクラス。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.5%
• S3 Intelligent - Tiering : 参照頻度の高低を明確に決めることができないデータを扱う場合に有効なストレージクラス。 **** と ****  - 低頻度アクセスの2層構成となっている。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.9%
• S3 Glacier : ほとんど参照されないアーカイブ目的のデータを保存するストレージクラス。新規作成時に選択することはできず、ライフサイクル管理機能によって利用可能となる。データへのアクセスには事前にリクエストが必要で、アクセスできるようになるまで時間がかかる。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.99%
• S3 Glacier Deep Archive : S3 Glacier同様アーカイブ用のストレージクラス。さらにアクセス頻度が低いデータを想定している。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.99%

Answer: S3標準

Source: ../../note/network/aws/_/chapters/storage.md

====================

S3には用途に応じてランク分けされたストレージクラスがある。可用性の性能にはSLA(Service Level Agreement)が用いられている。

• S3標準 : デフォルトのストレージクラス。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.99%
•  **************  : 格納コストが安価なストレージクラス。データの読み出し容量に対する従量課金が行われる。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.9%
• S3 1ゾーン - IA : 単一のAZ内のみでデータを複製するストレージクラス。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.5%
• S3 Intelligent - Tiering : 参照頻度の高低を明確に決めることができないデータを扱う場合に有効なストレージクラス。S3標準と ************** の2層構成となっている。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.9%
• S3 Glacier : ほとんど参照されないアーカイブ目的のデータを保存するストレージクラス。新規作成時に選択することはできず、ライフサイクル管理機能によって利用可能となる。データへのアクセスには事前にリクエストが必要で、アクセスできるようになるまで時間がかかる。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.99%
• S3 Glacier Deep Archive : S3 Glacier同様アーカイブ用のストレージクラス。さらにアクセス頻度が低いデータを想定している。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.99%

Answer: S3標準 - 低頻度アクセス

Source: ../../note/network/aws/_/chapters/storage.md

====================

S3には用途に応じてランク分けされたストレージクラスがある。可用性の性能にはSLA(Service Level Agreement)が用いられている。

• S3標準 : デフォルトのストレージクラス。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.99%
• S3標準 - 低頻度アクセス : 格納コストが安価なストレージクラス。データの読み出し容量に対する従量課金が行われる。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.9%
•  ************  : 単一のAZ内のみでデータを複製するストレージクラス。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.5%
• S3 Intelligent - Tiering : 参照頻度の高低を明確に決めることができないデータを扱う場合に有効なストレージクラス。S3標準とS3標準 - 低頻度アクセスの2層構成となっている。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.9%
• S3 Glacier : ほとんど参照されないアーカイブ目的のデータを保存するストレージクラス。新規作成時に選択することはできず、ライフサイクル管理機能によって利用可能となる。データへのアクセスには事前にリクエストが必要で、アクセスできるようになるまで時間がかかる。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.99%
• S3 Glacier Deep Archive : S3 Glacier同様アーカイブ用のストレージクラス。さらにアクセス頻度が低いデータを想定している。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.99%

Answer: S3 1ゾーン - IA

Source: ../../note/network/aws/_/chapters/storage.md

====================

S3には用途に応じてランク分けされたストレージクラスがある。可用性の性能にはSLA(Service Level Agreement)が用いられている。

• S3標準 : デフォルトのストレージクラス。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.99%
• S3標準 - 低頻度アクセス : 格納コストが安価なストレージクラス。データの読み出し容量に対する従量課金が行われる。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.9%
• S3 1ゾーン - IA : 単一のAZ内のみでデータを複製するストレージクラス。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.5%
•  ************************  : 参照頻度の高低を明確に決めることができないデータを扱う場合に有効なストレージクラス。S3標準とS3標準 - 低頻度アクセスの2層構成となっている。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.9%
• S3 Glacier : ほとんど参照されないアーカイブ目的のデータを保存するストレージクラス。新規作成時に選択することはできず、ライフサイクル管理機能によって利用可能となる。データへのアクセスには事前にリクエストが必要で、アクセスできるようになるまで時間がかかる。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.99%
• S3 Glacier Deep Archive : S3 Glacier同様アーカイブ用のストレージクラス。さらにアクセス頻度が低いデータを想定している。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.99%

Answer: S3 Intelligent - Tiering

Source: ../../note/network/aws/_/chapters/storage.md

====================

S3には用途に応じてランク分けされたストレージクラスがある。可用性の性能にはSLA(Service Level Agreement)が用いられている。

• S3標準 : デフォルトのストレージクラス。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.99%
• S3標準 - 低頻度アクセス : 格納コストが安価なストレージクラス。データの読み出し容量に対する従量課金が行われる。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.9%
• S3 1ゾーン - IA : 単一のAZ内のみでデータを複製するストレージクラス。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.5%
• S3 Intelligent - Tiering : 参照頻度の高低を明確に決めることができないデータを扱う場合に有効なストレージクラス。S3標準とS3標準 - 低頻度アクセスの2層構成となっている。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.9%
• S3 Glacier : ほとんど参照されないアーカイブ目的のデータを保存するストレージクラス。新規作成時に選択することはできず、ライフサイクル管理機能によって利用可能となる。データへのアクセスには事前にリクエストが必要で、アクセスできるようになるまで時間がかかる。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.99%
•  ***********************  : S3 Glacier同様アーカイブ用のストレージクラス。さらにアクセス頻度が低いデータを想定している。
	• 耐久性： 99.999999999%（イレブンナイン）
	• 可用性： 99.99%

Answer: S3 Glacier Deep Archive

Source: ../../note/network/aws/_/chapters/storage.md

====================

 *************** は、S3をCDNとして静的なコンテンツの配信を行う機能。

Answer: 静的コンテンツホスティング機能

Source: ../../note/network/aws/_/chapters/storage.md

====================

 ******* は、アクセスを許可したいオブジェクトに対して期限を指定してURLを発行する機能。バケットやオブジェクトのアクセス制御を変更することなく特定のオブジェクトに一時的にアクセスを許可したい場合に有効。 ******* を知っている人はだれでもオブジェクトにアクセスできる。

Answer: 署名付きURL

Source: ../../note/network/aws/_/chapters/storage.md

====================

 ***************** は、S3と同様にイレブンナインの耐久性を持ちながらもコストを抑えた、アーカイブストレージサービス。データの取り出しには時間がかかるため、アクセス頻度が低いデータなど限られたユースケースにのみ使用可能。

Answer: Amazon S3 Glacier

Source: ../../note/network/aws/_/chapters/storage.md

====================

 **** は、S3 Glacierにおいてアーカイブを保存するための領域で、S3のバケットに相当する。

Answer: ボールト

Source: ../../note/network/aws/_/chapters/storage.md

====================

 ***** は、S3 Glacierに格納されるデータのことで、S3のオブジェクトに相当する。

Answer: アーカイブ

Source: ../../note/network/aws/_/chapters/storage.md

====================

 ****** は、各ボールトに保存されているアーカイブの情報を収集し、1日1回の頻度で更新される。リアルタイムで状況を確認したい場合は、マネジメントコンソールで確認するか、ListVaults APIを実行する。

Answer: インベントリ

Source: ../../note/network/aws/_/chapters/storage.md

====================

 *** は、アーカイブやインベントリに対して検索をかけたり、データをダウンロードするといった要求に対して処理を実行し、処理の状況を管理する機能。

Answer: ジョブ

Source: ../../note/network/aws/_/chapters/storage.md

====================

 ***************** は、アーカイブデータに対してSQLを実行して、条件に合ったデータを抽出する機能。

Answer: S3 Glacier Select

Source: ../../note/network/aws/_/chapters/storage.md

====================

 ******* は、S3 Glacierのアーカイブが削除されないように制御する機能。 ******* ポリシーを設定することで、ユーザのアーカイブ削除を拒否する。

Answer: ボールトロック

Source: ../../note/network/aws/_/chapters/storage.md

====================

 ******************* は、オンプレミスにあるデータをクラウドへ連携するための受け口を提供するためのサービス。データの保存先としてはS3やS3 Glacierなどの耐久性が高く低コストなストレージが利用されることが多い。

Answer: AWS Storage Gateway

Source: ../../note/network/aws/_/chapters/storage.md

====================

 ********** は、S3をクライアントサーバからNFSマウントして、ファイルシステムのように扱うことができるゲートウェイ。作成したファイルは、非同期（ほぼリアルタイム）でS3にアップロードされる。

Answer: ファイルゲートウェイ

Source: ../../note/network/aws/_/chapters/storage.md

====================

 *********** は、各ファイルをオブジェクトとして管理するのではなく、S3のデータ保存領域全体を1つのボリュームとして管理する。クライアントサーバからのゲートウェイへの接続方式は、iSCSI接続になる。

• キャッシュ型ボリューム : 頻繁に利用するデータはStorage Gateway内のキャッシュディスク（オンプレミス）に保存して、すべてのデータを保存するストレージ（プライマリストレージ）としてS3を利用する。オンプレミスのキャッシュボリュームに頻繁に使用するデータを、アップロードバッファボリュームにS3にアップロードするデータを保管しておく。
• 保管型ボリューム : すべてのデータを保存するストレージとしてローカルストレージを利用し、データを定期的にスナップショット形式でS3へ転送する。オンプレミスのデータを定期的にバックアップする用途に適している。

Answer: ボリュームゲートウェイ

Source: ../../note/network/aws/_/chapters/storage.md

====================

ボリュームゲートウェイは、各ファイルをオブジェクトとして管理するのではなく、S3のデータ保存領域全体を1つのボリュームとして管理する。クライアントサーバからのゲートウェイへの接続方式は、iSCSI接続になる。

•  ***********  : 頻繁に利用するデータはStorage Gateway内のキャッシュディスク（オンプレミス）に保存して、すべてのデータを保存するストレージ（プライマリストレージ）としてS3を利用する。オンプレミスのキャッシュボリュームに頻繁に使用するデータを、アップロードバッファボリュームにS3にアップロードするデータを保管しておく。
• 保管型ボリューム : すべてのデータを保存するストレージとしてローカルストレージを利用し、データを定期的にスナップショット形式でS3へ転送する。オンプレミスのデータを定期的にバックアップする用途に適している。

Answer: キャッシュ型ボリューム

Source: ../../note/network/aws/_/chapters/storage.md

====================

ボリュームゲートウェイは、各ファイルをオブジェクトとして管理するのではなく、S3のデータ保存領域全体を1つのボリュームとして管理する。クライアントサーバからのゲートウェイへの接続方式は、iSCSI接続になる。

• キャッシュ型ボリューム : 頻繁に利用するデータはStorage Gateway内のキャッシュディスク（オンプレミス）に保存して、すべてのデータを保存するストレージ（プライマリストレージ）としてS3を利用する。オンプレミスのキャッシュボリュームに頻繁に使用するデータを、アップロードバッファボリュームにS3にアップロードするデータを保管しておく。
•  ********  : すべてのデータを保存するストレージとしてローカルストレージを利用し、データを定期的にスナップショット形式でS3へ転送する。オンプレミスのデータを定期的にバックアップする用途に適している。

Answer: 保管型ボリューム

Source: ../../note/network/aws/_/chapters/storage.md

====================

 ********* は、テープデバイスの代替としてS3やS3 Glacierにデータをバックアップするタイプのゲートウェイ。すでにバックアップにテープデバイスを利用している場合は、Storage Gatewayへの移行が可能。

Answer: テープゲートウェイ

Source: ../../note/network/aws/_/chapters/storage.md

====================

 ********** は、フルマネージドなファイルストレージで、Windows向けの **********  for Windowsファイルサーバと、ハイパフォーマンスコンピューティング向けの **********  for Lustreがある。

Answer: Amazon FSx

Source: ../../note/network/aws/_/chapters/storage.md

====================

 ********************** は、Windows用のフルマネージドなファイルサーバ。Windowsで利用できるユーザクォータ、エンドユーザファイルの復元、Microsoft Active Directory統合などの幅広い機能が利用可能。単一のサブネットにエンドポイントとなるENIを配置し、SMBプロトコルを介してアクセス可能。

Answer: FSx for Windowsファイルサーバ

Source: ../../note/network/aws/_/chapters/storage.md

====================

 ************** は、フルマネージドな分散ファイルシステムで、作成時にS3のバケットと関連付けされる。S3上のファイルをインデックスし、あたかも自前のファイルのように見せる。高速なデータアクセスが必要なハイパフォーマンスコンピューティングで利用され、機械学習やビッグデータ処理に使われる。

Answer: FSx for Lustre

Source: ../../note/network/aws/_/chapters/storage.md

====================

 ****** は、問題を解くための手順のことで、特にコンピュータプログラムについて使われることが多い。適切な ****** を用いると、処理時間（時間計算量）が大幅に短縮できたり、メモリなどの処理に必要となる資源（空間計算量）を削減できたりする。 ****** を学ぶことで、良いプログラムを作ることができるようになる。

Answer: アルゴリズム

Source: ../../note/programming/_/chapters/algorithm.md

====================

 *** は、真であると証明したい命題を偽であると仮定し、その矛盾を導くことによって、命題が偽であるという仮定が誤り（=命題が真）であることを論理付ける方法。

Answer: 背理法

Source: ../../note/programming/_/chapters/algorithm.md

====================

 *** は、あり得るすべてのパターンをしらみつぶしに調べるアルゴリズム。最もシンプルなアルゴリズムのひとつで、問題を考える際にはまず *** をしても現実的な時間で実行が終わるのかどうかを検討することが大切。

Answer: 全探索

Source: ../../note/programming/_/chapters/algorithm.md

====================

 ****** は、ビット演算を利用することで全探索を行う方法。 ****** では、部分集合を全パターン列挙することができるため、組み合わせを全探索する際のテクニックとして使える。

Answer: ビット全探索

Source: ../../note/programming/_/chapters/algorithm.md

====================

 **** は、配列から検索したい値を見つけ出すためのアルゴリズムのひとつで、全ての要素を順番に検索したい値と比較する。

Answer: 線形探索

Source: ../../note/programming/_/chapters/algorithm.md

====================

 **** は、昇順あるいは降順に並べられた配列から検索したい値を見つけ出すためのアルゴリズムのひとつで、中央の要素と検索したい値との大小比較を行い、検索したい値が中央の要素よりも前にあるか後ろにあるかを判断しながら絞り込んでいく。ソートされていない配列や、大小関係の定義されていない要素には使用できない。

Answer: 二分探索

Source: ../../note/programming/_/chapters/algorithm.md

====================

 ******* は、ソフトウェア開発において、よくある失敗のパターン。このようなパターンに当てはまるプログラムは解析や改修が難しく、プロジェクトが失敗する可能性が高まってしまう。

Answer: アンチパターン

Source: ../../note/programming/_/chapters/anti_patterns.md

====================

 ********* （ハードコード）は、プログラミングのアンチパターンの一種で、ソースコード中に直接的に値を書き込む形でデータを挿入することを指す。 ********* が多用されたプログラムは可読性や保守性が低下し、バグを生み出しやすくなる。

Answer: ハードコーディング

Source: ../../note/programming/_/chapters/anti_patterns.md

====================

ハードコーディング（ ****** ）は、プログラミングのアンチパターンの一種で、ソースコード中に直接的に値を書き込む形でデータを挿入することを指す。ハードコーディングが多用されたプログラムは可読性や保守性が低下し、バグを生み出しやすくなる。

Answer: ハードコード

Source: ../../note/programming/_/chapters/anti_patterns.md

====================

 ******** は、プログラミングにおいて、ソースコード中にハードコーディングされた数値。その意味や意図が記述した本人以外には自明ではないため、可読性や保守性の低下を招くものとして、原則避けるべきとされている。

Answer: マジックナンバー

Source: ../../note/programming/_/chapters/anti_patterns.md

====================

 ****** は、GUIソフトウェアやWebシステムのプログラミングにおけるアンチパターンの一種で、表示関連のソースコード中に表示以外のロジックが実装されている構造を指す。特に、複雑なロジックが表示関連のコードに紛れ込んでいると、デザイン変更により機能に不具合が発生するなど、保守性の低下を招く。

Answer: スマートUI

Source: ../../note/programming/_/chapters/anti_patterns.md

====================

 ****** （到達不能コード）は、プログラミングにおけるアンチパターンの一種で、どのような条件であっても決して実行されることのないコード。 ****** はコードの可読性を低下させ、将来的な仕様変更により実行されてしまったときにバグとなる可能性が高い。

Answer: デッドコード

Source: ../../note/programming/_/chapters/anti_patterns.md

====================

デッドコード（ ******* ）は、プログラミングにおけるアンチパターンの一種で、どのような条件であっても決して実行されることのないコード。デッドコードはコードの可読性を低下させ、将来的な仕様変更により実行されてしまったときにバグとなる可能性が高い。

Answer: 到達不能コード

Source: ../../note/programming/_/chapters/anti_patterns.md

