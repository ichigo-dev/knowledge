====================

 **** は、HTTPにおける、スキーム、ホスト名、ポートの組み合わせ。クライアントはこれら全てが一致した場合のみ同一 **** であると判定する。Cookieやローカルストレージは、 **** ごとにアクセス権限を分離している。

Answer: オリジン

Source: ../../note/network/_/chapters/web.md

====================

 ******* は、Webサーバ上でプログラムを高速に動作させるためのインタフェース。プロセスの起動には時間がかかるため、あらかじめプロセスをいくつかメモリ上に常駐させておき、リクエストがあった際にはそのプロセスを利用してプログラムを実行する。

Answer: FastCGI

Source: ../../note/network/_/chapters/web.md

====================

 *** (Amazon Elastic MapReduce)は、Apache HadoopやApache Sparkなどのオープンソースソフトウェアを利用した、ビッグデータの分析が可能なAWSのサービス。マスタノード、コアノード、タスクノードから構成される分散処理基盤からなり、マスタノードによってジョブを振り分け、コアノードとタスクノードでジョブを実行する。コアノードは、データを保持するHDFS(Hadoop Distributed File System)という領域を持つ。

Answer: EMR

Source: ../../note/network/aws/_/chapters/analytics.md

====================

EMR( ************************ )は、Apache HadoopやApache Sparkなどのオープンソースソフトウェアを利用した、ビッグデータの分析が可能なAWSのサービス。マスタノード、コアノード、タスクノードから構成される分散処理基盤からなり、マスタノードによってジョブを振り分け、コアノードとタスクノードでジョブを実行する。コアノードは、データを保持するHDFS(Hadoop Distributed File System)という領域を持つ。

Answer: Amazon Elastic MapReduce

Source: ../../note/network/aws/_/chapters/analytics.md

====================

EMR(Amazon Elastic MapReduce)は、Apache HadoopやApache Sparkなどのオープンソースソフトウェアを利用した、ビッグデータの分析が可能なAWSのサービス。マスタノード、コアノード、タスクノードから構成される分散処理基盤からなり、マスタノードによってジョブを振り分け、コアノードとタスクノードでジョブを実行する。コアノードは、データを保持する **** (Hadoop Distributed File System)という領域を持つ。

Answer: HDFS

Source: ../../note/network/aws/_/chapters/analytics.md

====================

 ************** は、AWSが提供するストリーミング処理プラットフォーム。センサやログなどのデータを、リアルタイム/準リアルタイムで処理するData StreamsとData Firehose、動画を処理するVideo Streams、収集したデータを可視化・分析するData Analyticsといった機能がある。

Answer: Amazon Kinesis

Source: ../../note/network/aws/_/chapters/analytics.md

====================

 ***************** は、データ処理やデータ移動を支援するサービス。パイプラインを設定すると、オンプレミスやAWS上の特定の場所に定期的にアクセスし、必要に応じてデータを変換してS3、RDS、DynamoDBなどのAWSの各種サービスに転送することができる。

Answer: AWS Data Pipeline

Source: ../../note/network/aws/_/chapters/analytics.md

====================

 ******** は、データレイクやデータウェアハウスとセットで使われることが多い、サーバレス型のELTツール。ビッグデータの解析などに使われることが多く、S3のデータを管理してRedshiftなどに変換して格納するといった用途によく利用される。

データソースのデータを探索するクローラ機能と、それをメタデータとして管理するデータカタログ機能がある。また、データの変換はジョブという単位で管理され、変換処理はPythonやSparkによって自分で実装することができる。

Answer: AWS Glue

Source: ../../note/network/aws/_/chapters/analytics.md

====================

 ** (Amazon Messaging Queue)は、AWSの代表的なメッセージングキューイングサービス。システム間でデータをやり取りする際に、一時的にデータを溜め込む仕組みを提供することで、システムの非同期化をサポートする。Apache Active ** およびRabbit ** とよばれる、オープンソースのメッセージキューイングソフトをベースに構築されている。 ** のスループットは、インスタンスタイプによって異なる。

Answer: MQ

Source: ../../note/network/aws/_/chapters/application_integration.md

====================

MQ( ********************** )は、AWSの代表的なメッセージングキューイングサービス。システム間でデータをやり取りする際に、一時的にデータを溜め込む仕組みを提供することで、システムの非同期化をサポートする。Apache ActiveMQおよびRabbitMQとよばれる、オープンソースのメッセージキューイングソフトをベースに構築されている。MQのスループットは、インスタンスタイプによって異なる。

Answer: Amazon Messaging Queue

Source: ../../note/network/aws/_/chapters/application_integration.md

====================

 *** (Amazon Simple Queue Service)は、AWSが独自に開発したメッセージキューイングサービス。シンプルなAPIを実行することでデータをため込んでおくことができ、DynamoDBなどの他のAWSのサービスとの連携が容易であるという利点がある。 *** はAWSによって自動的にスケーリングされるため、ほぼ無制限のスループットが提供される。

Answer: SQS

Source: ../../note/network/aws/_/chapters/application_integration.md

====================

SQS( *************************** )は、AWSが独自に開発したメッセージキューイングサービス。シンプルなAPIを実行することでデータをため込んでおくことができ、DynamoDBなどの他のAWSのサービスとの連携が容易であるという利点がある。SQSはAWSによって自動的にスケーリングされるため、ほぼ無制限のスループットが提供される。

Answer: Amazon Simple Queue Service

Source: ../../note/network/aws/_/chapters/application_integration.md

====================

 *** (Amazon Simple Notification Service)は、サーバレスな通知システムの構築を可能にするサービス。ユーザやアプリケーションの何らかのアクションをトリガーに、Lambdaの起動やメッセージ通知、SMSなどによるモバイル通知が行える。

Answer: SNS

Source: ../../note/network/aws/_/chapters/application_integration.md

====================

SNS( ********************************** )は、サーバレスな通知システムの構築を可能にするサービス。ユーザやアプリケーションの何らかのアクションをトリガーに、Lambdaの起動やメッセージ通知、SMSなどによるモバイル通知が行える。

Answer: Amazon Simple Notification Service

Source: ../../note/network/aws/_/chapters/application_integration.md

====================

 *** (Amazon Simple Email Service)は、独自ドメインも利用可能な、AWSのメール配信サービス。他のAWSサービスとの連携も容易。

Answer: SES

Source: ../../note/network/aws/_/chapters/application_integration.md

====================

SES( *************************** )は、独自ドメインも利用可能な、AWSのメール配信サービス。他のAWSサービスとの連携も容易。

Answer: Amazon Simple Email Service

Source: ../../note/network/aws/_/chapters/application_integration.md

====================

 *** (Amazon Web Service)は、Amazonが提供するクラウドコンピューティングサービスで、インターネットを介して、サーバやストレージ、データベース、ソフトウェアなどを利用することができる。従来のオンプレミスよりも低いコストでサービスを運用できたり、障害への対策や負荷分散が手軽に行えるといった利点がある。

クラウドコンピューティングサービスの役割は、コンピュータや通信機器を設置することに特化したデータセンタのハードウェア資源を、インターネットを介してユーザに提供することである。 *** は単一のデータセンタではなく、複数の地域にまたがったデータセンタから構成されている。

Answer: AWS

Source: ../../note/network/aws/_/chapters/aws.md

====================

 ***** は、AWSのデータセンタが設置されている地域。AWSは世界各国に多数の ***** を保有している。各地域の ***** は相互に高速回線で接続されている。

Answer: リージョン

Source: ../../note/network/aws/_/chapters/aws.md

====================

 ** （アベイラビリティゾーン、ゾーン）は、1つのリージョン内で物理的に切り離された、冗長的な設備を備えたデータセンタ。1つのリージョン内には必ず複数の ** が用意されており、自然災害などでひとつの ** が機能停止に陥ったとしても、他の ** を利用しているサービスは引き続き運用することができる。

Answer: AZ

Source: ../../note/network/aws/_/chapters/aws.md

====================

AZ（ *********** 、ゾーン）は、1つのリージョン内で物理的に切り離された、冗長的な設備を備えたデータセンタ。1つのリージョン内には必ず複数のAZが用意されており、自然災害などでひとつのAZが機能停止に陥ったとしても、他のAZを利用しているサービスは引き続き運用することができる。

Answer: アベイラビリティゾーン

Source: ../../note/network/aws/_/chapters/aws.md

====================

AZ（アベイラビリティ *** 、 *** ）は、1つのリージョン内で物理的に切り離された、冗長的な設備を備えたデータセンタ。1つのリージョン内には必ず複数のAZが用意されており、自然災害などでひとつのAZが機能停止に陥ったとしても、他のAZを利用しているサービスは引き続き運用することができる。

Answer: ゾーン

Source: ../../note/network/aws/_/chapters/aws.md

====================

 ***** は、システムのインフラを構築する際に、同じ役割を持ったサーバを複数のAZに用意することで冗長化する手法。 ***** 構成を意識することで、高い耐障害性や可用性を実現できる。

Answer: マルチAZ

Source: ../../note/network/aws/_/chapters/aws.md

====================

 *** (Amazon Elastic Compute Cloud)は、仮想サーバを提供するコンピューティングサービス。AMIを元にして容易に新しいコンピュータを構築することができ、インスタンスという単位でサーバが管理される。インスタンスには起動中(Running)、停止中(Stopped)、削除済み(Terminated)の3つの状態がある。

 *** は従量課金型のサービスで、インスタンスタイプやリージョンと、インスタンスがRunning状態だった時間でコストが決まる。

Answer: EC2

Source: ../../note/network/aws/_/chapters/computing.md

====================

EC2( **************************** )は、仮想サーバを提供するコンピューティングサービス。AMIを元にして容易に新しいコンピュータを構築することができ、インスタンスという単位でサーバが管理される。インスタンスには起動中(Running)、停止中(Stopped)、削除済み(Terminated)の3つの状態がある。

EC2は従量課金型のサービスで、インスタンスタイプやリージョンと、インスタンスがRunning状態だった時間でコストが決まる。

Answer: Amazon Elastic Compute Cloud

Source: ../../note/network/aws/_/chapters/computing.md

====================

EC2(Amazon Elastic Compute Cloud)は、仮想サーバを提供するコンピューティングサービス。AMIを元にして容易に新しいコンピュータを構築することができ、 ****** という単位でサーバが管理される。 ****** には起動中(Running)、停止中(Stopped)、削除済み(Terminated)の3つの状態がある。

EC2は従量課金型のサービスで、 ****** タイプやリージョンと、 ****** がRunning状態だった時間でコストが決まる。

Answer: インスタンス

Source: ../../note/network/aws/_/chapters/computing.md

====================

EC2(Amazon Elastic Compute Cloud)は、仮想サーバを提供するコンピューティングサービス。AMIを元にして容易に新しいコンピュータを構築することができ、インスタンスという単位でサーバが管理される。インスタンスには起動中( ******* )、停止中(Stopped)、削除済み(Terminated)の3つの状態がある。

EC2は従量課金型のサービスで、インスタンスタイプやリージョンと、インスタンスが ******* 状態だった時間でコストが決まる。

Answer: Running

Source: ../../note/network/aws/_/chapters/computing.md

====================

EC2(Amazon Elastic Compute Cloud)は、仮想サーバを提供するコンピューティングサービス。AMIを元にして容易に新しいコンピュータを構築することができ、インスタンスという単位でサーバが管理される。インスタンスには起動中(Running)、停止中( ******* )、削除済み(Terminated)の3つの状態がある。

EC2は従量課金型のサービスで、インスタンスタイプやリージョンと、インスタンスがRunning状態だった時間でコストが決まる。

Answer: Stopped

Source: ../../note/network/aws/_/chapters/computing.md

====================

EC2(Amazon Elastic Compute Cloud)は、仮想サーバを提供するコンピューティングサービス。AMIを元にして容易に新しいコンピュータを構築することができ、インスタンスという単位でサーバが管理される。インスタンスには起動中(Running)、停止中(Stopped)、削除済み( ********** )の3つの状態がある。

EC2は従量課金型のサービスで、インスタンスタイプやリージョンと、インスタンスがRunning状態だった時間でコストが決まる。

Answer: Terminated

Source: ../../note/network/aws/_/chapters/computing.md

====================

EC2(Amazon Elastic Compute Cloud)は、仮想サーバを提供するコンピューティングサービス。AMIを元にして容易に新しいコンピュータを構築することができ、インスタンスという単位でサーバが管理される。インスタンスには起動中(Running)、停止中(Stopped)、削除済み(Terminated)の3つの状態がある。

EC2は ***** のサービスで、インスタンスタイプやリージョンと、インスタンスがRunning状態だった時間でコストが決まる。

Answer: 従量課金型

Source: ../../note/network/aws/_/chapters/computing.md

====================

 *** (Amazon Machine Image)は、EC2インスタンスの構築に必要な情報を集めたテンプレート。

Answer: AMI

Source: ../../note/network/aws/_/chapters/computing.md

====================

AMI( ******************** )は、EC2インスタンスの構築に必要な情報を集めたテンプレート。

Answer: Amazon Machine Image

Source: ../../note/network/aws/_/chapters/computing.md

====================

 ********* は、EC2インスタンスの性能を決定するもので、様々なユースケースに対応したCPUやメモリ、ストレージ、ネットワークキャパシティの組み合わせが用意されている。

インスタンスが何に最適化されているかを表すインスタンスファミリー、そのインスタンスの世代、 medium や xlarge といったインスタンスサイズの組み合わせで表現される。

Answer: インスタンスタイプ

Source: ../../note/network/aws/_/chapters/computing.md

====================

インスタンスタイプは、EC2インスタンスの性能を決定するもので、様々なユースケースに対応したCPUやメモリ、ストレージ、ネットワークキャパシティの組み合わせが用意されている。

インスタンスが何に最適化されているかを表すインスタンスファミリー、そのインスタンスの ** 、 medium や xlarge といったインスタンスサイズの組み合わせで表現される。

Answer: 世代

Source: ../../note/network/aws/_/chapters/computing.md

====================

インスタンスタイプは、EC2インスタンスの性能を決定するもので、様々なユースケースに対応したCPUやメモリ、ストレージ、ネットワークキャパシティの組み合わせが用意されている。

インスタンスが何に最適化されているかを表すインスタンスファミリー、そのインスタンスの世代、 medium や xlarge といった ********* の組み合わせで表現される。

Answer: インスタンスサイズ

Source: ../../note/network/aws/_/chapters/computing.md

====================

 *********** は、そのインスタンスが何に最適化されたインスタンスであるかという分類を表し、インスタンスタイプの先頭に付与される。

| 種類                     | 特徴                                     | ファミリー       | |--------------------------|------------------------------------------|------------------| | 汎用                     | バランスの取れた汎用タイプで、比較的安価 | T/M/A/Mac      | | コンピューティング最適化 | 高い計算能力                             | C              | | メモリ最適化             | メモリを多く搭載                         | R/X/z          | | 高速コンピューティング   | グラフィック演算や推論処理などに最適化   | P/DL/G/F/V/Inf | | ストレージ最適化         | I/Oパフォーマンスが高く、大容量          | I/D/H          |

Answer: インスタンスファミリー

Source: ../../note/network/aws/_/chapters/computing.md

====================

 ********** は、AWSが余らせているEC2リソースを入札形式で安く利用する形式。ただし、他の利用者からの利用リクエストが増えて余剰なリソースがなくなってしまうと、自動的にインスタンスが中断される。開発用や学習用に相性のよいオプションといえる。

Answer: スポットインスタンス

Source: ../../note/network/aws/_/chapters/computing.md

====================

 *********** は、長期間利用することを約束することで割引を受けられるオプション。インスタンスタイプを固定してしまうことになるので、サービスのリリース後、安定してきてから購入することを検討するのがよい。

Answer: リザーブドインスタンス

Source: ../../note/network/aws/_/chapters/computing.md

====================

 *********** は、通常のネットワーク帯域とは別に、EBS用の帯域を確保するEC2インスタンスのオプション。EBSはAWSのディスク機能であり、ディスクIOが頻繁なシステムではこのオプションを有効にすることで帯域が足りなくなることを防げる。

Answer: EBS最適化オプション

Source: ../../note/network/aws/_/chapters/computing.md

====================

 ************ は、システムの利用状況に応じて自動的にELBに紐づくインスタンスの台数を増減させる（スケールアウト/スケールイン）機能。インスタンスの最小・最大台数を設定しておき、障害発生などによってインスタンスがヘルスチェックに失敗した場合に、自動的にインスタンス数をキープする。

Answer: Auto Scaling

Source: ../../note/network/aws/_/chapters/computing.md

====================

 ********** は、Auto Scalingによる自動スケーリングを行う際の方針。 ********** には、動的なスケーリング、予測スケーリング、スケジュールスケーリングなどがあり、動的なスケーリングのポリシーは更に以下のように分けられる。

• 簡易スケーリング : 「CPU使用率が70%を超えたらスケールアウトする」といったように、1つのメトリクスに対して1つの閾値を設定してスケーリングを行う。
• ステップスケーリング : 1つのメトリクスに対して複数の閾値を設定することで、段階的にスケーリングの設定を行う。
• ターゲット追跡スケーリング : 1つのメトリクスに目標値を設定しておき、そのメトリクスを維持できるように動的にスケーリングする。

Answer: スケーリングポリシー

Source: ../../note/network/aws/_/chapters/computing.md

====================

スケーリングポリシーは、Auto Scalingによる自動スケーリングを行う際の方針。スケーリングポリシーには、動的なスケーリング、予測スケーリング、スケジュールスケーリングなどがあり、動的なスケーリングのポリシーは更に以下のように分けられる。

•  ********  : 「CPU使用率が70%を超えたらスケールアウトする」といったように、1つのメトリクスに対して1つの閾値を設定してスケーリングを行う。
• ステップスケーリング : 1つのメトリクスに対して複数の閾値を設定することで、段階的にスケーリングの設定を行う。
• ターゲット追跡スケーリング : 1つのメトリクスに目標値を設定しておき、そのメトリクスを維持できるように動的にスケーリングする。

Answer: 簡易スケーリング

Source: ../../note/network/aws/_/chapters/computing.md

====================

スケーリングポリシーは、Auto Scalingによる自動スケーリングを行う際の方針。スケーリングポリシーには、動的なスケーリング、予測スケーリング、スケジュールスケーリングなどがあり、動的なスケーリングのポリシーは更に以下のように分けられる。

• 簡易スケーリング : 「CPU使用率が70%を超えたらスケールアウトする」といったように、1つのメトリクスに対して1つの閾値を設定してスケーリングを行う。
•  **********  : 1つのメトリクスに対して複数の閾値を設定することで、段階的にスケーリングの設定を行う。
• ターゲット追跡スケーリング : 1つのメトリクスに目標値を設定しておき、そのメトリクスを維持できるように動的にスケーリングする。

Answer: ステップスケーリング

Source: ../../note/network/aws/_/chapters/computing.md

====================

スケーリングポリシーは、Auto Scalingによる自動スケーリングを行う際の方針。スケーリングポリシーには、動的なスケーリング、予測スケーリング、スケジュールスケーリングなどがあり、動的なスケーリングのポリシーは更に以下のように分けられる。

• 簡易スケーリング : 「CPU使用率が70%を超えたらスケールアウトする」といったように、1つのメトリクスに対して1つの閾値を設定してスケーリングを行う。
• ステップスケーリング : 1つのメトリクスに対して複数の閾値を設定することで、段階的にスケーリングの設定を行う。
•  *************  : 1つのメトリクスに目標値を設定しておき、そのメトリクスを維持できるように動的にスケーリングする。

Answer: ターゲット追跡スケーリング

Source: ../../note/network/aws/_/chapters/computing.md

====================

 **** は、Auto Scalingのスケールアウト中にヘルスチェックを停止する機能。スケールアウトによる新しいインスタンスの起動中に、別の新たなインスタンスが起動されてしまうことを防ぐための仕組み。

Answer: 猶予期間

Source: ../../note/network/aws/_/chapters/computing.md

====================

 ******* は、新しいインスタンスがサービスを開始してからトラフィックを受信できるまでの期間を設定しておき、その期間中に別のスケーリングポリシーが適用される場合は2つのポリシーの差分のみが起動されるようにする機能。

ステップスケーリングにおいて、1つ目のスケーリングポリシーによってインスタンスが起動している途中で2つ目のスケーリングポリシーによって更にインスタンスが追加されるということが考えられる。例えば、1つ目のスケーリングポリシーでインスタンスが1台、2つ目のスケーリングポリシーでインスタンスが4台増える設定の場合、これらのポリシーが連続で適用された場合には5台のインスタンスが起動される。しかし、最新の負荷状況を考えると、2つ目のポリシーのみを適用して4台のインスタンスを起動したい。これを防ぐために、 ******* の機能を利用する。

Answer: ウォームアップ

Source: ../../note/network/aws/_/chapters/computing.md

====================

 ****** は、インスタンスの起動指示直後に待ち時間を設けることで、複数のアラートがきても次々にインスタンスが立ち上がることを防ぐ機能。

Auto Scalingにより新しいインスタンスが起動された直後、ブートストラップなどの処理によって準備が整うまでに数分かかる場合があり、準備が整うまでの間に新しいアラートがくると連鎖的に複数のインスタンスが起動されてしまう。これを防ぐために、 ****** の機能を利用する。

Answer: クールダウン

Source: ../../note/network/aws/_/chapters/computing.md

====================

 ********** は、Auto Scalingによるインスタンスの起動・削除時に、インスタンスを一時停止してカスタムアクションを実行する機能。インスタンスの削除時のログやデータの退避などに利用される。

Answer: ライフサイクルフック

Source: ../../note/network/aws/_/chapters/computing.md

====================

 ****** は、負荷が下がったときにインスタンスを減らす（スケールイン）設定。

Answer: 終了ポリシー

Source: ../../note/network/aws/_/chapters/computing.md

====================

 *** (Amazon Elastic Container Service)は、Dockerコンテナ環境を提供するサービス。EC2にDockerソフトウェアの導入作業や継続したメンテナンス作業などを加えたもので、その管理をAWSがサポートしてくれる。

EC2インスタンス上で実行されるコンテナのことをTaskと呼び、EC2インスタンスのことをClusterと呼ぶ。1つのCluster上では複数のTaskを実行することができる。Cluster上で動作するTaskの定義はTask Definitionで行う。Serviceは1つ以上の同じTaskをまとめたもので、ELBによって負荷分散をする際には、EC2の代わりにServiceを指定する。

また、セキュリティ面では、TaskごとにIAMロールを割り当てられるという特徴がある。EC2ではインスタンス単位でしか設定できない。

Answer: ECS

Source: ../../note/network/aws/_/chapters/computing.md

====================

ECS( ******************************** )は、Dockerコンテナ環境を提供するサービス。EC2にDockerソフトウェアの導入作業や継続したメンテナンス作業などを加えたもので、その管理をAWSがサポートしてくれる。

EC2インスタンス上で実行されるコンテナのことをTaskと呼び、EC2インスタンスのことをClusterと呼ぶ。1つのCluster上では複数のTaskを実行することができる。Cluster上で動作するTaskの定義はTask Definitionで行う。Serviceは1つ以上の同じTaskをまとめたもので、ELBによって負荷分散をする際には、EC2の代わりにServiceを指定する。

また、セキュリティ面では、TaskごとにIAMロールを割り当てられるという特徴がある。EC2ではインスタンス単位でしか設定できない。

Answer: Amazon Elastic Container Service

Source: ../../note/network/aws/_/chapters/computing.md

====================

ECS(Amazon Elastic Container Service)は、Dockerコンテナ環境を提供するサービス。EC2にDockerソフトウェアの導入作業や継続したメンテナンス作業などを加えたもので、その管理をAWSがサポートしてくれる。

EC2インスタンス上で実行されるコンテナのことを **** と呼び、EC2インスタンスのことをClusterと呼ぶ。1つのCluster上では複数の **** を実行することができる。Cluster上で動作する **** の定義は ****  Definitionで行う。Serviceは1つ以上の同じ **** をまとめたもので、ELBによって負荷分散をする際には、EC2の代わりにServiceを指定する。

また、セキュリティ面では、 **** ごとにIAMロールを割り当てられるという特徴がある。EC2ではインスタンス単位でしか設定できない。

Answer: Task

Source: ../../note/network/aws/_/chapters/computing.md

====================

ECS(Amazon Elastic Container Service)は、Dockerコンテナ環境を提供するサービス。EC2にDockerソフトウェアの導入作業や継続したメンテナンス作業などを加えたもので、その管理をAWSがサポートしてくれる。

EC2インスタンス上で実行されるコンテナのことをTaskと呼び、EC2インスタンスのことを ******* と呼ぶ。1つの ******* 上では複数のTaskを実行することができる。 ******* 上で動作するTaskの定義はTask Definitionで行う。Serviceは1つ以上の同じTaskをまとめたもので、ELBによって負荷分散をする際には、EC2の代わりにServiceを指定する。

また、セキュリティ面では、TaskごとにIAMロールを割り当てられるという特徴がある。EC2ではインスタンス単位でしか設定できない。

Answer: Cluster

Source: ../../note/network/aws/_/chapters/computing.md

====================

ECS(Amazon Elastic Container Service)は、Dockerコンテナ環境を提供するサービス。EC2にDockerソフトウェアの導入作業や継続したメンテナンス作業などを加えたもので、その管理をAWSがサポートしてくれる。

EC2インスタンス上で実行されるコンテナのことをTaskと呼び、EC2インスタンスのことをClusterと呼ぶ。1つのCluster上では複数のTaskを実行することができる。Cluster上で動作するTaskの定義は *************** で行う。Serviceは1つ以上の同じTaskをまとめたもので、ELBによって負荷分散をする際には、EC2の代わりにServiceを指定する。

また、セキュリティ面では、TaskごとにIAMロールを割り当てられるという特徴がある。EC2ではインスタンス単位でしか設定できない。

Answer: Task Definition

Source: ../../note/network/aws/_/chapters/computing.md

====================

ECS(Amazon Elastic Container  ******* )は、Dockerコンテナ環境を提供するサービス。EC2にDockerソフトウェアの導入作業や継続したメンテナンス作業などを加えたもので、その管理をAWSがサポートしてくれる。

EC2インスタンス上で実行されるコンテナのことをTaskと呼び、EC2インスタンスのことをClusterと呼ぶ。1つのCluster上では複数のTaskを実行することができる。Cluster上で動作するTaskの定義はTask Definitionで行う。 ******* は1つ以上の同じTaskをまとめたもので、ELBによって負荷分散をする際には、EC2の代わりに ******* を指定する。

また、セキュリティ面では、TaskごとにIAMロールを割り当てられるという特徴がある。EC2ではインスタンス単位でしか設定できない。

Answer: Service

Source: ../../note/network/aws/_/chapters/computing.md

====================

 ********** は、サーバをプロビジョニングしなくてもプログラムを実行できるコンピューティングサービスで、サーバレスアーキテクチャの中核を担う。利用者はソースコードだけを用意すればすぐにプログラムが実行できる。LambdaはNode.jsやPython、Java、Ruby、C#、Go、Powershellといった多数の言語に対応している。

LambdaはLambda関数という単位で、実行するプログラムとその実行トリガーとなるイベントを事前に定義する。Lambda関数を実行することを、キックという。

Answer: AWS Lambda

Source: ../../note/network/aws/_/chapters/computing.md

====================

AWS Lambdaは、サーバをプロビジョニングしなくてもプログラムを実行できるコンピューティングサービスで、サーバレスアーキテクチャの中核を担う。利用者はソースコードだけを用意すればすぐにプログラムが実行できる。LambdaはNode.jsやPython、Java、Ruby、C#、Go、Powershellといった多数の言語に対応している。

Lambdaは ******** という単位で、実行するプログラムとその実行トリガーとなるイベントを事前に定義する。 ******** を実行することを、キックという。

Answer: Lambda関数

Source: ../../note/network/aws/_/chapters/computing.md

====================

AWS Lambdaは、サーバをプロビジョニングしなくてもプログラムを実行できるコンピューティングサービスで、サーバレスアーキテクチャの中核を担う。利用者はソースコードだけを用意すればすぐにプログラムが実行できる。LambdaはNode.jsやPython、Java、Ruby、C#、Go、Powershellといった多数の言語に対応している。

LambdaはLambda関数という単位で、実行するプログラムとその実行トリガーとなるイベントを事前に定義する。Lambda関数を実行することを、 *** という。

Answer: キック

Source: ../../note/network/aws/_/chapters/computing.md

====================

 ***************** は、一般的なアプリケーションのインフラストラクチャに必要なAWS機能を自動的に構成して提供するサービス。アプリケーションの運用に必要な環境の作成からデプロイを容易に行えるため、ネットワークやインフラの知識に乏しい開発チームでも利用しやすい。

Answer: Elastic Beanstalk

Source: ../../note/network/aws/_/chapters/computing.md

====================

 *** (Amazon Relational Database Service)は、AWSが提供するマネージドRDBサービス。データベースエンジンは、AuroraやMySQL、MariaDB、PostgreSQL、Oracle、Microsoft SQL Serverなどから選択できる。 *** のデータ保存用ストレージには、EBSを利用する。

Answer: RDS

Source: ../../note/network/aws/_/chapters/database.md

====================

RDS( ********************************** )は、AWSが提供するマネージドRDBサービス。データベースエンジンは、AuroraやMySQL、MariaDB、PostgreSQL、Oracle、Microsoft SQL Serverなどから選択できる。RDSのデータ保存用ストレージには、EBSを利用する。

Answer: Amazon Relational Database Service

Source: ../../note/network/aws/_/chapters/database.md

====================

 ************* は、AWSが開発したデータベースエンジンで、RDSの利用時に選択することができる。DBインスタンスを作成すると同時にDBクラスタが作成される。DBクラスタは、1つ以上のDBインスタンスと、各DBインスタンスから参照するデータストレージ（クラスタボリューム）で構成される。クラスタボリュームは単一のリージョン内の3つのAZにそれぞれ2つのデータコピーで構成され、各ストレージ間のデータは自動的に同期される。

Auroraレプリカは通常のリードレプリカと違い、Auroraのプライマリインスタンスに障害が発生した場合にレプリカインスタンスがプライマリインスタンスに昇格することでフェールオーバを実現する。

Answer: Amazon Aurora

Source: ../../note/network/aws/_/chapters/database.md

====================

Amazon Auroraは、AWSが開発したデータベースエンジンで、RDSの利用時に選択することができる。DBインスタンスを作成すると同時にDBクラスタが作成される。DBクラスタは、1つ以上のDBインスタンスと、各DBインスタンスから参照するデータストレージ（クラスタボリューム）で構成される。クラスタボリュームは単一のリージョン内の3つのAZにそれぞれ2つのデータコピーで構成され、各ストレージ間のデータは自動的に同期される。

 ********** は通常のリードレプリカと違い、Auroraのプライマリインスタンスに障害が発生した場合にレプリカインスタンスがプライマリインスタンスに昇格することでフェールオーバを実現する。

Answer: Auroraレプリカ

Source: ../../note/network/aws/_/chapters/database.md

====================

 ******* は、通常のRDSとは別に参照専用のDBインスタンスを作成するサービス。マスタDBの負荷を抑えたり、読み込みが多いアプリケーションにおけるDBリソースのスケールアウトを容易に実現することが可能となる。

マスタと ******* のデータ同期は非同期レプリケーション方式であるため、参照されるタイミングによってはマスタ側で更新された情報が反映されていない可能性があることに注意が必要。

Answer: リードレプリカ

Source: ../../note/network/aws/_/chapters/database.md

====================

リードレプリカは、通常のRDSとは別に参照専用のDBインスタンスを作成するサービス。マスタDBの負荷を抑えたり、読み込みが多いアプリケーションにおけるDBリソースのスケールアウトを容易に実現することが可能となる。

マスタとリードレプリカのデータ同期は ************* であるため、参照されるタイミングによってはマスタ側で更新された情報が反映されていない可能性があることに注意が必要。

Answer: 非同期レプリケーション方式

Source: ../../note/network/aws/_/chapters/database.md

====================

 ******** は、バックアップウィンドウと保持期間を指定することで、1日1回自動的にバックアップ（DBスナップショット）を取得してくれるサービス。

手動スナップショットは、任意のタイミングでRDBのバックアップを取得できるサービス。

データのリストアは、スナップショットから新規のRDSを作成することで簡単に実現できる。

ポイントインタイムリカバリは、 ******** のスナップショットを利用して、任意のタイミングの状態のRDSを新規に作成することができるサービス。

Answer: 自動バックアップ

Source: ../../note/network/aws/_/chapters/database.md

====================

自動バックアップは、バックアップウィンドウと保持期間を指定することで、1日1回自動的にバックアップ（DBスナップショット）を取得してくれるサービス。

 ********** は、任意のタイミングでRDBのバックアップを取得できるサービス。

データのリストアは、スナップショットから新規のRDSを作成することで簡単に実現できる。

ポイントインタイムリカバリは、自動バックアップのスナップショットを利用して、任意のタイミングの状態のRDSを新規に作成することができるサービス。

Answer: 手動スナップショット

Source: ../../note/network/aws/_/chapters/database.md

====================

自動バックアップは、バックアップウィンドウと保持期間を指定することで、1日1回自動的にバックアップ（DBスナップショット）を取得してくれるサービス。

手動スナップショットは、任意のタイミングでRDBのバックアップを取得できるサービス。

データの **** は、スナップショットから新規のRDSを作成することで簡単に実現できる。

ポイントインタイムリカバリは、自動バックアップのスナップショットを利用して、任意のタイミングの状態のRDSを新規に作成することができるサービス。

Answer: リストア

Source: ../../note/network/aws/_/chapters/database.md

====================

自動バックアップは、バックアップウィンドウと保持期間を指定することで、1日1回自動的にバックアップ（DBスナップショット）を取得してくれるサービス。

手動スナップショットは、任意のタイミングでRDBのバックアップを取得できるサービス。

データのリストアは、スナップショットから新規のRDSを作成することで簡単に実現できる。

 ************* は、自動バックアップのスナップショットを利用して、任意のタイミングの状態のRDSを新規に作成することができるサービス。

Answer: ポイントインタイムリカバリ

Source: ../../note/network/aws/_/chapters/database.md

====================

RDSはVPCに対応しているため、インターネットに接続せずともVPC内のサービスから利用できる。セキュリティグループによる通信要件の制限も可能で、EC2やほかのAWSサービスからRDSまでの通信もデータベースエンジンが提供するSSLを使った暗号化に対応している。

また、RDSの ******** を有効にすることで、データが保存されるストレージやスナップショット、ログなどのRDSに関連するすべてのデータが暗号化された状態で保持される。

Answer: 暗号化オプション

Source: ../../note/network/aws/_/chapters/database.md

====================

 *************** は、AWSが提供するKey-Value型のマネージドNoSQLデータベースサービス。テーブルやインデックスを作成する際に、読み取り・書き込みに必要なスループットを指定してリソースを確保することで、安定した性能を担保する仕組み。トランザクション機能にも対応している。

以下のようなシステムに適している。

• 高い信頼性と拡張性を必要とするシステム
• スループットが増減するようなピーク帯のあるシステム
• 大量のデータを蓄積して高速な検索が可能なシステム
• 広告やゲームなどのユーザの行動履歴を管理するシステム
• Webアプリケーションの永続的セッションデータベース

Answer: Amazon DynamoDB

Source: ../../note/network/aws/_/chapters/database.md

====================

 ****************** (RCU)は、読み取りのスループットキャパシティを指定する指標。1RCUは、最大4KBの項目に対して、1秒当たり1回の強力な整合性のある読み取り性能、あるいは1秒当たり2回の結果的に整合性のある読み取り性能を担保することを示す。

Write Capacity Unit(WCU)は、書き込みのスループットキャパシティを指定する指標。1WCUは、最大1KBの項目に対して、1秒当たり1回の書き込み性能を担保することを示す。

DynamoDBでは、負荷の状況に応じてスループットキャパシティを自動的に増減することができる。急激なスループットの上昇に即座に対応できるわけではないため、事前にスパイクが発生することがわかっている場合は手動でキャパシティを拡張して対応する。

Answer: Read Capacity Unit

Source: ../../note/network/aws/_/chapters/database.md

====================

Read Capacity Unit( *** )は、読み取りのスループットキャパシティを指定する指標。1 *** は、最大4KBの項目に対して、1秒当たり1回の強力な整合性のある読み取り性能、あるいは1秒当たり2回の結果的に整合性のある読み取り性能を担保することを示す。

Write Capacity Unit(WCU)は、書き込みのスループットキャパシティを指定する指標。1WCUは、最大1KBの項目に対して、1秒当たり1回の書き込み性能を担保することを示す。

DynamoDBでは、負荷の状況に応じてスループットキャパシティを自動的に増減することができる。急激なスループットの上昇に即座に対応できるわけではないため、事前にスパイクが発生することがわかっている場合は手動でキャパシティを拡張して対応する。

Answer: RCU

Source: ../../note/network/aws/_/chapters/database.md

====================

Read Capacity Unit(RCU)は、読み取りのスループットキャパシティを指定する指標。1RCUは、最大4KBの項目に対して、1秒当たり1回の強力な整合性のある読み取り性能、あるいは1秒当たり2回の結果的に整合性のある読み取り性能を担保することを示す。

 ******************* (WCU)は、書き込みのスループットキャパシティを指定する指標。1WCUは、最大1KBの項目に対して、1秒当たり1回の書き込み性能を担保することを示す。

DynamoDBでは、負荷の状況に応じてスループットキャパシティを自動的に増減することができる。急激なスループットの上昇に即座に対応できるわけではないため、事前にスパイクが発生することがわかっている場合は手動でキャパシティを拡張して対応する。

Answer: Write Capacity Unit

Source: ../../note/network/aws/_/chapters/database.md

====================

Read Capacity Unit(RCU)は、読み取りのスループットキャパシティを指定する指標。1RCUは、最大4KBの項目に対して、1秒当たり1回の強力な整合性のある読み取り性能、あるいは1秒当たり2回の結果的に整合性のある読み取り性能を担保することを示す。

Write Capacity Unit( *** )は、書き込みのスループットキャパシティを指定する指標。1 *** は、最大1KBの項目に対して、1秒当たり1回の書き込み性能を担保することを示す。

DynamoDBでは、負荷の状況に応じてスループットキャパシティを自動的に増減することができる。急激なスループットの上昇に即座に対応できるわけではないため、事前にスパイクが発生することがわかっている場合は手動でキャパシティを拡張して対応する。

Answer: WCU

Source: ../../note/network/aws/_/chapters/database.md

====================

DynamoDBはデータを ******* という単位で分散保存する。1つの ******* に保存できる容量やスループットキャパシティが決まっているため、データの増加や指定したスループットのサイズによって最適化された状態を保つように自動的に ******* を拡張する。

Answer: パーティション

Source: ../../note/network/aws/_/chapters/database.md

====================

 **************** は、DynamoDBに対して行われた直近24時間の追加・更新・削除の変更履歴を保持する機能。

Answer: DynamoDB Streams

Source: ../../note/network/aws/_/chapters/database.md

====================

 *************** は、DynamoDBのオプションで、有効にすると参照のリクエストがあった時点よりも前に書き込まれているデータがすべて反映された状態のデータをもとに参照結果を返す。RCUが2倍消費される点には注意が必要。

Answer: Consistent Read

Source: ../../note/network/aws/_/chapters/database.md

====================

 ******************** (DAX)は、DynamoDBの前段にキャッシュクラスタを構成する拡張サービス。

Answer: DynamoDB Accelerator

Source: ../../note/network/aws/_/chapters/database.md

====================

DynamoDB Accelerator( *** )は、DynamoDBの前段にキャッシュクラスタを構成する拡張サービス。

Answer: DAX

Source: ../../note/network/aws/_/chapters/database.md

====================

 ****************** は、AWSが提供するインメモリ型データベースサービス。高頻度で参照するデータや検索に時間がかかるデータセットをメモリ上に保持することでパフォーマンスを向上させる。

Answer: Amazon ElastiCache

Source: ../../note/network/aws/_/chapters/database.md

====================

 ********* は、KVS（Key-Valueストア）型インメモリデータベースのデファクトスタンダードとして広く利用されているエンジン。データの永続性機能はないため、メンテナンスや障害による再起動時にすべてのデータが消去される。

Answer: Memcached

Source: ../../note/network/aws/_/chapters/database.md

====================

 ***** は、KVS型インメモリデータベースで、Memcachedよりも多くのデータが扱え、キャッシュ用としてだけではなくメッセージブローカーやキューを構成する要素としても利用される。ノード間のレプリケーション機能やデータ永続性機能といった可用性も考慮された機能が実装されている。

Answer: Redis

Source: ../../note/network/aws/_/chapters/database.md

====================

 *************** は、AWSが提供するデータウェアハウス（データの分析に最適化されたソフトウェア）向けのデータベースサービス。大量のデータから意思決定に役立つ情報を見つけ出すために必要な環境を安価で準備できる。

Redshiftは、複数ノードによる分散並列実行が大きな特徴として挙げられる。1つのRedshiftを構成する複数のノードのまとまりをRedshiftクラスタと呼び、クラスタは1つのリーダノードと複数のコンピュートノードから構成される。いかにコンピュートノードをまたがずに処理を完結させることができるのかがRedshift利用のポイントとなる。

リーダノードでは、SQLクライアントやBI(Business Intelligence)ツールからの実行クエリを受け付けて、クエリの解析や実行プランの作成を行う。

コンピュートノードでは、リーダノードからの実行クエリを処理する。各コンピュートノードはストレージとセットになっている。

ノードスライスは、Redshiftが分散並列処理をする最小の単位で、コンピュートノードの中でさらにリソースを分割してスライスという単位を構成する。

Answer: Amazon Redshift

Source: ../../note/network/aws/_/chapters/database.md

====================

Amazon Redshiftは、AWSが提供するデータウェアハウス（データの分析に最適化されたソフトウェア）向けのデータベースサービス。大量のデータから意思決定に役立つ情報を見つけ出すために必要な環境を安価で準備できる。

Redshiftは、複数ノードによる分散並列実行が大きな特徴として挙げられる。1つのRedshiftを構成する複数のノードのまとまりをRedshiftクラスタと呼び、クラスタは1つの ****** と複数のコンピュートノードから構成される。いかにコンピュートノードをまたがずに処理を完結させることができるのかがRedshift利用のポイントとなる。

 ****** では、SQLクライアントやBI(Business Intelligence)ツールからの実行クエリを受け付けて、クエリの解析や実行プランの作成を行う。

コンピュートノードでは、 ****** からの実行クエリを処理する。各コンピュートノードはストレージとセットになっている。

ノードスライスは、Redshiftが分散並列処理をする最小の単位で、コンピュートノードの中でさらにリソースを分割してスライスという単位を構成する。

Answer: リーダノード

Source: ../../note/network/aws/_/chapters/database.md

====================

Amazon Redshiftは、AWSが提供するデータウェアハウス（データの分析に最適化されたソフトウェア）向けのデータベースサービス。大量のデータから意思決定に役立つ情報を見つけ出すために必要な環境を安価で準備できる。

Redshiftは、複数ノードによる分散並列実行が大きな特徴として挙げられる。1つのRedshiftを構成する複数のノードのまとまりをRedshiftクラスタと呼び、クラスタは1つのリーダノードと複数の ********* から構成される。いかに ********* をまたがずに処理を完結させることができるのかがRedshift利用のポイントとなる。

リーダノードでは、SQLクライアントやBI(Business Intelligence)ツールからの実行クエリを受け付けて、クエリの解析や実行プランの作成を行う。

 ********* では、リーダノードからの実行クエリを処理する。各 ********* はストレージとセットになっている。

ノードスライスは、Redshiftが分散並列処理をする最小の単位で、 ********* の中でさらにリソースを分割してスライスという単位を構成する。

Answer: コンピュートノード

Source: ../../note/network/aws/_/chapters/database.md

====================

Amazon Redshiftは、AWSが提供するデータウェアハウス（データの分析に最適化されたソフトウェア）向けのデータベースサービス。大量のデータから意思決定に役立つ情報を見つけ出すために必要な環境を安価で準備できる。

Redshiftは、複数ノードによる分散並列実行が大きな特徴として挙げられる。1つのRedshiftを構成する複数のノードのまとまりをRedshiftクラスタと呼び、クラスタは1つのリーダノードと複数のコンピュートノードから構成される。いかにコンピュートノードをまたがずに処理を完結させることができるのかがRedshift利用のポイントとなる。

リーダノードでは、SQLクライアントやBI(Business Intelligence)ツールからの実行クエリを受け付けて、クエリの解析や実行プランの作成を行う。

コンピュートノードでは、リーダノードからの実行クエリを処理する。各コンピュートノードはストレージとセットになっている。

 ******* は、Redshiftが分散並列処理をする最小の単位で、コンピュートノードの中でさらにリソースを分割してスライスという単位を構成する。

Answer: ノードスライス

Source: ../../note/network/aws/_/chapters/database.md

====================

 ***************** は、S3に置かれたデータを外部テーブルとして定義できるようにし、Redshift内にデータを取り込むことなくクエリの実行を可能にする拡張サービス。

Answer: Redshift Spectrum

Source: ../../note/network/aws/_/chapters/database.md

====================

 ********** は、Gitリポジトリを提供するマネージドサービス。IAMユーザを利用して権限管理を行うことができたり、他のAWSサービスとシームレスに連携できたり、プルリクエスト機能があるといった特徴がある。

Answer: CodeCommit

Source: ../../note/network/aws/_/chapters/developer_tool.md

====================

 ********* は、ソースコードのコンパイル/ビルド環境を提供するマネージドサービス。ビルドの定義はbuildspec.ymlに記載する。

ビルド環境のランタイムとして、JavaやPHP、Python、Ruby、Node.jsなどを標準でサポートしており、個人で用意したDockerイメージを利用することもできる。

また、料金が従量課金型である点もひとつの特徴である。

Answer: CodeBuild

Source: ../../note/network/aws/_/chapters/developer_tool.md

====================

 ********** は、ビルド済みのモジュール（アーティファクト）をサーバへデプロイする工程を自動化するサービス。また、新しいモジュールに不具合が見つかったという場合に備えて、ロールバックの機能もある。

デプロイの定義はappspec.ymlに定義する。また、デプロイ方式についても任意に決定することができる。

Answer: CodeDeploy

Source: ../../note/network/aws/_/chapters/developer_tool.md

====================

 ************ は、ソースコードが変更されてから検証環境にデプロイするまでの流れを自動化するサービス。また、リリースの承認プロセスをパイプラインの途中に挟むことも可能で、チーム開発の権限管理にも対応している。

Answer: CodePipeline

Source: ../../note/network/aws/_/chapters/developer_tool.md

====================

 ***************** は、運用監視を支援するマネージドサービスであり、システムの安定運用をサポートする。各AWSリソースの状態（メトリクス）を定期的に取得し、既定値を超えた場合にアラートを送信することができる。AWSがあらかじめ定義している標準メトリクスと、利用者が独自に定義することができるカスタムメトリクスを使用できる。

Answer: Amazon CloudWatch

Source: ../../note/network/aws/_/chapters/management_and_governance.md

====================

 *************** は、アプリケーションログやApacheログなどのログをモニタリングするサービス。エージェントを介してログを収集し、アラームを設定することもできる。

Answer: CloudWatch Logs

Source: ../../note/network/aws/_/chapters/management_and_governance.md

====================

 ************** は、AWSに関する操作ログを自動的に取得するサービス。誰が、いつ、どのような操作をしたか、といった監査ログを残すことができる。

CloudWatch Logsと連携することで、事前に不正な操作を登録しておき、そのような操作が行われたときに通知するように設定することもできる。

Answer: AWS CloudTrail

Source: ../../note/network/aws/_/chapters/management_and_governance.md

====================

 ****** は、マネジメントコンソールへのログインやEC2インスタンスの作成、S3バケットの作成などといったイベント。

Answer: 管理イベント

Source: ../../note/network/aws/_/chapters/management_and_governance.md

====================

 ******* は、S3バケット上のデータの操作、Lambda関数の実行などといったイベント。CloudTrailにおいて、管理イベントの取得はデフォルトで有効であるが、 ******* の取得はデフォルトで無効となっているので注意。

Answer: データイベント

Source: ../../note/network/aws/_/chapters/management_and_governance.md

====================

 *** (Amazon Virtual Private Cloud)は、AWSのネットワーキングサービスの中心であり、プライベートな仮想ネットワークをAWS内に作成することができるサービス。自由なIPアドレスのアサインや、サブネットの作成、ルーティングテーブルやゲートウェイの設定など、仮想ネットワークを完全に制御することができる。

S3やCloudWatch、DynamoDBなど、 *** に入れることができないサービスも多数あるので注意。

ネットワークACLにより、1つ以上のサブネットに出入りするトラフィックを制御するファイアウォールを設定することができる。サブネット単位でインバウンドルールとアウトバウンドルールの許可・拒否設定をすることができる。ステートレスで、1つの通信で受信と送信のそれぞれに対して設定が必要。

Answer: VPC

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

 ********** は、VPC内のリソースに対するトラフィックを制御するファイアウォール機能。EC2やELB、RDSなどのインスタンス単位でインバウンドルールとアウトバウンドルールの許可設定をすることができる。プロトコルやポート範囲、IPアドレス、他の ********** などを指定して通信を制御する。ステーフルで、通信の復路は動的に許可される。

Answer: セキュリティグループ

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

 ********* は、ネットワークやコンピュータに対して外部からアクセスする際の規約。

Answer: インバウンドルール

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

====================

 ********** は、ネットワークや機器から外部に向かって通信する際の規約。

Answer: アウトバウンドルール

Source: ../../note/network/aws/_/chapters/networking_and_content_delivery.md

