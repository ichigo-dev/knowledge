====================

ソケット(Socket)は、ネットワークを介してプロセス間通信を行うためのAPI。ソケットには、TCPやUDPなどのプロトコルに対応した種類がある。

サーバは以下のような手順で通信を行う。

1. socket: 待ち受け用のソケットを作成する
2.  **** : 待ち受けるIPアドレスやポート番号といった情報をソケットに紐づける
3. listen: クライアントからの通信を待ち受ける
4. accept: 接続要求を受け入れ、通信用に新しいソケットを作成する
5. read/write: acceptで作成したソケットを用いて、クライアントとのデータのやり取りを行う

クライアントは以下のような手順で通信を行う。

1. socket: サーバとの通信用のソケットを作成する
2. connect: サーバが待ち受けているIPアドレスのポートに対して接続を試みる
3. read/write: 接続が確立したら、ソケットを介してサーバとのデータのやり取りを行う

Answer: bind

Source: ../../note/computer/linux/_/chapters/process_and_job.md

====================

ソケット(Socket)は、ネットワークを介してプロセス間通信を行うためのAPI。ソケットには、TCPやUDPなどのプロトコルに対応した種類がある。

サーバは以下のような手順で通信を行う。

1. socket: 待ち受け用のソケットを作成する
2. bind: 待ち受けるIPアドレスやポート番号といった情報をソケットに紐づける
3.  ****** : クライアントからの通信を待ち受ける
4. accept: 接続要求を受け入れ、通信用に新しいソケットを作成する
5. read/write: acceptで作成したソケットを用いて、クライアントとのデータのやり取りを行う

クライアントは以下のような手順で通信を行う。

1. socket: サーバとの通信用のソケットを作成する
2. connect: サーバが待ち受けているIPアドレスのポートに対して接続を試みる
3. read/write: 接続が確立したら、ソケットを介してサーバとのデータのやり取りを行う

Answer: listen

Source: ../../note/computer/linux/_/chapters/process_and_job.md

====================

ソケット(Socket)は、ネットワークを介してプロセス間通信を行うためのAPI。ソケットには、TCPやUDPなどのプロトコルに対応した種類がある。

サーバは以下のような手順で通信を行う。

1. socket: 待ち受け用のソケットを作成する
2. bind: 待ち受けるIPアドレスやポート番号といった情報をソケットに紐づける
3. listen: クライアントからの通信を待ち受ける
4.  ****** : 接続要求を受け入れ、通信用に新しいソケットを作成する
5. read/write:  ****** で作成したソケットを用いて、クライアントとのデータのやり取りを行う

クライアントは以下のような手順で通信を行う。

1. socket: サーバとの通信用のソケットを作成する
2. connect: サーバが待ち受けているIPアドレスのポートに対して接続を試みる
3. read/write: 接続が確立したら、ソケットを介してサーバとのデータのやり取りを行う

Answer: accept

Source: ../../note/computer/linux/_/chapters/process_and_job.md

====================

ソケット(Socket)は、ネットワークを介してプロセス間通信を行うためのAPI。ソケットには、TCPやUDPなどのプロトコルに対応した種類がある。

サーバは以下のような手順で通信を行う。

1. socket: 待ち受け用のソケットを作成する
2. bind: 待ち受けるIPアドレスやポート番号といった情報をソケットに紐づける
3. listen: クライアントからの通信を待ち受ける
4. accept: 接続要求を受け入れ、通信用に新しいソケットを作成する
5.  ********** : acceptで作成したソケットを用いて、クライアントとのデータのやり取りを行う

クライアントは以下のような手順で通信を行う。

1. socket: サーバとの通信用のソケットを作成する
2. connect: サーバが待ち受けているIPアドレスのポートに対して接続を試みる
3.  ********** : 接続が確立したら、ソケットを介してサーバとのデータのやり取りを行う

Answer: read/write

Source: ../../note/computer/linux/_/chapters/process_and_job.md

====================

ソケット(Socket)は、ネットワークを介してプロセス間通信を行うためのAPI。ソケットには、TCPやUDPなどのプロトコルに対応した種類がある。

サーバは以下のような手順で通信を行う。

1. socket: 待ち受け用のソケットを作成する
2. bind: 待ち受けるIPアドレスやポート番号といった情報をソケットに紐づける
3. listen: クライアントからの通信を待ち受ける
4. accept: 接続要求を受け入れ、通信用に新しいソケットを作成する
5. read/write: acceptで作成したソケットを用いて、クライアントとのデータのやり取りを行う

クライアントは以下のような手順で通信を行う。

1. socket: サーバとの通信用のソケットを作成する
2.  ******* : サーバが待ち受けているIPアドレスのポートに対して接続を試みる
3. read/write: 接続が確立したら、ソケットを介してサーバとのデータのやり取りを行う

Answer: connect

Source: ../../note/computer/linux/_/chapters/process_and_job.md

====================

 ***** (Shared memory)は、IPCの一種で、複数のプロセスが同じメモリ領域を共有する仕組み。複数のプロセスが同じデータを更新する必要がある場合、 ***** を使用することで高速な処理が可能となる。

 ***** は、システム上に特定の領域をプロセスとは独立して確保しておき、プロセスと ***** を紐づけることで利用できる。 ***** を扱うためのシステムコールは以下の通り。

• shmget:  ***** 領域を作成するためのシステムコール。 ***** のサイズやアクセス権限を指定することができる。
• shmat:  ***** 領域にアタッチするためのシステムコール。 ***** の識別子を指定して、その ***** 領域をプロセスのアドレス空間にマッピングする。
• shmdt:  ***** 領域をデタッチするためのシステムコール。プロセスが ***** が不要になったときに呼び出し、プロセスのアドレス空間から ***** が解放される。

Answer: 共有メモリ

Source: ../../note/computer/linux/_/chapters/process_and_job.md

====================

共有メモリ(Shared memory)は、IPCの一種で、複数のプロセスが同じメモリ領域を共有する仕組み。複数のプロセスが同じデータを更新する必要がある場合、共有メモリを使用することで高速な処理が可能となる。

共有メモリは、システム上に特定の領域をプロセスとは独立して確保しておき、プロセスと共有メモリを紐づけることで利用できる。共有メモリを扱うためのシステムコールは以下の通り。

•  ****** : 共有メモリ領域を作成するためのシステムコール。共有メモリのサイズやアクセス権限を指定することができる。
• shmat: 共有メモリ領域にアタッチするためのシステムコール。共有メモリの識別子を指定して、その共有メモリ領域をプロセスのアドレス空間にマッピングする。
• shmdt: 共有メモリ領域をデタッチするためのシステムコール。プロセスが共有メモリが不要になったときに呼び出し、プロセスのアドレス空間から共有メモリが解放される。

Answer: shmget

Source: ../../note/computer/linux/_/chapters/process_and_job.md

====================

共有メモリ(Shared memory)は、IPCの一種で、複数のプロセスが同じメモリ領域を共有する仕組み。複数のプロセスが同じデータを更新する必要がある場合、共有メモリを使用することで高速な処理が可能となる。

共有メモリは、システム上に特定の領域をプロセスとは独立して確保しておき、プロセスと共有メモリを紐づけることで利用できる。共有メモリを扱うためのシステムコールは以下の通り。

• shmget: 共有メモリ領域を作成するためのシステムコール。共有メモリのサイズやアクセス権限を指定することができる。
•  ***** : 共有メモリ領域にアタッチするためのシステムコール。共有メモリの識別子を指定して、その共有メモリ領域をプロセスのアドレス空間にマッピングする。
• shmdt: 共有メモリ領域をデタッチするためのシステムコール。プロセスが共有メモリが不要になったときに呼び出し、プロセスのアドレス空間から共有メモリが解放される。

Answer: shmat

Source: ../../note/computer/linux/_/chapters/process_and_job.md

====================

共有メモリ(Shared memory)は、IPCの一種で、複数のプロセスが同じメモリ領域を共有する仕組み。複数のプロセスが同じデータを更新する必要がある場合、共有メモリを使用することで高速な処理が可能となる。

共有メモリは、システム上に特定の領域をプロセスとは独立して確保しておき、プロセスと共有メモリを紐づけることで利用できる。共有メモリを扱うためのシステムコールは以下の通り。

• shmget: 共有メモリ領域を作成するためのシステムコール。共有メモリのサイズやアクセス権限を指定することができる。
• shmat: 共有メモリ領域にアタッチするためのシステムコール。共有メモリの識別子を指定して、その共有メモリ領域をプロセスのアドレス空間にマッピングする。
•  ***** : 共有メモリ領域をデタッチするためのシステムコール。プロセスが共有メモリが不要になったときに呼び出し、プロセスのアドレス空間から共有メモリが解放される。

Answer: shmdt

Source: ../../note/computer/linux/_/chapters/process_and_job.md

====================

 ******** (Message Queue)は、IPCの一種で、プロセス間でデータを送受信するための仕組み。 ******** では、キューにデータを送信したり、キューからデータを取り出したりすることができる。

 ******** を用いると、非同期的にデータを送受信することが可能。 ******** を扱うためのシステムコールは以下の通り。

• msgget:  ******** を作成するためのシステムコール。作成された ******** には、一意のキーが割り当てられる。
• msgsnd:  ******** にメッセージを送信するためのシステムコール。送信されるメッセージには、メッセージタイプを指定する必要がある。
• msgrcv:  ******** からメッセージを取り出すためのシステムコール。受信されるメッセージは、指定されたメッセージタイプに一致する場合に受信される。メッセージがない場合は、指定された待ち時間が経過するか、別のプロセスがメッセージを送信するまで待機する。

Answer: メッセージキュー

Source: ../../note/computer/linux/_/chapters/process_and_job.md

====================

メッセージキュー(Message Queue)は、IPCの一種で、プロセス間でデータを送受信するための仕組み。メッセージキューでは、キューにデータを送信したり、キューからデータを取り出したりすることができる。

メッセージキューを用いると、非同期的にデータを送受信することが可能。メッセージキューを扱うためのシステムコールは以下の通り。

•  ****** : メッセージキューを作成するためのシステムコール。作成されたメッセージキューには、一意のキーが割り当てられる。
• msgsnd: メッセージキューにメッセージを送信するためのシステムコール。送信されるメッセージには、メッセージタイプを指定する必要がある。
• msgrcv: メッセージキューからメッセージを取り出すためのシステムコール。受信されるメッセージは、指定されたメッセージタイプに一致する場合に受信される。メッセージがない場合は、指定された待ち時間が経過するか、別のプロセスがメッセージを送信するまで待機する。

Answer: msgget

Source: ../../note/computer/linux/_/chapters/process_and_job.md

====================

メッセージキュー(Message Queue)は、IPCの一種で、プロセス間でデータを送受信するための仕組み。メッセージキューでは、キューにデータを送信したり、キューからデータを取り出したりすることができる。

メッセージキューを用いると、非同期的にデータを送受信することが可能。メッセージキューを扱うためのシステムコールは以下の通り。

• msgget: メッセージキューを作成するためのシステムコール。作成されたメッセージキューには、一意のキーが割り当てられる。
•  ****** : メッセージキューにメッセージを送信するためのシステムコール。送信されるメッセージには、メッセージタイプを指定する必要がある。
• msgrcv: メッセージキューからメッセージを取り出すためのシステムコール。受信されるメッセージは、指定されたメッセージタイプに一致する場合に受信される。メッセージがない場合は、指定された待ち時間が経過するか、別のプロセスがメッセージを送信するまで待機する。

Answer: msgsnd

Source: ../../note/computer/linux/_/chapters/process_and_job.md

====================

メッセージキュー(Message Queue)は、IPCの一種で、プロセス間でデータを送受信するための仕組み。メッセージキューでは、キューにデータを送信したり、キューからデータを取り出したりすることができる。

メッセージキューを用いると、非同期的にデータを送受信することが可能。メッセージキューを扱うためのシステムコールは以下の通り。

• msgget: メッセージキューを作成するためのシステムコール。作成されたメッセージキューには、一意のキーが割り当てられる。
• msgsnd: メッセージキューにメッセージを送信するためのシステムコール。送信されるメッセージには、メッセージタイプを指定する必要がある。
•  ****** : メッセージキューからメッセージを取り出すためのシステムコール。受信されるメッセージは、指定されたメッセージタイプに一致する場合に受信される。メッセージがない場合は、指定された待ち時間が経過するか、別のプロセスがメッセージを送信するまで待機する。

Answer: msgrcv

Source: ../../note/computer/linux/_/chapters/process_and_job.md

====================

 **** (semaphore)は、プロセス間の同期や競合状態を解決するために使用される同期プリミティブ。 **** は、プロセスが特定のリソースにアクセスできるかどうかを制御するために使用される。具体的には、 **** はカウンタ変数とフラグ変数によってプロセスのアクセス制御を行う。

 **** を扱うためのシステムコールは以下の通り。

• semget:  **** を作成するために使用されるシステムコール。 **** を取得する場合にも使用される。
• semop:  **** を操作するために使用されるシステムコール。 **** の値をインクリメントしたり、デクリメントしたりすることができる。
• semctl:  **** の制御を行うためのシステムコール。 **** の値を取得したり、設定したり、削除したりすることができる。

Answer: セマフォ

Source: ../../note/computer/linux/_/chapters/process_and_job.md

====================

セマフォ(semaphore)は、プロセス間の同期や競合状態を解決するために使用される同期プリミティブ。セマフォは、プロセスが特定のリソースにアクセスできるかどうかを制御するために使用される。具体的には、セマフォはカウンタ変数とフラグ変数によってプロセスのアクセス制御を行う。

セマフォを扱うためのシステムコールは以下の通り。

•  ****** : セマフォを作成するために使用されるシステムコール。セマフォを取得する場合にも使用される。
• semop: セマフォを操作するために使用されるシステムコール。セマフォの値をインクリメントしたり、デクリメントしたりすることができる。
• semctl: セマフォの制御を行うためのシステムコール。セマフォの値を取得したり、設定したり、削除したりすることができる。

Answer: semget

Source: ../../note/computer/linux/_/chapters/process_and_job.md

====================

セマフォ(semaphore)は、プロセス間の同期や競合状態を解決するために使用される同期プリミティブ。セマフォは、プロセスが特定のリソースにアクセスできるかどうかを制御するために使用される。具体的には、セマフォはカウンタ変数とフラグ変数によってプロセスのアクセス制御を行う。

セマフォを扱うためのシステムコールは以下の通り。

• semget: セマフォを作成するために使用されるシステムコール。セマフォを取得する場合にも使用される。
•  ***** : セマフォを操作するために使用されるシステムコール。セマフォの値をインクリメントしたり、デクリメントしたりすることができる。
• semctl: セマフォの制御を行うためのシステムコール。セマフォの値を取得したり、設定したり、削除したりすることができる。

Answer: semop

Source: ../../note/computer/linux/_/chapters/process_and_job.md

====================

セマフォ(semaphore)は、プロセス間の同期や競合状態を解決するために使用される同期プリミティブ。セマフォは、プロセスが特定のリソースにアクセスできるかどうかを制御するために使用される。具体的には、セマフォはカウンタ変数とフラグ変数によってプロセスのアクセス制御を行う。

セマフォを扱うためのシステムコールは以下の通り。

• semget: セマフォを作成するために使用されるシステムコール。セマフォを取得する場合にも使用される。
• semop: セマフォを操作するために使用されるシステムコール。セマフォの値をインクリメントしたり、デクリメントしたりすることができる。
•  ****** : セマフォの制御を行うためのシステムコール。セマフォの値を取得したり、設定したり、削除したりすることができる。

Answer: semctl

Source: ../../note/computer/linux/_/chapters/process_and_job.md

====================

 *** は、ユーザとLinuxカーネルの橋渡しをするプログラムで、カーネルの機能をユーザに提供するためのインタフェース。 *** はまず、キーボードに入力されたユーザのコマンドを受け取り、カーネルに対して処理命令を行う。そして、カーネルの処理結果を受け取ってそれを出力する。 *** は、このようなやり取りを繰り返すインタラクティブな操作を提供する。

Linuxカーネルと *** のレイヤを分離することにより、カーネルには手を入れずに *** のみをユースケースに合わせて変更することができたり、別のOSを利用する際に *** のみを移植すれば同様のインタフェースが利用できる、といった利点がある。

Answer: シェル

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

 ******* は、ユーザがログイン時に最初にLinuxによって自動的に起動されるシェル。 ******* は、 SHELL 環境変数に指定されたコマンドで起動されるものとなる。 ******* を変更するには、 chsh コマンドを使用する。

Answer: ログインシェル

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

 ***** は、シェルがユーザの入力を受け付けている状態を示す記号。多くの場合は $ や # で表わされ、さらにログイン中のユーザ名やホスト名、カレントディレクトリなどの付加情報を表示することもできる。 ***** の表示は、シェルの設定によりユーザが任意に変更できる（ PROMPT や RPROMPT といった環境変数）。

Ubuntuのデフォルトの ***** は以下の通り。（ユーザ名が user 、ホスト名が host の場合）

user@host:~$

 ***** 記号の $ は一般ユーザでの操作、 # はスーパユーザでの操作を例示しているドキュメントが多い。

また、長いコマンドなどの途中で \ により改行された際には、セカンダリ ***** が表示される。

Answer: プロンプト

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

プロンプトは、シェルがユーザの入力を受け付けている状態を示す記号。多くの場合は $ や # で表わされ、さらにログイン中のユーザ名やホスト名、カレントディレクトリなどの付加情報を表示することもできる。プロンプトの表示は、シェルの設定によりユーザが任意に変更できる（ PROMPT や RPROMPT といった環境変数）。

Ubuntuのデフォルトのプロンプトは以下の通り。（ユーザ名が user 、ホスト名が host の場合）

user@host:~$

プロンプト記号の $ は一般ユーザでの操作、 # はスーパユーザでの操作を例示しているドキュメントが多い。

また、長いコマンドなどの途中で \ により改行された際には、 ********** が表示される。

Answer: セカンダリプロンプト

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

 ** (Bourne Shell)は、多くのUNIX系OSで標準的に使われているシェルのひとつで、古くからあり多くのシェルが ** との互換性を持っている。

Answer: sh

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

 **** (Bourne-Again Shell)は、GNUで開発されているオープンソースのシェル。sh互換だが様々な機能が追加されており、一時期はmacOSのシェルとしても採用されていた。多くのLinux環境でデフォルトのシェルとして採用されており、利用者が多いため情報を集めやすい。

Answer: bash

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

 *** (Almquist Shell)は、軽量かつ高速なsh互換のシェルで、Debian系のLinuxディストリビューションで利用されている。

Answer: ash

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

 *** (Z Shell)は、他のシェルの便利な機能を持ちつつ独自に進化しているsh互換でオープンソースのシェル。macOSのデフォルトのシェルとしても採用されている。

Answer: zsh

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

 *** (C Shell)は、BSD系のOSで使用されているシェルで、shとは異なり文法がC言語風となっている。

Answer: csh

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

 **** (TENEX C Shell)は、cshを拡張したオープンソースのシェルで、macOSで採用されていたこともあったが、シェルスクリプトの記述には向いていないとされている。

Answer: tcsh

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

 *********** は、キーボードから1文字入力するごとにコマンド履歴を検索する機能。 *********** モード中は、次のようなキーバインドが利用できる。

| キーマップ   | 内容                                               | | ------------ | :------------------------------------------------- | | Ctrl + r | 1つ前の検索結果へ移動                              | | Enter      | 現在の検索結果をそのまま実行                       | | Esc        | 現在の検索結果を表示したまま、コマンドラインに戻る | | Ctrl + g | 検索結果を破棄し、プロンプトに戻る                 |

Answer: インクリメンタルサーチ

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

 ******** は、ユーザがシェルにログインしてからシェルを閉じるまでの一連の流れ。セッションが開始されると、シェルは設定を読み込んでユーザにプロンプトを返し、コマンドを入力できる状態となる。セッションは、ユーザがログアウトするか、システムが再起動されると終了する。

Answer: シェルセッション

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

 ***** （端末）は、ユーザがコンピュータへ入出力する際に利用するハードウェアを指す言葉。入力装置にはキーボード、出力装置にはディスプレイが主に用いられる。

 ***** エミューレタのことを単に ***** と呼ぶ場合もある。

Answer: ターミナル

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

ターミナル（ ** ）は、ユーザがコンピュータへ入出力する際に利用するハードウェアを指す言葉。入力装置にはキーボード、出力装置にはディスプレイが主に用いられる。

ターミナルエミューレタのことを単にターミナルと呼ぶ場合もある。

Answer: 端末

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

 *********** は、ターミナルをソフトウェアによって再現したもの。入出力画面を提供するインタフェースで、シェルは *********** 上で動作する。代表的な *********** としては、WindowsのTeraTermやRLogin、macOSのiTerm2、各環境で動作するAlacrittyなどがある。

遠隔のコンピュータを操作する場合、接続元では *********** が、接続先ではシェルが動作することになる。

Answer: ターミナルエミュレータ

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

 ************ は、1つのターミナルを複数の仮想ターミナルに分割して、同時に複数のターミナルを実行できるようにするツール。特に有名な ************ としては、 tmux がある。リモートアクセスなどによりLinuxを利用する場合、コネクションが切断されたときに前のセッションを復元することができたり、複数のコネクションを張ることなくマルチターミナルで作業ができるといった利点がある。

Answer: ターミナルマルチプレクサ

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

 *** (Teletypewriter)は、物理的な端末デバイスを表す用語で、キーボードと画面からなるターミナルの接続を表すデバイスファイル。

Answer: TTY

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

 *** (Pseudo terminal)は、仮想的な端末デバイスを表す用語で、ターミナルエミュレータやSSHなどのアプリケーションで使用される。PTS(Pseudo terminal slave)と呼ぶ場合もある。

Answer: PTY

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

PTY(Pseudo terminal)は、仮想的な端末デバイスを表す用語で、ターミナルエミュレータやSSHなどのアプリケーションで使用される。 *** (Pseudo terminal slave)と呼ぶ場合もある。

Answer: PTS

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

 ***** は、既存のコマンドに対して別名をつけて実行できるようにする機能。 ***** の設定にはaliasコマンドを使用する。

例えば以下のような ***** を設定すると、 ls コマンドを実行したときに -F オプションが自動で付与されるようになる。

$ alias ls='ls -F'

あるコマンドが、本当にコマンドであるか ***** であるかを確認するには、typeコマンドを使用する。

$ type ls
ls is an alias for ls -F

また、 ***** を削除するにはunaliasコマンドを使用する。

$ unalias ls

commandコマンドを使用したり、コマンドの先頭に \ を付与することで、一時的に ***** を無視して元のコマンドを実行することもできる。

$ command ls
$ \ls

Answer: エイリアス

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

エイリアスは、既存のコマンドに対して別名をつけて実行できるようにする機能。エイリアスの設定には ***** コマンドを使用する。

例えば以下のようなエイリアスを設定すると、 ls コマンドを実行したときに -F オプションが自動で付与されるようになる。

$  *****  ls='ls -F'

あるコマンドが、本当にコマンドであるかエイリアスであるかを確認するには、typeコマンドを使用する。

$ type ls
ls is an  *****  for ls -F

また、エイリアスを削除するにはun ***** コマンドを使用する。

$ un *****  ls

commandコマンドを使用したり、コマンドの先頭に \ を付与することで、一時的にエイリアスを無視して元のコマンドを実行することもできる。

$ command ls
$ \ls

Answer: alias

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

エイリアスは、既存のコマンドに対して別名をつけて実行できるようにする機能。エイリアスの設定にはaliasコマンドを使用する。

例えば以下のようなエイリアスを設定すると、 ls コマンドを実行したときに -F オプションが自動で付与されるようになる。

$ alias ls='ls -F'

あるコマンドが、本当にコマンドであるかエイリアスであるかを確認するには、 **** コマンドを使用する。

$  ****  ls
ls is an alias for ls -F

また、エイリアスを削除するにはunaliasコマンドを使用する。

$ unalias ls

commandコマンドを使用したり、コマンドの先頭に \ を付与することで、一時的にエイリアスを無視して元のコマンドを実行することもできる。

$ command ls
$ \ls

Answer: type

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

エイリアスは、既存のコマンドに対して別名をつけて実行できるようにする機能。エイリアスの設定にはaliasコマンドを使用する。

例えば以下のようなエイリアスを設定すると、 ls コマンドを実行したときに -F オプションが自動で付与されるようになる。

$ alias ls='ls -F'

あるコマンドが、本当にコマンドであるかエイリアスであるかを確認するには、typeコマンドを使用する。

$ type ls
ls is an alias for ls -F

また、エイリアスを削除するには ******* コマンドを使用する。

$  *******  ls

commandコマンドを使用したり、コマンドの先頭に \ を付与することで、一時的にエイリアスを無視して元のコマンドを実行することもできる。

$ command ls
$ \ls

Answer: unalias

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

エイリアスは、既存のコマンドに対して別名をつけて実行できるようにする機能。エイリアスの設定にはaliasコマンドを使用する。

例えば以下のようなエイリアスを設定すると、 ls コマンドを実行したときに -F オプションが自動で付与されるようになる。

$ alias ls='ls -F'

あるコマンドが、本当にコマンドであるかエイリアスであるかを確認するには、typeコマンドを使用する。

$ type ls
ls is an alias for ls -F

また、エイリアスを削除するにはunaliasコマンドを使用する。

$ unalias ls

 ******* コマンドを使用したり、コマンドの先頭に \ を付与することで、一時的にエイリアスを無視して元のコマンドを実行することもできる。

$  *******  ls
$ \ls

Answer: command

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

 **** は、Linuxにおいてシステム全体に影響を与える変数のことで、主にシェルの振る舞いを制御するために使用される。 **** はプロセスが実行されるときにプロセスに渡され、そのプロセスの動作を変更することができる。 **** は以下のような場合に利用される。

• ユーザの設定やシステムの設定を制御する
• プログラムが必要とするパスやライブラリの場所を指定する
• 各ユーザのシェルの動作をカスタマイズする

以下のコマンドを実行すると、 MY_VAR という変数に avlue という値を設定することができる。

$ export MY_VAR=value

また、 **** を確認するには、以下のコマンドを実行する。

$ echo $MY_VAR

 **** の設定はシェルセッションが終了すると消えるので、永続化したい場合はシェルの設定ファイル内などで定義しておくとよい。

Answer: 環境変数

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

 ***** は、シェル内でのみ使用される変数で、そのシェル自体とその子プロセスでのみ使用される。 ***** は環境変数とは異なり、他のプログラムには影響を与えない。

 ***** を設定するには、以下の例のように ***** 名と値を等号で結ぶ。

$ MY_SHELL_VAR=value

Answer: シェル変数

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

 **** は、シェルがコマンドを実行する際に検索するディレクトリのリストを含む環境変数。  ****  には、シェルがコマンドを検索する順序で、コロンで区切られたディレクトリのリストが格納される。

例えば、  ****  が /usr/local/bin:/usr/bin:/bin に設定されている場合、シェルはまず /usr/local/bin を検索し、次に /usr/bin を検索し、最後に /bin を検索する。

 ****  環境変数を修正することで、独自定義のコマンドをどこからでも実行できるようにしたりすることができる。

Answer: PATH

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

 ****** は、指定されたシェルスクリプトを現在のシェルセッションで実行し、そのシェルスクリプト内で定義された変数や関数、設定等を有効にするコマンド。

例えば次のコマンドを実行すると、ホームディレクトリにあるbashの設定ファイルである .bashrc を現在のシェルに読み込む。

$  ******  ~/.bashrc

Answer: source

Source: ../../note/computer/linux/_/chapters/shell_and_terminal.md

====================

 ******** は、OSに対して実行したい一連のコマンドを並べ、まとめて実行できるようにしたファイル、あるいはそれを記述するためのスクリプト言語。シェルでは通常、コマンドの実行と結果の表示を対話的に繰り返すが、 ******** を使用すると、コマンドの打ち間違いを減らしたり、再利用性や再現性を高めることができる。

 ******** は他のプログラミング言語とは書き方や性質が異なる部分が多いので注意する。

 ******** が記述されたファイルは、拡張子を .sh とするのが一般的で、実行権限を付けておく必要がある。

例えば、以下の ******** は、ホームディレクトリの合計ディスク容量を出力する。

Answer: シェルスクリプト

Source: ../../note/computer/linux/_/chapters/shell_script.md

====================

 *** (Shebang)は、シェルスクリプトファイルをどのシェルで実行するかを宣言する部分で、先頭行に記述する。 #! に続けて、 /bin/bash のように使用するシェルのパスを記述する。

例えば、以下のような *** が記述されたシェルスクリプトを実行すると、bashシェルを使用してスクリプトを実行する。

Answer: シバン

Source: ../../note/computer/linux/_/chapters/shell_script.md

====================

 ****** は、指定したファイルを現在のシェルで実行するコマンド。 ./ を用いる場合とは異なり、現在のシェルにそのままコマンドを流し込むかたちとなるので、ファイルにシバンを記述する必要はない。また、ファイル自体に実行権限を付与しなくてもよい。

以下は、 homesize.sh というシェルスクリプトを  ******  を用いてカレントシェルで実行する例。

$  ******  homesize.sh

 ******  コマンドはカレントシェルによりコマンドを実行した場合と同じ動作になるため、カレントシェルの環境の影響を受けたり、実行後にカレントシェルに影響を及ぼすことに注意が必要。

Answer: source

Source: ../../note/computer/linux/_/chapters/shell_script.md

====================

 ****** は、コマンドの結果を文字列として取得する機能。 $() という形式が用いられ、コマンドの出力結果をシェルスクリプト内で利用したい場合に用いられる。

Answer: コマンド置換

Source: ../../note/computer/linux/_/chapters/shell_script.md

====================

 ******* は、シェルスクリプトからコマンドライン引数を扱うためのシェル変数。

例えば、以下のようにシェルスクリプトを実行したとする。

$ ./backup.sh ./src ./src.bak

このとき、シェルスクリプトの中ではこれらの引数を次のように受け取ることができる。

Answer: 位置パラメータ

Source: ../../note/computer/linux/_/chapters/shell_script.md

====================

 **** は、ユーザにプロンプトを返して、コマンドラインからの入力を待ち受ける状態とするコマンド。

Answer: read

Source: ../../note/computer/linux/_/chapters/shell_script.md

====================

 ***** (stdio: standard input/output)は、標準入力、標準出力、標準エラー出力を合わせたもの。OSによって最初に用意される。

Answer: 標準入出力

Source: ../../note/computer/linux/_/chapters/stdio_and_pipeline.md

====================

標準入出力( ***** : standard input/output)は、標準入力、標準出力、標準エラー出力を合わせたもの。OSによって最初に用意される。

Answer: stdio

Source: ../../note/computer/linux/_/chapters/stdio_and_pipeline.md

====================

 **** (stdin: standard input)は、プログラムのデフォルトのデータ入力元。通常はキーボードが使用される。ファイルディスクリプタの $0$ に割り当てられる。

Answer: 標準入力

Source: ../../note/computer/linux/_/chapters/stdio_and_pipeline.md

====================

標準入力( ***** : standard input)は、プログラムのデフォルトのデータ入力元。通常はキーボードが使用される。ファイルディスクリプタの $0$ に割り当てられる。

Answer: stdin

Source: ../../note/computer/linux/_/chapters/stdio_and_pipeline.md

====================

 **** (stdout: standard output)は、プログラムのデフォルトのデータ出力先。通常は端末ディスプレイが使用される。ファイルディスクリプタの $1$ に割り当てられる。

Answer: 標準出力

Source: ../../note/computer/linux/_/chapters/stdio_and_pipeline.md

====================

標準出力( ****** : standard output)は、プログラムのデフォルトのデータ出力先。通常は端末ディスプレイが使用される。ファイルディスクリプタの $1$ に割り当てられる。

Answer: stdout

Source: ../../note/computer/linux/_/chapters/stdio_and_pipeline.md

====================

 ******* (stderr: standard error output)は、プログラムのエラーメッセージを出力するためのデフォルトの出力先。通常は端末ディスプレイが使用される。ファイルディスクリプタの $2$ に割り当てられる。

Answer: 標準エラー出力

Source: ../../note/computer/linux/_/chapters/stdio_and_pipeline.md

====================

標準エラー出力( ****** : standard error output)は、プログラムのエラーメッセージを出力するためのデフォルトの出力先。通常は端末ディスプレイが使用される。ファイルディスクリプタの $2$ に割り当てられる。

Answer: stderr

Source: ../../note/computer/linux/_/chapters/stdio_and_pipeline.md

====================

 ****** は、標準入出力先をデフォルトのものから切り替えるための機能。

標準入力先として、キーボードの代わりにファイルを使用する場合、 < 記号を用いる。以下は、 cat コマンドに test.txt を入力 ****** する例。

$ cat < file.txt

標準出力先として、ターミナルの画面上ではなくファイルを使用する場合、 > 記号を用いる。以下は、 ls コマンドの出力を test.txt に ****** する例。

$ ls > test.txt

標準エラー出力先として、ターミナルの画面上ではなくファイルを使用する場合、 2> 記号を用いる。以下は、 ls コマンドのエラーメッセージ出力を error.txt に ****** する例。

$ ls /xxx 2> error.txt

標準出力と標準エラー出力をまとめて ****** するには、標準出力を ****** した上で、末尾に 2>&1 記号を追加する。以下は、 ls コマンドの出力とエラーメッセージを result.txt に ****** する例。

$ ls /xxx > result.txt 2>&1

出力 ****** を用いてファイルに書き込みを行う場合、元のファイルが上書きされてしまう。上書きを防止して末尾に追記する場合は、 >> 記号を用いる。以下は、 ls コマンドの出力を test.txt に追記する例。

$ ls >> test.txt

 ****** に用いる記号は以下の通り。

| 記号          | 内容                                           | | ------------- | :--------------------------------------------- | | < FILE      | 標準入力を FILE に変更する                   | | > FILE      | 標準出力を FILE に変更する                   | | >> FILE     | 標準出力の出力を FILE の末尾に追記する       | | 2> FILE     | 標準エラー出力を FILE に変更する             | | 2>> FILE    | 標準エラー出力の出力を FILE の末尾に追記する | | > FILE 2>&1 | 標準出力と標準エラー出力を FILE に変更する   |

Answer: リダイレクト

Source: ../../note/computer/linux/_/chapters/stdio_and_pipeline.md

====================

 ******** (/dev/null)は、常に空であるという特別なデバイスファイルで、リダイレクト先としてよく利用される。

 ******** を標準入力の出力先として用いると、書き込んだデータはすべて破棄される。

Answer: nullデバイス

Source: ../../note/computer/linux/_/chapters/stdio_and_pipeline.md

====================

 ****** は、複数のコマンドを連携させるための仕組みで、コマンドの標準出力を別のコマンドの標準入力に接続することができる。

以下は、 ls コマンドの出力を less コマンドに入力する例。

$ ls -la | less

また、 ****** は3つ以上のコマンドをつなげることもできる。以下は、 ls コマンドの出力を cat に入力して cat で行番号を付け、 less に入力する例。

$ ls -la | cat -n | less

Answer: パイプライン

Source: ../../note/computer/linux/_/chapters/stdio_and_pipeline.md

====================

 **** は、標準入力を入力として受け取り標準出力に出力するコマンドの総称。代表的な **** コマンドとしては、 cat や head 、 tail などがある。

Answer: フィルタ

Source: ../../note/computer/linux/_/chapters/stdio_and_pipeline.md

====================

 ** は、Linuxに標準で搭載されているテキストエディタのひとつ。 ** はコマンドラインから実行され、ターミナル上で動作する。 ** には高度な機能が多く搭載されており、モードを切り替えながら操作を行う。

 ** では全ての操作がキーボードで行われ、GUIコンピュータに慣れたユーザにとっては扱いにくい場合もある。

Answer: vi

Source: ../../note/computer/linux/_/chapters/text_editor.md

====================

 *** は、Linuxの中でも非常に一般的なテキストエディタで、viを拡張したもの。 *** は標準で多くの機能を持っており、拡張性も高いため多数のプラグインが存在する。

以下のコマンドを実行することで、 *** を起動することができる。

$ vim

 *** には次のようなモードがある。

ノーマルモードは、 *** 上でコマンドを入力するモードで、 *** エディタを起動したときのデフォルトのモード。テキストファイルを編集するための各種コマンドを実行することができる。テキストの移動やコピー、貼り付け、削除、検索などのコマンドがある。ノーマルモードでの基本的な操作方法は以下の通り。

| キー                  | 概要                                                                 | | --------------------- | :------------------------------------------------------------------- | | :                   | コマンドラインモードに移行する                                       | | k j h l       | カーソルを上下左右にひとつ移動する                                   | | i                   | カーソルの後方からインサートモードに移行する                         | | a                   | カーソルの前方からインサートモードに移行する                         | | I                   | カーソルを行頭に移動してインサートモードに移行する                   | | A                   | カーソルを行末に移動してインサートモードに移行する                   | | o                   | カーソルのある行の下に新しい行を追加してインサートモードに移行する   | | O                   | カーソルのある行の上に新しい行を追加してインサートモードに移行する   | | v                   | ビジュアルモードに移行する                                           | | Ctrl + v            | セレクションモードに移行する                                         | | gg                  | 最初の行に移動する                                                   | | G                   | 最後の行に移動する                                                   | | w                   | 次の単語の先頭に移動する                                             | | W                   | 次の単語の末尾に移動する                                             | | b                   | 前の単語の先頭に移動する                                             | | B                   | 前の単語の末尾に移動する                                             | | f + (文字)          | カーソルの後方の文字を行内検索し、見つかった場所に移動する           | | F + (文字)          | カーソルの前方の文字を行内検索し、見つかった場所に移動する           | | 0 ^               | 行頭に移動する（ 0 はインデントを無視する）                        | | $                   | 行末に移動する                                                       | | Ctrl + u Ctrl + d | 半画面スクロールアップ、スクロールダウンする                         | | Ctrl + b Ctrl + f | 全画面スクロールアップ、スクロールダウンする                         | | / + (検索パターン)  | 順方向にファイル内検索する（ n で次の候補、 N 出前の候補に移動） | | u                   | Undo（直前の変更を取り消す）                                         | | Ctrl + r            | Redo（直前の変更の取り消しを戻す）                                   | | >>                  | インデントを追加する                                                 | | >>                  | インデントを削除する                                                 | | r + (文字)          | カーソルの下の文字を置換する                                         | | x                   | カーソルの下の文字を削除する                                         | | dd                  | カーソルのある行を削除する                                           | | y                   | カーソルの下の文字をヤンク（コピー）                                 | | yy                  | カーソルのある行をヤンク（コピー）                                   | | p                   | クリップボードの中身をペースト                                       |

インサートモードは、テキストを入力するモード。ノーマルモードからインサートモードに移行するには、 i キーか a キーを入力する。インサートモードからノーマルモードに復帰するには、 Esc キーを入力する。

ビジュアルモードは、テキストを選択するモード。ノーマルモードからビジュアルモードに移行するには、 v キーを入力する。ビジュアルモードでは、テキストを選択して、コピーや削除、置換などの操作を実行することができる。ビジュアルモードからノーマルモードに復帰するには、 Esc キーを入力する。

セレクションモード（矩形選択モード）は、テキストの矩形選択を行うモード。ノーマルモードからセレクションモードに移行するには、 Ctrl + v キーを入力する。セレクションモードでは、テキストの矩形領域を選択して、コピーや削除、置換などの操作を実行することができる。セレクションモードからノーマルモードに復帰するには、 Esc キーを入力する。

コマンドラインモードは、ファイルの保存や終了、設定変更などのコマンドを入力するモード。ノーマルモードからコマンドラインモードに移行するには、 : キーを入力する。コマンドを入力して実行するには、 Enter キーを入力する。コマンド実行後は自動でノーマルモードに移行する。基本的なコマンドは以下の通り。

| コマンド           | 概要                          | | ------------------ | :---------------------------- | | w                | 内容を保存                    | | q                |  *** を終了する                 | | q!               |  *** を強制終了する             | | wq               | 内容を保存して、 *** を終了する | | e + (ファイル名) | ファイルを開く                | | nohlsearch       | 検索ハイライトを解除する      | | set number       | 行数表示を有効にする          |

Answer: Vim

Source: ../../note/computer/linux/_/chapters/text_editor.md

====================

Vimは、Linuxの中でも非常に一般的なテキストエディタで、viを拡張したもの。Vimは標準で多くの機能を持っており、拡張性も高いため多数のプラグインが存在する。

以下のコマンドを実行することで、Vimを起動することができる。

$ vim

Vimには次のようなモードがある。

 ******* は、Vim上でコマンドを入力するモードで、Vimエディタを起動したときのデフォルトのモード。テキストファイルを編集するための各種コマンドを実行することができる。テキストの移動やコピー、貼り付け、削除、検索などのコマンドがある。 ******* での基本的な操作方法は以下の通り。

| キー                  | 概要                                                                 | | --------------------- | :------------------------------------------------------------------- | | :                   | コマンドラインモードに移行する                                       | | k j h l       | カーソルを上下左右にひとつ移動する                                   | | i                   | カーソルの後方からインサートモードに移行する                         | | a                   | カーソルの前方からインサートモードに移行する                         | | I                   | カーソルを行頭に移動してインサートモードに移行する                   | | A                   | カーソルを行末に移動してインサートモードに移行する                   | | o                   | カーソルのある行の下に新しい行を追加してインサートモードに移行する   | | O                   | カーソルのある行の上に新しい行を追加してインサートモードに移行する   | | v                   | ビジュアルモードに移行する                                           | | Ctrl + v            | セレクションモードに移行する                                         | | gg                  | 最初の行に移動する                                                   | | G                   | 最後の行に移動する                                                   | | w                   | 次の単語の先頭に移動する                                             | | W                   | 次の単語の末尾に移動する                                             | | b                   | 前の単語の先頭に移動する                                             | | B                   | 前の単語の末尾に移動する                                             | | f + (文字)          | カーソルの後方の文字を行内検索し、見つかった場所に移動する           | | F + (文字)          | カーソルの前方の文字を行内検索し、見つかった場所に移動する           | | 0 ^               | 行頭に移動する（ 0 はインデントを無視する）                        | | $                   | 行末に移動する                                                       | | Ctrl + u Ctrl + d | 半画面スクロールアップ、スクロールダウンする                         | | Ctrl + b Ctrl + f | 全画面スクロールアップ、スクロールダウンする                         | | / + (検索パターン)  | 順方向にファイル内検索する（ n で次の候補、 N 出前の候補に移動） | | u                   | Undo（直前の変更を取り消す）                                         | | Ctrl + r            | Redo（直前の変更の取り消しを戻す）                                   | | >>                  | インデントを追加する                                                 | | >>                  | インデントを削除する                                                 | | r + (文字)          | カーソルの下の文字を置換する                                         | | x                   | カーソルの下の文字を削除する                                         | | dd                  | カーソルのある行を削除する                                           | | y                   | カーソルの下の文字をヤンク（コピー）                                 | | yy                  | カーソルのある行をヤンク（コピー）                                   | | p                   | クリップボードの中身をペースト                                       |

インサートモードは、テキストを入力するモード。 ******* からインサートモードに移行するには、 i キーか a キーを入力する。インサートモードから ******* に復帰するには、 Esc キーを入力する。

ビジュアルモードは、テキストを選択するモード。 ******* からビジュアルモードに移行するには、 v キーを入力する。ビジュアルモードでは、テキストを選択して、コピーや削除、置換などの操作を実行することができる。ビジュアルモードから ******* に復帰するには、 Esc キーを入力する。

セレクションモード（矩形選択モード）は、テキストの矩形選択を行うモード。 ******* からセレクションモードに移行するには、 Ctrl + v キーを入力する。セレクションモードでは、テキストの矩形領域を選択して、コピーや削除、置換などの操作を実行することができる。セレクションモードから ******* に復帰するには、 Esc キーを入力する。

コマンドラインモードは、ファイルの保存や終了、設定変更などのコマンドを入力するモード。 ******* からコマンドラインモードに移行するには、 : キーを入力する。コマンドを入力して実行するには、 Enter キーを入力する。コマンド実行後は自動で ******* に移行する。基本的なコマンドは以下の通り。

| コマンド           | 概要                          | | ------------------ | :---------------------------- | | w                | 内容を保存                    | | q                | Vimを終了する                 | | q!               | Vimを強制終了する             | | wq               | 内容を保存して、Vimを終了する | | e + (ファイル名) | ファイルを開く                | | nohlsearch       | 検索ハイライトを解除する      | | set number       | 行数表示を有効にする          |

Answer: ノーマルモード

Source: ../../note/computer/linux/_/chapters/text_editor.md

====================

Vimは、Linuxの中でも非常に一般的なテキストエディタで、viを拡張したもの。Vimは標準で多くの機能を持っており、拡張性も高いため多数のプラグインが存在する。

以下のコマンドを実行することで、Vimを起動することができる。

$ vim

Vimには次のようなモードがある。

ノーマルモードは、Vim上でコマンドを入力するモードで、Vimエディタを起動したときのデフォルトのモード。テキストファイルを編集するための各種コマンドを実行することができる。テキストの移動やコピー、貼り付け、削除、検索などのコマンドがある。ノーマルモードでの基本的な操作方法は以下の通り。

| キー                  | 概要                                                                 | | --------------------- | :------------------------------------------------------------------- | | :                   | コマンドラインモードに移行する                                       | | k j h l       | カーソルを上下左右にひとつ移動する                                   | | i                   | カーソルの後方から ******** に移行する                         | | a                   | カーソルの前方から ******** に移行する                         | | I                   | カーソルを行頭に移動して ******** に移行する                   | | A                   | カーソルを行末に移動して ******** に移行する                   | | o                   | カーソルのある行の下に新しい行を追加して ******** に移行する   | | O                   | カーソルのある行の上に新しい行を追加して ******** に移行する   | | v                   | ビジュアルモードに移行する                                           | | Ctrl + v            | セレクションモードに移行する                                         | | gg                  | 最初の行に移動する                                                   | | G                   | 最後の行に移動する                                                   | | w                   | 次の単語の先頭に移動する                                             | | W                   | 次の単語の末尾に移動する                                             | | b                   | 前の単語の先頭に移動する                                             | | B                   | 前の単語の末尾に移動する                                             | | f + (文字)          | カーソルの後方の文字を行内検索し、見つかった場所に移動する           | | F + (文字)          | カーソルの前方の文字を行内検索し、見つかった場所に移動する           | | 0 ^               | 行頭に移動する（ 0 はインデントを無視する）                        | | $                   | 行末に移動する                                                       | | Ctrl + u Ctrl + d | 半画面スクロールアップ、スクロールダウンする                         | | Ctrl + b Ctrl + f | 全画面スクロールアップ、スクロールダウンする                         | | / + (検索パターン)  | 順方向にファイル内検索する（ n で次の候補、 N 出前の候補に移動） | | u                   | Undo（直前の変更を取り消す）                                         | | Ctrl + r            | Redo（直前の変更の取り消しを戻す）                                   | | >>                  | インデントを追加する                                                 | | >>                  | インデントを削除する                                                 | | r + (文字)          | カーソルの下の文字を置換する                                         | | x                   | カーソルの下の文字を削除する                                         | | dd                  | カーソルのある行を削除する                                           | | y                   | カーソルの下の文字をヤンク（コピー）                                 | | yy                  | カーソルのある行をヤンク（コピー）                                   | | p                   | クリップボードの中身をペースト                                       |

 ******** は、テキストを入力するモード。ノーマルモードから ******** に移行するには、 i キーか a キーを入力する。 ******** からノーマルモードに復帰するには、 Esc キーを入力する。

ビジュアルモードは、テキストを選択するモード。ノーマルモードからビジュアルモードに移行するには、 v キーを入力する。ビジュアルモードでは、テキストを選択して、コピーや削除、置換などの操作を実行することができる。ビジュアルモードからノーマルモードに復帰するには、 Esc キーを入力する。

セレクションモード（矩形選択モード）は、テキストの矩形選択を行うモード。ノーマルモードからセレクションモードに移行するには、 Ctrl + v キーを入力する。セレクションモードでは、テキストの矩形領域を選択して、コピーや削除、置換などの操作を実行することができる。セレクションモードからノーマルモードに復帰するには、 Esc キーを入力する。

コマンドラインモードは、ファイルの保存や終了、設定変更などのコマンドを入力するモード。ノーマルモードからコマンドラインモードに移行するには、 : キーを入力する。コマンドを入力して実行するには、 Enter キーを入力する。コマンド実行後は自動でノーマルモードに移行する。基本的なコマンドは以下の通り。

| コマンド           | 概要                          | | ------------------ | :---------------------------- | | w                | 内容を保存                    | | q                | Vimを終了する                 | | q!               | Vimを強制終了する             | | wq               | 内容を保存して、Vimを終了する | | e + (ファイル名) | ファイルを開く                | | nohlsearch       | 検索ハイライトを解除する      | | set number       | 行数表示を有効にする          |

Answer: インサートモード

Source: ../../note/computer/linux/_/chapters/text_editor.md

====================

Vimは、Linuxの中でも非常に一般的なテキストエディタで、viを拡張したもの。Vimは標準で多くの機能を持っており、拡張性も高いため多数のプラグインが存在する。

以下のコマンドを実行することで、Vimを起動することができる。

$ vim

Vimには次のようなモードがある。

ノーマルモードは、Vim上でコマンドを入力するモードで、Vimエディタを起動したときのデフォルトのモード。テキストファイルを編集するための各種コマンドを実行することができる。テキストの移動やコピー、貼り付け、削除、検索などのコマンドがある。ノーマルモードでの基本的な操作方法は以下の通り。

| キー                  | 概要                                                                 | | --------------------- | :------------------------------------------------------------------- | | :                   | コマンドラインモードに移行する                                       | | k j h l       | カーソルを上下左右にひとつ移動する                                   | | i                   | カーソルの後方からインサートモードに移行する                         | | a                   | カーソルの前方からインサートモードに移行する                         | | I                   | カーソルを行頭に移動してインサートモードに移行する                   | | A                   | カーソルを行末に移動してインサートモードに移行する                   | | o                   | カーソルのある行の下に新しい行を追加してインサートモードに移行する   | | O                   | カーソルのある行の上に新しい行を追加してインサートモードに移行する   | | v                   |  ******** に移行する                                           | | Ctrl + v            | セレクションモードに移行する                                         | | gg                  | 最初の行に移動する                                                   | | G                   | 最後の行に移動する                                                   | | w                   | 次の単語の先頭に移動する                                             | | W                   | 次の単語の末尾に移動する                                             | | b                   | 前の単語の先頭に移動する                                             | | B                   | 前の単語の末尾に移動する                                             | | f + (文字)          | カーソルの後方の文字を行内検索し、見つかった場所に移動する           | | F + (文字)          | カーソルの前方の文字を行内検索し、見つかった場所に移動する           | | 0 ^               | 行頭に移動する（ 0 はインデントを無視する）                        | | $                   | 行末に移動する                                                       | | Ctrl + u Ctrl + d | 半画面スクロールアップ、スクロールダウンする                         | | Ctrl + b Ctrl + f | 全画面スクロールアップ、スクロールダウンする                         | | / + (検索パターン)  | 順方向にファイル内検索する（ n で次の候補、 N 出前の候補に移動） | | u                   | Undo（直前の変更を取り消す）                                         | | Ctrl + r            | Redo（直前の変更の取り消しを戻す）                                   | | >>                  | インデントを追加する                                                 | | >>                  | インデントを削除する                                                 | | r + (文字)          | カーソルの下の文字を置換する                                         | | x                   | カーソルの下の文字を削除する                                         | | dd                  | カーソルのある行を削除する                                           | | y                   | カーソルの下の文字をヤンク（コピー）                                 | | yy                  | カーソルのある行をヤンク（コピー）                                   | | p                   | クリップボードの中身をペースト                                       |

インサートモードは、テキストを入力するモード。ノーマルモードからインサートモードに移行するには、 i キーか a キーを入力する。インサートモードからノーマルモードに復帰するには、 Esc キーを入力する。

 ******** は、テキストを選択するモード。ノーマルモードから ******** に移行するには、 v キーを入力する。 ******** では、テキストを選択して、コピーや削除、置換などの操作を実行することができる。 ******** からノーマルモードに復帰するには、 Esc キーを入力する。

セレクションモード（矩形選択モード）は、テキストの矩形選択を行うモード。ノーマルモードからセレクションモードに移行するには、 Ctrl + v キーを入力する。セレクションモードでは、テキストの矩形領域を選択して、コピーや削除、置換などの操作を実行することができる。セレクションモードからノーマルモードに復帰するには、 Esc キーを入力する。

コマンドラインモードは、ファイルの保存や終了、設定変更などのコマンドを入力するモード。ノーマルモードからコマンドラインモードに移行するには、 : キーを入力する。コマンドを入力して実行するには、 Enter キーを入力する。コマンド実行後は自動でノーマルモードに移行する。基本的なコマンドは以下の通り。

| コマンド           | 概要                          | | ------------------ | :---------------------------- | | w                | 内容を保存                    | | q                | Vimを終了する                 | | q!               | Vimを強制終了する             | | wq               | 内容を保存して、Vimを終了する | | e + (ファイル名) | ファイルを開く                | | nohlsearch       | 検索ハイライトを解除する      | | set number       | 行数表示を有効にする          |

Answer: ビジュアルモード

Source: ../../note/computer/linux/_/chapters/text_editor.md

====================

Vimは、Linuxの中でも非常に一般的なテキストエディタで、viを拡張したもの。Vimは標準で多くの機能を持っており、拡張性も高いため多数のプラグインが存在する。

以下のコマンドを実行することで、Vimを起動することができる。

$ vim

Vimには次のようなモードがある。

ノーマルモードは、Vim上でコマンドを入力するモードで、Vimエディタを起動したときのデフォルトのモード。テキストファイルを編集するための各種コマンドを実行することができる。テキストの移動やコピー、貼り付け、削除、検索などのコマンドがある。ノーマルモードでの基本的な操作方法は以下の通り。

| キー                  | 概要                                                                 | | --------------------- | :------------------------------------------------------------------- | | :                   | コマンドラインモードに移行する                                       | | k j h l       | カーソルを上下左右にひとつ移動する                                   | | i                   | カーソルの後方からインサートモードに移行する                         | | a                   | カーソルの前方からインサートモードに移行する                         | | I                   | カーソルを行頭に移動してインサートモードに移行する                   | | A                   | カーソルを行末に移動してインサートモードに移行する                   | | o                   | カーソルのある行の下に新しい行を追加してインサートモードに移行する   | | O                   | カーソルのある行の上に新しい行を追加してインサートモードに移行する   | | v                   | ビジュアルモードに移行する                                           | | Ctrl + v            |  ********* に移行する                                         | | gg                  | 最初の行に移動する                                                   | | G                   | 最後の行に移動する                                                   | | w                   | 次の単語の先頭に移動する                                             | | W                   | 次の単語の末尾に移動する                                             | | b                   | 前の単語の先頭に移動する                                             | | B                   | 前の単語の末尾に移動する                                             | | f + (文字)          | カーソルの後方の文字を行内検索し、見つかった場所に移動する           | | F + (文字)          | カーソルの前方の文字を行内検索し、見つかった場所に移動する           | | 0 ^               | 行頭に移動する（ 0 はインデントを無視する）                        | | $                   | 行末に移動する                                                       | | Ctrl + u Ctrl + d | 半画面スクロールアップ、スクロールダウンする                         | | Ctrl + b Ctrl + f | 全画面スクロールアップ、スクロールダウンする                         | | / + (検索パターン)  | 順方向にファイル内検索する（ n で次の候補、 N 出前の候補に移動） | | u                   | Undo（直前の変更を取り消す）                                         | | Ctrl + r            | Redo（直前の変更の取り消しを戻す）                                   | | >>                  | インデントを追加する                                                 | | >>                  | インデントを削除する                                                 | | r + (文字)          | カーソルの下の文字を置換する                                         | | x                   | カーソルの下の文字を削除する                                         | | dd                  | カーソルのある行を削除する                                           | | y                   | カーソルの下の文字をヤンク（コピー）                                 | | yy                  | カーソルのある行をヤンク（コピー）                                   | | p                   | クリップボードの中身をペースト                                       |

インサートモードは、テキストを入力するモード。ノーマルモードからインサートモードに移行するには、 i キーか a キーを入力する。インサートモードからノーマルモードに復帰するには、 Esc キーを入力する。

ビジュアルモードは、テキストを選択するモード。ノーマルモードからビジュアルモードに移行するには、 v キーを入力する。ビジュアルモードでは、テキストを選択して、コピーや削除、置換などの操作を実行することができる。ビジュアルモードからノーマルモードに復帰するには、 Esc キーを入力する。

 ********* （矩形選択モード）は、テキストの矩形選択を行うモード。ノーマルモードから ********* に移行するには、 Ctrl + v キーを入力する。 ********* では、テキストの矩形領域を選択して、コピーや削除、置換などの操作を実行することができる。 ********* からノーマルモードに復帰するには、 Esc キーを入力する。

コマンドラインモードは、ファイルの保存や終了、設定変更などのコマンドを入力するモード。ノーマルモードからコマンドラインモードに移行するには、 : キーを入力する。コマンドを入力して実行するには、 Enter キーを入力する。コマンド実行後は自動でノーマルモードに移行する。基本的なコマンドは以下の通り。

| コマンド           | 概要                          | | ------------------ | :---------------------------- | | w                | 内容を保存                    | | q                | Vimを終了する                 | | q!               | Vimを強制終了する             | | wq               | 内容を保存して、Vimを終了する | | e + (ファイル名) | ファイルを開く                | | nohlsearch       | 検索ハイライトを解除する      | | set number       | 行数表示を有効にする          |

Answer: セレクションモード

Source: ../../note/computer/linux/_/chapters/text_editor.md

====================

Vimは、Linuxの中でも非常に一般的なテキストエディタで、viを拡張したもの。Vimは標準で多くの機能を持っており、拡張性も高いため多数のプラグインが存在する。

以下のコマンドを実行することで、Vimを起動することができる。

$ vim

Vimには次のようなモードがある。

ノーマルモードは、Vim上でコマンドを入力するモードで、Vimエディタを起動したときのデフォルトのモード。テキストファイルを編集するための各種コマンドを実行することができる。テキストの移動やコピー、貼り付け、削除、検索などのコマンドがある。ノーマルモードでの基本的な操作方法は以下の通り。

| キー                  | 概要                                                                 | | --------------------- | :------------------------------------------------------------------- | | :                   | コマンドラインモードに移行する                                       | | k j h l       | カーソルを上下左右にひとつ移動する                                   | | i                   | カーソルの後方からインサートモードに移行する                         | | a                   | カーソルの前方からインサートモードに移行する                         | | I                   | カーソルを行頭に移動してインサートモードに移行する                   | | A                   | カーソルを行末に移動してインサートモードに移行する                   | | o                   | カーソルのある行の下に新しい行を追加してインサートモードに移行する   | | O                   | カーソルのある行の上に新しい行を追加してインサートモードに移行する   | | v                   | ビジュアルモードに移行する                                           | | Ctrl + v            | セレクションモードに移行する                                         | | gg                  | 最初の行に移動する                                                   | | G                   | 最後の行に移動する                                                   | | w                   | 次の単語の先頭に移動する                                             | | W                   | 次の単語の末尾に移動する                                             | | b                   | 前の単語の先頭に移動する                                             | | B                   | 前の単語の末尾に移動する                                             | | f + (文字)          | カーソルの後方の文字を行内検索し、見つかった場所に移動する           | | F + (文字)          | カーソルの前方の文字を行内検索し、見つかった場所に移動する           | | 0 ^               | 行頭に移動する（ 0 はインデントを無視する）                        | | $                   | 行末に移動する                                                       | | Ctrl + u Ctrl + d | 半画面スクロールアップ、スクロールダウンする                         | | Ctrl + b Ctrl + f | 全画面スクロールアップ、スクロールダウンする                         | | / + (検索パターン)  | 順方向にファイル内検索する（ n で次の候補、 N 出前の候補に移動） | | u                   | Undo（直前の変更を取り消す）                                         | | Ctrl + r            | Redo（直前の変更の取り消しを戻す）                                   | | >>                  | インデントを追加する                                                 | | >>                  | インデントを削除する                                                 | | r + (文字)          | カーソルの下の文字を置換する                                         | | x                   | カーソルの下の文字を削除する                                         | | dd                  | カーソルのある行を削除する                                           | | y                   | カーソルの下の文字をヤンク（コピー）                                 | | yy                  | カーソルのある行をヤンク（コピー）                                   | | p                   | クリップボードの中身をペースト                                       |

インサートモードは、テキストを入力するモード。ノーマルモードからインサートモードに移行するには、 i キーか a キーを入力する。インサートモードからノーマルモードに復帰するには、 Esc キーを入力する。

ビジュアルモードは、テキストを選択するモード。ノーマルモードからビジュアルモードに移行するには、 v キーを入力する。ビジュアルモードでは、テキストを選択して、コピーや削除、置換などの操作を実行することができる。ビジュアルモードからノーマルモードに復帰するには、 Esc キーを入力する。

セレクションモード（ ******* ）は、テキストの矩形選択を行うモード。ノーマルモードからセレクションモードに移行するには、 Ctrl + v キーを入力する。セレクションモードでは、テキストの矩形領域を選択して、コピーや削除、置換などの操作を実行することができる。セレクションモードからノーマルモードに復帰するには、 Esc キーを入力する。

コマンドラインモードは、ファイルの保存や終了、設定変更などのコマンドを入力するモード。ノーマルモードからコマンドラインモードに移行するには、 : キーを入力する。コマンドを入力して実行するには、 Enter キーを入力する。コマンド実行後は自動でノーマルモードに移行する。基本的なコマンドは以下の通り。

| コマンド           | 概要                          | | ------------------ | :---------------------------- | | w                | 内容を保存                    | | q                | Vimを終了する                 | | q!               | Vimを強制終了する             | | wq               | 内容を保存して、Vimを終了する | | e + (ファイル名) | ファイルを開く                | | nohlsearch       | 検索ハイライトを解除する      | | set number       | 行数表示を有効にする          |

Answer: 矩形選択モード

Source: ../../note/computer/linux/_/chapters/text_editor.md

====================

Vimは、Linuxの中でも非常に一般的なテキストエディタで、viを拡張したもの。Vimは標準で多くの機能を持っており、拡張性も高いため多数のプラグインが存在する。

以下のコマンドを実行することで、Vimを起動することができる。

$ vim

Vimには次のようなモードがある。

ノーマルモードは、Vim上でコマンドを入力するモードで、Vimエディタを起動したときのデフォルトのモード。テキストファイルを編集するための各種コマンドを実行することができる。テキストの移動やコピー、貼り付け、削除、検索などのコマンドがある。ノーマルモードでの基本的な操作方法は以下の通り。

| キー                  | 概要                                                                 | | --------------------- | :------------------------------------------------------------------- | | :                   |  ********** に移行する                                       | | k j h l       | カーソルを上下左右にひとつ移動する                                   | | i                   | カーソルの後方からインサートモードに移行する                         | | a                   | カーソルの前方からインサートモードに移行する                         | | I                   | カーソルを行頭に移動してインサートモードに移行する                   | | A                   | カーソルを行末に移動してインサートモードに移行する                   | | o                   | カーソルのある行の下に新しい行を追加してインサートモードに移行する   | | O                   | カーソルのある行の上に新しい行を追加してインサートモードに移行する   | | v                   | ビジュアルモードに移行する                                           | | Ctrl + v            | セレクションモードに移行する                                         | | gg                  | 最初の行に移動する                                                   | | G                   | 最後の行に移動する                                                   | | w                   | 次の単語の先頭に移動する                                             | | W                   | 次の単語の末尾に移動する                                             | | b                   | 前の単語の先頭に移動する                                             | | B                   | 前の単語の末尾に移動する                                             | | f + (文字)          | カーソルの後方の文字を行内検索し、見つかった場所に移動する           | | F + (文字)          | カーソルの前方の文字を行内検索し、見つかった場所に移動する           | | 0 ^               | 行頭に移動する（ 0 はインデントを無視する）                        | | $                   | 行末に移動する                                                       | | Ctrl + u Ctrl + d | 半画面スクロールアップ、スクロールダウンする                         | | Ctrl + b Ctrl + f | 全画面スクロールアップ、スクロールダウンする                         | | / + (検索パターン)  | 順方向にファイル内検索する（ n で次の候補、 N 出前の候補に移動） | | u                   | Undo（直前の変更を取り消す）                                         | | Ctrl + r            | Redo（直前の変更の取り消しを戻す）                                   | | >>                  | インデントを追加する                                                 | | >>                  | インデントを削除する                                                 | | r + (文字)          | カーソルの下の文字を置換する                                         | | x                   | カーソルの下の文字を削除する                                         | | dd                  | カーソルのある行を削除する                                           | | y                   | カーソルの下の文字をヤンク（コピー）                                 | | yy                  | カーソルのある行をヤンク（コピー）                                   | | p                   | クリップボードの中身をペースト                                       |

インサートモードは、テキストを入力するモード。ノーマルモードからインサートモードに移行するには、 i キーか a キーを入力する。インサートモードからノーマルモードに復帰するには、 Esc キーを入力する。

ビジュアルモードは、テキストを選択するモード。ノーマルモードからビジュアルモードに移行するには、 v キーを入力する。ビジュアルモードでは、テキストを選択して、コピーや削除、置換などの操作を実行することができる。ビジュアルモードからノーマルモードに復帰するには、 Esc キーを入力する。

セレクションモード（矩形選択モード）は、テキストの矩形選択を行うモード。ノーマルモードからセレクションモードに移行するには、 Ctrl + v キーを入力する。セレクションモードでは、テキストの矩形領域を選択して、コピーや削除、置換などの操作を実行することができる。セレクションモードからノーマルモードに復帰するには、 Esc キーを入力する。

 ********** は、ファイルの保存や終了、設定変更などのコマンドを入力するモード。ノーマルモードから ********** に移行するには、 : キーを入力する。コマンドを入力して実行するには、 Enter キーを入力する。コマンド実行後は自動でノーマルモードに移行する。基本的なコマンドは以下の通り。

| コマンド           | 概要                          | | ------------------ | :---------------------------- | | w                | 内容を保存                    | | q                | Vimを終了する                 | | q!               | Vimを強制終了する             | | wq               | 内容を保存して、Vimを終了する | | e + (ファイル名) | ファイルを開く                | | nohlsearch       | 検索ハイライトを解除する      | | set number       | 行数表示を有効にする          |

Answer: コマンドラインモード

Source: ../../note/computer/linux/_/chapters/text_editor.md

====================

 ***** は、Linuxで一般的に利用されるテキストエディタの一種で、GNUプロジェクトの一部として開発されたフリーソフトウェア。拡張性やカスタマイズ性が高いのが特徴で、GUIコンピュータに慣れたユーザにとっては扱いにくい場合もある。 ***** における基本操作は以下の通り。

| キー       | 概要                     | | ---------- | :----------------------- | | Ctrl + p | カーソルを上に移動する   | | Ctrl + n | カーソルを下に移動する   | | Ctrl + f | カーソルを右に移動する   | | Ctrl + b | カーソルを左に移動する   | | Ctrl + a | カーソルを行頭に移動する | | Ctrl + e | カーソルを行末に移動する | | Ctrl + s | 前方検索を行う           | | Ctrl + r | 後方検索を行う           |

Answer: Emacs

Source: ../../note/computer/linux/_/chapters/text_editor.md

====================

 **** は、Linuxにおけるテキストエディタのひとつで、viやEmacsよりもシンプルで使いやすく、初心者にも親しみやすい。

Answer: nano

Source: ../../note/computer/linux/_/chapters/text_editor.md

====================

 ** は、ファイルの行数、単語数、バイト数を数えるコマンド。

コマンドの書式は以下の通り。

 **  [OPTION]... [FILE]...

例えば、 test.txt の行数、単語数、バイト数をカウントするには、以下のコマンドを実行する。

$  **  test.txt
11  31 277 test.txt

代表的なオプションは以下の通り。

| オプション | 概要                   | | ---------- | :--------------------- | | -l       | 行数のみを表示する     | | -w       | 単語数のみを表示する   | | -c       | バイト数のみを表示する |

Answer: wc

Source: ../../note/computer/linux/_/chapters/text_processing_and_regex.md

====================

 **** は、テキストの内容を行単位でソートするコマンド。デフォルトでは、辞書順（アルファベット順）でソートを行う。

コマンドの書式は以下の通り。

 ****  [OPTION]... [FILE]...

例えば、 test.txt の中身をアルファベット順でソートした結果を出力したい場合、以下のコマンドを実行する。

$  ****  test.txt

代表的なオプションは以下の通り。

| オプション | 概要                               | | ---------- | :--------------------------------- | | -n       | 文字列を数値とみなしてソートする。 | | -r       | 逆順にソートする。                 |

Answer: sort

Source: ../../note/computer/linux/_/chapters/text_processing_and_regex.md

====================

 **** は、連続した同じ内容の行を省くコマンド。重複する行が連続していない場合は省かれないため、 sort コマンドと組み合わせる場合が多い。

コマンドの書式は以下の通り。

 ****  [OPTION]... [INPUT [OUTPUT]]

例えば、 test.txt の内容から連続する重複行を省きたい場合、以下のコマンドを実行する。

$  ****  test.txt

-c オプションを使用すると、重複している行数をカウントすることができる。

Answer: uniq

Source: ../../note/computer/linux/_/chapters/text_processing_and_regex.md

====================

 *** は、入力行の一部分を切り出して出力するコマンド。

コマンドの書式は以下の通り。

 ***  OPTION... [FILE]...

例えば、CSVファイル（カンマ区切りのファイル）の3番目のフィールドだけを出力したい場合は、以下のコマンドを実行する。

$  ***  -d , -f 3 test.csv

-d オプションは入力行を分割するための区切り文字の指定に、 -f は取り出すフィールド番号の指定に用いる。

Answer: cut

Source: ../../note/computer/linux/_/chapters/text_processing_and_regex.md

====================

 ** は、入力テキストの内容から、特定の文字を置き換えるためのコマンド。

コマンドの書式は以下の通り。

 **  [OPTION]... STRING1 [STRING2]

例えば、セミコロン区切りでデータが記載された data.txt をCSVとして出力したい場合は、以下のコマンドを実行する。

$ cat data.txt |  **  ; ,

-d オプションを使用すると、指定された文字を削除することができる。

Answer: tr

Source: ../../note/computer/linux/_/chapters/text_processing_and_regex.md

====================

 **** は、2つのファイルの差分を表示するためのコマンド。例えば、編集前後のプログラムのソースコードや設定ファイルの差分を確認するために使用される。

コマンドの書式は以下の通り。

 ****  [OPTION]... FILES

例えば、 test1.txt と test2.txt の差分を確認したい場合は、以下のコマンドを実行する。

$  ****  test1.txt test2.txt

 ****  の出力は、以下の3つの変更種別がある。

| 記号              | 内容                                                                       | | ----------------- | :------------------------------------------------------------------------- | | <範囲1>a<範囲2> | 1つ目のファイルの範囲1の後に、2つ目のファイルの範囲2の内容が追加された。   | | <範囲1>c<範囲2> | 1つ目のファイルの範囲1の箇所に、2つ目のファイルの範囲2の内容が変更された。 | | <範囲1>d<範囲2> | 1つ目のファイルの範囲1の箇所が削除された。                                 |

-u オプションを付与すると、ファイルの差分をユニファイド出力形式で出力する。

Answer: diff

Source: ../../note/computer/linux/_/chapters/text_processing_and_regex.md

====================

 ***** は、ファイルの差分を適用するためのコマンド。

コマンドの書式は以下の通り。

 *****  [OPTION]... [ORIGINAL_FILE [PATCH_FILE]]

例えば、 old.txt と new.txt の差分をパッチとして new.txt に適用したい場合は、以下のコマンドを実行する。

$ diff old.txt new.txt |  *****  new.txt

Answer: patch

Source: ../../note/computer/linux/_/chapters/text_processing_and_regex.md

====================

 *** は、文字列を柔軟に処理することができるコマンド。  ***  は"stream editor"の略語。

コマンドの書式は以下の通り。

 ***  [OPTION]... [COMMAND]... [FILE]...

例えば、 test.txt のテキスト中にある aaa という文字列を bbb に置換したい場合は次のコマンドを実行する。

$  ***  's/aaa/bbb/g' test.txt

コマンドとしては他にも次のようなものがある。

| コマンド | 概要                 | | -------- | :------------------- | | =      | 行番号を出力する     | | #      | コマンド中のコメント |

Answer: sed

Source: ../../note/computer/linux/_/chapters/text_processing_and_regex.md

====================

 **** は、文字列のパターンを表現するための方法。 **** を用いれば、文字列がパターンに一致するかを確認したり、共通のパターンに一致するテキストを検索、置換することができる。

 **** は、文字列そのものを表すリテラルと、特別なパターンを表現するためのメタ文字の組み合わせからなる。

基本的なメタ文字は以下の通り。

1. 基本的なメタ文字

| メタ文字 | 意味                                                   | | -------- | :----------------------------------------------------- | | .      | 任意の1文字にマッチする                                | | *      | 直前のパターンの0回以上の繰り返しにマッチする          | | +      | 直前のパターンの1回以上の繰り返しにマッチする          | | ?      | 直前のパターンの0回もしくは1回の繰り返しにマッチする   | | {N}    | 直前のパターンのN回の繰り返しにマッチする              | | {N,}   | 直前のパターンのN回以上の繰り返しにマッチする          | | {,M}   | 直前のパターンのM回以下の繰り返しにマッチする          | | {N,M}  | 直前のパターンのN回以上M回以下の繰り返しにマッチする   | | \|     | 左右の文字列のいずれかにマッチする                     | | \      | 直後のメタ文字のエスケープする                         | | []     | [ と ] の中のいずれか1文字にマッチする             | | [^]    | [^ と ] の中に含まれない1文字にマッチする          | | ()     |  **** のグルーピング（マッチした文字列をキャプチャ） |

2. アンカー

| メタ文字 | 意味             | | -------- | :--------------- | | ^      | 行頭にマッチする | | $      | 行末にマッチする |

3. エスケープシーケンス

| メタ文字 | 意味                                                                            | | -------- | :------------------------------------------------------------------------------ | | \n     | 改行文字にマッチする(LF)                                                        | | \r     | 改行文字にマッチする(CR)                                                        | | \f     | 改ページ文字にマッチする                                                        | | \R     | すべての改行文字にマッチする（ \n\|\r\|\r\n と同義）                          | | \t     | タブ文字にマッチする                                                            | | \s     | 空白文字にマッチする（  \|\t\|\n\|\r\|\f と同義）                             | | \S     | 空白文字以外のすべての文字にマッチする                                          | | \d     | 数字にマッチする（ [0-9] と同義）                                             | | \D     | 数字以外のすべての文字にマッチする（ [^0-9] と同義）                          | | \w     | アルファベットと数字とアンダースコアにマッチする（ [a-zA-Z0-9_] と同義）      | | \W     | アルファベットと数字とアンダースコア以外にマッチする（ [^a-zA-Z0-9_] と同義） | | \l     | 半角英小文字にマッチする（ [a-z] と同義）                                     | | \L     | 半角英小文字以外にマッチする（ [^a-z] と同義）                                | | \u     | 半角英大文字にマッチする（ [A-Z] と同義）                                     | | \U     | 半角英大文字以外にマッチする（ [^A-Z] と同義）                                | | \v     | 垂直タブ文字にマッチする                                                        | | \a     | ベル文字にマッチする                                                            | | \0     | NULL文字にマッチする                                                            |

4. 位置マッチ

| メタ文字 | 意味                                                                                        | | -------- | :------------------------------------------------------------------------------------------ | | (?=)   | 肯定先読み（ (?= と ) の間のパターンにマッチした部分文字列の先頭の位置にマッチする）    | | (?!)   | 否定先読み（ (?! と ) の間のパターンにマッチしない部分文字列の先頭の位置にマッチする）  | | (?<=)  | 肯定後読み（ (?<= と ) の間のパターンにマッチした部分文字列の末尾の位置にマッチする）   | | (?<!)  | 否定後読み（ (?<! と ) の間のパターンにマッチしない部分文字列の末尾の位置にマッチする） |

Answer: 正規表現

Source: ../../note/computer/linux/_/chapters/text_processing_and_regex.md

====================

正規表現は、文字列のパターンを表現するための方法。正規表現を用いれば、文字列がパターンに一致するかを確認したり、共通のパターンに一致するテキストを検索、置換することができる。

正規表現は、文字列そのものを表す **** と、特別なパターンを表現するためのメタ文字の組み合わせからなる。

基本的なメタ文字は以下の通り。

1. 基本的なメタ文字

| メタ文字 | 意味                                                   | | -------- | :----------------------------------------------------- | | .      | 任意の1文字にマッチする                                | | *      | 直前のパターンの0回以上の繰り返しにマッチする          | | +      | 直前のパターンの1回以上の繰り返しにマッチする          | | ?      | 直前のパターンの0回もしくは1回の繰り返しにマッチする   | | {N}    | 直前のパターンのN回の繰り返しにマッチする              | | {N,}   | 直前のパターンのN回以上の繰り返しにマッチする          | | {,M}   | 直前のパターンのM回以下の繰り返しにマッチする          | | {N,M}  | 直前のパターンのN回以上M回以下の繰り返しにマッチする   | | \|     | 左右の文字列のいずれかにマッチする                     | | \      | 直後のメタ文字のエスケープする                         | | []     | [ と ] の中のいずれか1文字にマッチする             | | [^]    | [^ と ] の中に含まれない1文字にマッチする          | | ()     | 正規表現のグルーピング（マッチした文字列をキャプチャ） |

2. アンカー

| メタ文字 | 意味             | | -------- | :--------------- | | ^      | 行頭にマッチする | | $      | 行末にマッチする |

3. エスケープシーケンス

| メタ文字 | 意味                                                                            | | -------- | :------------------------------------------------------------------------------ | | \n     | 改行文字にマッチする(LF)                                                        | | \r     | 改行文字にマッチする(CR)                                                        | | \f     | 改ページ文字にマッチする                                                        | | \R     | すべての改行文字にマッチする（ \n\|\r\|\r\n と同義）                          | | \t     | タブ文字にマッチする                                                            | | \s     | 空白文字にマッチする（  \|\t\|\n\|\r\|\f と同義）                             | | \S     | 空白文字以外のすべての文字にマッチする                                          | | \d     | 数字にマッチする（ [0-9] と同義）                                             | | \D     | 数字以外のすべての文字にマッチする（ [^0-9] と同義）                          | | \w     | アルファベットと数字とアンダースコアにマッチする（ [a-zA-Z0-9_] と同義）      | | \W     | アルファベットと数字とアンダースコア以外にマッチする（ [^a-zA-Z0-9_] と同義） | | \l     | 半角英小文字にマッチする（ [a-z] と同義）                                     | | \L     | 半角英小文字以外にマッチする（ [^a-z] と同義）                                | | \u     | 半角英大文字にマッチする（ [A-Z] と同義）                                     | | \U     | 半角英大文字以外にマッチする（ [^A-Z] と同義）                                | | \v     | 垂直タブ文字にマッチする                                                        | | \a     | ベル文字にマッチする                                                            | | \0     | NULL文字にマッチする                                                            |

4. 位置マッチ

| メタ文字 | 意味                                                                                        | | -------- | :------------------------------------------------------------------------------------------ | | (?=)   | 肯定先読み（ (?= と ) の間のパターンにマッチした部分文字列の先頭の位置にマッチする）    | | (?!)   | 否定先読み（ (?! と ) の間のパターンにマッチしない部分文字列の先頭の位置にマッチする）  | | (?<=)  | 肯定後読み（ (?<= と ) の間のパターンにマッチした部分文字列の末尾の位置にマッチする）   | | (?<!)  | 否定後読み（ (?<! と ) の間のパターンにマッチしない部分文字列の末尾の位置にマッチする） |

Answer: リテラル

Source: ../../note/computer/linux/_/chapters/text_processing_and_regex.md

====================

正規表現は、文字列のパターンを表現するための方法。正規表現を用いれば、文字列がパターンに一致するかを確認したり、共通のパターンに一致するテキストを検索、置換することができる。

正規表現は、文字列そのものを表すリテラルと、特別なパターンを表現するための **** の組み合わせからなる。

基本的な **** は以下の通り。

1. 基本的な **** 

|  ****  | 意味                                                   | | -------- | :----------------------------------------------------- | | .      | 任意の1文字にマッチする                                | | *      | 直前のパターンの0回以上の繰り返しにマッチする          | | +      | 直前のパターンの1回以上の繰り返しにマッチする          | | ?      | 直前のパターンの0回もしくは1回の繰り返しにマッチする   | | {N}    | 直前のパターンのN回の繰り返しにマッチする              | | {N,}   | 直前のパターンのN回以上の繰り返しにマッチする          | | {,M}   | 直前のパターンのM回以下の繰り返しにマッチする          | | {N,M}  | 直前のパターンのN回以上M回以下の繰り返しにマッチする   | | \|     | 左右の文字列のいずれかにマッチする                     | | \      | 直後の **** のエスケープする                         | | []     | [ と ] の中のいずれか1文字にマッチする             | | [^]    | [^ と ] の中に含まれない1文字にマッチする          | | ()     | 正規表現のグルーピング（マッチした文字列をキャプチャ） |

2. アンカー

|  ****  | 意味             | | -------- | :--------------- | | ^      | 行頭にマッチする | | $      | 行末にマッチする |

3. エスケープシーケンス

|  ****  | 意味                                                                            | | -------- | :------------------------------------------------------------------------------ | | \n     | 改行文字にマッチする(LF)                                                        | | \r     | 改行文字にマッチする(CR)                                                        | | \f     | 改ページ文字にマッチする                                                        | | \R     | すべての改行文字にマッチする（ \n\|\r\|\r\n と同義）                          | | \t     | タブ文字にマッチする                                                            | | \s     | 空白文字にマッチする（  \|\t\|\n\|\r\|\f と同義）                             | | \S     | 空白文字以外のすべての文字にマッチする                                          | | \d     | 数字にマッチする（ [0-9] と同義）                                             | | \D     | 数字以外のすべての文字にマッチする（ [^0-9] と同義）                          | | \w     | アルファベットと数字とアンダースコアにマッチする（ [a-zA-Z0-9_] と同義）      | | \W     | アルファベットと数字とアンダースコア以外にマッチする（ [^a-zA-Z0-9_] と同義） | | \l     | 半角英小文字にマッチする（ [a-z] と同義）                                     | | \L     | 半角英小文字以外にマッチする（ [^a-z] と同義）                                | | \u     | 半角英大文字にマッチする（ [A-Z] と同義）                                     | | \U     | 半角英大文字以外にマッチする（ [^A-Z] と同義）                                | | \v     | 垂直タブ文字にマッチする                                                        | | \a     | ベル文字にマッチする                                                            | | \0     | NULL文字にマッチする                                                            |

4. 位置マッチ

|  ****  | 意味                                                                                        | | -------- | :------------------------------------------------------------------------------------------ | | (?=)   | 肯定先読み（ (?= と ) の間のパターンにマッチした部分文字列の先頭の位置にマッチする）    | | (?!)   | 否定先読み（ (?! と ) の間のパターンにマッチしない部分文字列の先頭の位置にマッチする）  | | (?<=)  | 肯定後読み（ (?<= と ) の間のパターンにマッチした部分文字列の末尾の位置にマッチする）   | | (?<!)  | 否定後読み（ (?<! と ) の間のパターンにマッチしない部分文字列の末尾の位置にマッチする） |

Answer: メタ文字

Source: ../../note/computer/linux/_/chapters/text_processing_and_regex.md

====================

 *** は、Linuxシステムにログインしてシステムを使用するためのアカウント。各 *** には一意の *** 名が割り当てられており、各 *** はそれぞれのホームディレクトリを持つ。 *** はシステム上で一意のUIDによって識別される。

 *** が作成したファイルやディレクトリの所有者は、その *** 自身となる。

Linuxでは、ファイルやディレクトリに対するアクセス権を、 *** ごとにコントロールできる。

Answer: ユーザ

Source: ../../note/computer/linux/_/chapters/user_and_permission.md

====================

ユーザは、Linuxシステムにログインしてシステムを使用するためのアカウント。各ユーザには一意のユーザ名が割り当てられており、各ユーザはそれぞれのホームディレクトリを持つ。ユーザはシステム上で一意の *** によって識別される。

ユーザが作成したファイルやディレクトリの所有者は、そのユーザ自身となる。

Linuxでは、ファイルやディレクトリに対するアクセス権を、ユーザごとにコントロールできる。

Answer: UID

Source: ../../note/computer/linux/_/chapters/user_and_permission.md

====================

 ****** は、Linux上で現在ログインしているユーザのユーザ名を確認するためのコマンド。

コマンドの書式は以下の通り。

 ******  [OPTION]...

Answer: whoami

Source: ../../note/computer/linux/_/chapters/user_and_permission.md

====================

 ** は、Linux上で現在ログインしているユーザの情報を表示するためのコマンド。ユーザ名、UID、所属するグループ名、GIDといった情報を表示できる。

コマンドの書式は以下の通り。

 **  [OPTION]... [USER]...

Answer: id

Source: ../../note/computer/linux/_/chapters/user_and_permission.md

====================

 ******* は、Linux上で新しいユーザを作成するためのコマンド。

コマンドの書式は以下の通り。

 *******  [OPTION]... LOGIN
 *******  -D
 *******  -D [OPTION]...

例えば以下のコマンドを実行すると、新しいユーザアカウント foo を作成できる。

$  *******  foo

また、上記のコマンドを実行すると、 /home/foo ディレクトリが作成され、 foo ユーザがこのディレクトリを所有する。ただし、この時点ではパスワードが設定されていないため、ユーザはログインできない。パスワードを設定するには、以下のコマンドを実行する必要がある。

$ passwd foo

Answer: useradd

Source: ../../note/computer/linux/_/chapters/user_and_permission.md

====================

 ******* は、Linux上で既存のユーザアカウントを変更するためのコマンド。主に以下のようなユーザアカウント情報を変更するために使用される。

• ユーザ名
• ユーザパスワード
• ユーザの所属するグループ
• ユーザアカウントの有効期限

コマンドの書式は以下の通り。

 *******  [OPTION]... LOGIN

例えば、ユーザ foo のホームディレクトリを /home/bar に変更する場合は、以下のコマンドを実行する。

$  *******  --home /home/bar foo

ユーザ foo のメイングループを foo から bar に変更する場合は、以下のコマンドを実行する。

$  *******  -g bar foo

ユーザ foo をサブグループ hoge に追加する場合は、以下のコマンドを実行する。

$  *******  -aG hoge foo

 *******  コマンドはroot権限を持つユーザが実行する必要がある。

Answer: usermod

Source: ../../note/computer/linux/_/chapters/user_and_permission.md

====================

 ******* は、Linux上でユーザを削除するためのコマンド。

コマンドの書式は以下の通り。

 *******  [OPTION]... LOGIN

例えば、ユーザ名が foo のユーザを削除するには、以下のコマンドを実行する。

$  *******  foo

このコマンドの実行により、 foo はシステムから完全に削除されるが、ホームディレクトリやメールボックスといったユーザデータは削除されない。これらのデータを削除するには、 -r オプションを指定する。

 *******  コマンドはroot権限を持つユーザが実行する必要がある。

Answer: userdel

Source: ../../note/computer/linux/_/chapters/user_and_permission.md

====================

 ****** は、Linuxでユーザのパスワードを変更するために使用されるコマンド。

コマンドの書式は以下の通り。

 ******  [OPTION]... LOGIN

例えば、ユーザ名が foo のユーザのパスワードを変更するには、以下のコマンドを実行する。

$  ******  foo

 ******  コマンドを実行すると、プロンプトでパスワードの入力が要求される。

 ******  コマンドはroot権限を持つユーザが実行する必要がある。

Answer: passwd

Source: ../../note/computer/linux/_/chapters/user_and_permission.md

====================

 **** は、複数のユーザをひとまとめにする機能で、アクセス権限の設定やファイルの所有権管理などに利用される。 **** を利用することで、Linux上のファイルやディレクトリに対するアクセス権をまとめてコントロールすることができる。 **** はシステム上で一意のGIDによって識別される。

ユーザは必ずひとつのメイン **** に所属しており、任意の数のサブ **** に所属することができる。また、ファイルやディレクトリも必ずひとつの **** に所属している。

Answer: グループ

Source: ../../note/computer/linux/_/chapters/user_and_permission.md

====================

グループは、複数のユーザをひとまとめにする機能で、アクセス権限の設定やファイルの所有権管理などに利用される。グループを利用することで、Linux上のファイルやディレクトリに対するアクセス権をまとめてコントロールすることができる。グループはシステム上で一意の *** によって識別される。

ユーザは必ずひとつのメイングループに所属しており、任意の数のサブグループに所属することができる。また、ファイルやディレクトリも必ずひとつのグループに所属している。

Answer: GID

Source: ../../note/computer/linux/_/chapters/user_and_permission.md

====================

 ******* は、ユーザが必ずひとつ所属するグループで、通常はユーザ名と同名のグループが自動的に作成され、そのグループが ******* として割り当てられる。例えば、 foo というユーザを作成した時、そのユーザは foo という ******* に所属する。

ユーザが作成したファイルやディレクトリの所有グループには、そのユーザの ******* がデフォルトで割り当てられる。

Answer: メイングループ

Source: ../../note/computer/linux/_/chapters/user_and_permission.md

====================

 ****** は、ユーザが任意の数所属することができるグループ。複数のユーザが同じ ****** に所属することで、そのグループが所有者となっているファイルやディレクトリに対するアクセス権をまとめて設定できる。

Answer: サブグループ

Source: ../../note/computer/linux/_/chapters/user_and_permission.md

====================

 ****** は、Linux上のユーザの所属グループリストを確認するためのコマンド。

コマンドの書式は以下の通り。

 ******  [USER]

Answer: groups

Source: ../../note/computer/linux/_/chapters/user_and_permission.md

====================

 ******** は、Linux上で新しいグループを作成するためのコマンド。

コマンドの書式は以下の通り。

 ********  [OPTION]... NEWGROUP

例えば、新しいグループ hoge を作成する場合は、以下のコマンドを実行する。

$  ********  hoge

 ********  コマンドはroot権限を持つユーザが実行する必要がある。

Answer: groupadd

Source: ../../note/computer/linux/_/chapters/user_and_permission.md

====================

 ******** は、Linux上で既存のグループの属性を変更するためのコマンド。主に以下のようなグループ情報を変更するために使用される。

• グループID(GID)
• グループ名
• グループパスワード

コマンドの書式は以下の通り。

 ********  [OPTION]... GROUP

例えば、グループ名が hoge のグループのグループ名を fuga に変更するには、以下のコマンドを実行する。

$  ********  -n fuga hoge

Answer: groupmod

Source: ../../note/computer/linux/_/chapters/user_and_permission.md

====================

 ******** は、Linux上でグループを削除するためのコマンド。

コマンドの書式は以下の通り。

 ********  [OPTION]... GROUP

例えば、グループ名 hoge のグループを削除する場合は、以下のコマンドを実行する。

$  ********  hoge

ただし、グループに所属するユーザがいる場合は、そのユーザを他のグループに移動させるか、ユーザ自身を削除する必要がある。

Answer: groupdel

Source: ../../note/computer/linux/_/chapters/user_and_permission.md

