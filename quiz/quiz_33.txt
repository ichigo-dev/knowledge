====================

コンテナ型の仮想マシンは、ホストOS上で ******** を起動しておき、コンテナイメージを作成して独立したコンテナ環境でアプリケーションを動作させる。コンテナ型はゲストOSを必要とせず、それぞれのアプリケーションに対して個別のリソース領域を割り当てる。ホストOS型やハイパーバイザ型に比べてリソースの消費が抑えられ、高速に動作するというメリットがある。DockerやPodmanといったソフトウェアが有名。

Answer: コンテナエンジン

Source: ../../note/system/_/chapters/system_architecture.md

====================

コンテナ型の仮想マシンは、ホストOS上でコンテナエンジンを起動しておき、 ******** を作成して独立したコンテナ環境でアプリケーションを動作させる。コンテナ型はゲストOSを必要とせず、それぞれのアプリケーションに対して個別のリソース領域を割り当てる。ホストOS型やハイパーバイザ型に比べてリソースの消費が抑えられ、高速に動作するというメリットがある。DockerやPodmanといったソフトウェアが有名。

Answer: コンテナイメージ

Source: ../../note/system/_/chapters/system_architecture.md

====================

コンテナ型の仮想マシンは、ホストOS上でコンテナエンジンを起動しておき、コンテナイメージを作成して独立したコンテナ環境でアプリケーションを動作させる。コンテナ型はゲストOSを必要とせず、それぞれのアプリケーションに対して個別のリソース領域を割り当てる。ホストOS型やハイパーバイザ型に比べてリソースの消費が抑えられ、高速に動作するというメリットがある。Dockerや ****** といったソフトウェアが有名。

Answer: Podman

Source: ../../note/system/_/chapters/system_architecture.md

====================

 ********** は、サーバではなくハードディスクなどのストレージを仮想化する方法。仮想的なディスクドライブを設定することで、サーバは実際の物理的な容量を意識せずに大容量が割り当てられているものとして運用することができる。

Answer: シンプロビジョニング

Source: ../../note/system/_/chapters/system_architecture.md

====================

 *********** は、仮想サーバで稼働しているOSやソフトウェアを停止することなく、他の物理サーバへ差し替える技術。サーバ障害時に切り替えることで処理を継続することができる。

Answer: ライブマイグレーション

Source: ../../note/system/_/chapters/system_architecture.md

====================

 *** （デスクトップ仮想化: Virtual Desktop Infrastructure）は、アプリケーションやデータを *** サーバで管理しておき、クライアントから接続して利用する方式。

Answer: VDI

Source: ../../note/system/_/chapters/system_architecture.md

====================

VDI（ ********* : Virtual Desktop Infrastructure）は、アプリケーションやデータをVDIサーバで管理しておき、クライアントから接続して利用する方式。

Answer: デスクトップ仮想化

Source: ../../note/system/_/chapters/system_architecture.md

====================

 ************ は、サーバの仮想化を行うことで物理サーバを統合する方法。仮想化ソフトウェアを利用して、複数の物理サーバを仮想化し、マイグレーションなどによって1台の物理サーバに統合する。

Answer: サーバコンソリデーション

Source: ../../note/system/_/chapters/system_architecture.md

====================

 ****************** (HPC: High Performance Computing)は、高性能で高速なコンピュータによって膨大な計算処理を行うことを目的としており、それを実現するための大規模なハードウェアやソフトウェアによって構成されている。スーパコンピュータにより並列処理を実行することで大幅な高速化を可能としている。

Answer: ハイパフォーマンスコンピューティング

Source: ../../note/system/_/chapters/system_architecture.md

====================

ハイパフォーマンスコンピューティング( *** : High Performance Computing)は、高性能で高速なコンピュータによって膨大な計算処理を行うことを目的としており、それを実現するための大規模なハードウェアやソフトウェアによって構成されている。スーパコンピュータにより並列処理を実行することで大幅な高速化を可能としている。

Answer: HPC

Source: ../../note/system/_/chapters/system_architecture.md

====================

 ******** （応答時間）は、システムにデータを入力してからデータの応答が開始されるまでの時間。クライアントサーバシステムにおいては、クライアントが処理の要求をしてからサーバからのデータの到着が開始するまでの時間のことを ******** という。

Answer: レスポンスタイム

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

レスポンスタイム（ **** ）は、システムにデータを入力してからデータの応答が開始されるまでの時間。クライアントサーバシステムにおいては、クライアントが処理の要求をしてからサーバからのデータの到着が開始するまでの時間のことをレスポンスタイムという。

Answer: 応答時間

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 *********** （ラウンドトリップタイム、往復時間）は、システムにデータを入力してからデータの応答が完了するまでの時間。クライアントサーバシステムにおいては、クライアントが処理の要求をしてからサーバからのデータがすべて到着するまでの時間のことを *********** という。

Answer: ターンアラウンドタイム

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

ターンアラウンドタイム（ *********** 、往復時間）は、システムにデータを入力してからデータの応答が完了するまでの時間。クライアントサーバシステムにおいては、クライアントが処理の要求をしてからサーバからのデータがすべて到着するまでの時間のことをターンアラウンドタイムという。

Answer: ラウンドトリップタイム

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 *** （揺らぎ）は、ラウンドトリップタイムの分散。

Answer: ジッタ

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

ジッタ（ *** ）は、ラウンドトリップタイムの分散。

Answer: 揺らぎ

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 ***** は、ユーザがサーバにデータを要求してから実際にデータが転送され始めるまでの通信の遅延時間。 ***** が小さいほどユーザエクスペリエンスが向上する。ラウンドトリップタイムと同様の意味で用いられる。

Answer: レイテンシ

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 ****** は、単位時間あたりにシステムが処理できる処理数。

Answer: スループット

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 ****** は、目的の処理以外のところでかかる時間。

Answer: オーバヘッド

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 ****** は、システムの処理速度を計測するための指標で、特定のプログラムを実行したときの実行結果をもとに性能を比較する。TPC（Transaction Processing Performance Council: トランザクション処理性能評議会）が作成しているTPC-C(オンライントランザクション処理の ****** ）や、SPEC（Standard Performance Evaluation Corporation: 標準性能評価法人）が作成しているSPECfp（浮動小数点演算の評価）などが有名。

Answer: ベンチマーク

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

ベンチマークは、システムの処理速度を計測するための指標で、特定のプログラムを実行したときの実行結果をもとに性能を比較する。 *** （Transaction Processing Performance Council: トランザクション処理性能評議会）が作成している *** -C(オンライントランザクション処理のベンチマーク）や、SPEC（Standard Performance Evaluation Corporation: 標準性能評価法人）が作成しているSPECfp（浮動小数点演算の評価）などが有名。

Answer: TPC

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

ベンチマークは、システムの処理速度を計測するための指標で、特定のプログラムを実行したときの実行結果をもとに性能を比較する。TPC（Transaction Processing Performance Council: トランザクション処理性能評議会）が作成している ***** (オンライントランザクション処理のベンチマーク）や、SPEC（Standard Performance Evaluation Corporation: 標準性能評価法人）が作成しているSPECfp（浮動小数点演算の評価）などが有名。

Answer: TPC-C

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

ベンチマークは、システムの処理速度を計測するための指標で、特定のプログラムを実行したときの実行結果をもとに性能を比較する。TPC（Transaction Processing Performance Council: トランザクション処理性能評議会）が作成しているTPC-C(オンライントランザクション処理のベンチマーク）や、 **** （Standard Performance Evaluation Corporation: 標準性能評価法人）が作成している **** fp（浮動小数点演算の評価）などが有名。

Answer: SPEC

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

ベンチマークは、システムの処理速度を計測するための指標で、特定のプログラムを実行したときの実行結果をもとに性能を比較する。TPC（Transaction Processing Performance Council: トランザクション処理性能評議会）が作成しているTPC-C(オンライントランザクション処理のベンチマーク）や、SPEC（Standard Performance Evaluation Corporation: 標準性能評価法人）が作成している ****** （浮動小数点演算の評価）などが有名。

Answer: SPECfp

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 ************ は、システムに求められるサービスレベルから、システムに必要なリソースの処理能力や容量、数量などを見積もり、システム構成を計画すること。

Answer: キャパシティブランニング

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 ****** は、コンピュータ資源の利用状況や負荷状況。CPU利用率などで現行システムの測定を行い、ヒアリングなどで関係者の意見を聞くなどして見積もる。

Answer: ワークロード

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 ***** は、システムに必要な規模や性能を見極めて構成要素を用意する工程。サーバの台数やCPUの性能、ストレージの容量などを見積もる。

Answer: サイジング

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 ****** は、テスト環境などで、サイジングで用意したシステム構成要素が適切であるかどうかを評価し、必要に応じて拡張・縮小すること。ベンチマークを参考にして ****** する場合もある。

Answer: チューニング

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 *** (Reliability, Availability and Serviceability)、 *** IS(Reliability, Availability, Serviceability, Integrity, Security)はシステムの信頼性を総合的に評価する基準として用いられる概念。 *** は1970年代にIBMが製品の特性を表す用語として用いたのが定着したもので、 *** ISは日本ではよく使われるものの海外では一般的ではない。

Answer: RAS

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

RAS(Reliability, Availability and Serviceability)、 ***** (Reliability, Availability, Serviceability, Integrity, Security)はシステムの信頼性を総合的に評価する基準として用いられる概念。RASは1970年代にIBMが製品の特性を表す用語として用いたのが定着したもので、 ***** は日本ではよく使われるものの海外では一般的ではない。

Answer: RASIS

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 *** (Reliability)は、障害の発生のしにくさのことで、システムやサービスが使用できなくなる頻度やその間隔を表す指標。 *** はMTBFや故障率で表され、この数値が大きいほど *** の高いシステムであるといえる。

Answer: 信頼性

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 *** (Availability)は、システムやサービスが継続して稼働できる能力。システムの停止時間が少ないほど *** が高く、ユーザが利用したい時に利用できる確率が高い。信頼性や耐障害性が高いシステムは *** が高いといえる。 *** は稼働率で表される。

Answer: 可用性

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 *** (Serviceability)は、メンテナンスの容易さを表す概念。 *** はMTTRで表され、この数値が小さいほど *** が高いシステムであるといえる。 *** が高いほど可用性が高く保たれる。

Answer: 保守性

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 ******* (Integrity)は、情報が矛盾を起こさずに一貫性を保てる度合いを表す概念。データの処理や転送等に際して、目的となるデータが常に欠損なく存在することをデータのインテグリティという。データに対する正規化や制約が不十分でデータ間の関係に矛盾が生じたり、装置の障害やソフトウェアのバグによってデータが欠損したり、外部からの攻撃によってデータが改ざんされたりするとデータのインテグリティが損なわれる。

Answer: 完全性・保全性

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

完全性・保全性(Integrity)は、情報が矛盾を起こさずに一貫性を保てる度合いを表す概念。データの処理や転送等に際して、目的となるデータが常に欠損なく存在することをデータの ******* という。データに対する正規化や制約が不十分でデータ間の関係に矛盾が生じたり、装置の障害やソフトウェアのバグによってデータが欠損したり、外部からの攻撃によってデータが改ざんされたりするとデータの ******* が損なわれる。

Answer: インテグリティ

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 *** (Security)は情報の外部流失の起きにくさの度合いを表す概念。コンピュータやソフトウェアのデータ、通信路などを暗号化したり、アクセス制御を行うなどの対策によってセキュリティを向上させることができる。

Answer: 機密性

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 **** （平均故障間隔: Mean Time Between Failures）は、故障が復旧してから次の故障までにかかる時間の平均。 $ ****  = \frac{コンピュータが正常に稼働している時間の累計}{故障回数}$ で求めることができる。

Answer: MTBF

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

MTBF（ ****** : Mean Time Between Failures）は、故障が復旧してから次の故障までにかかる時間の平均。 $MTBF = \frac{コンピュータが正常に稼働している時間の累計}{故障回数}$ で求めることができる。

Answer: 平均故障間隔

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 **** （平均修復時間: Mean Time to Repair）は、故障したシステムが復旧にかかる時間の平均。 $ ****  = \frac{修理に要した時間の累計}{故障回数}$ で求めることができる。

Answer: MTTR

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

MTTR（ ****** : Mean Time to Repair）は、故障したシステムが復旧にかかる時間の平均。 $MTTR = \frac{修理に要した時間の累計}{故障回数}$ で求めることができる。

Answer: 平均修復時間

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 *** は、ある特定の時間にシステムが稼働している確率。 $ ***  = \frac{コンピュータが正常に稼働した時間の累計}{コンピュータ通電時間の累計} = \frac{MTBF}{MTBF + MTTR}$ で求めることができる。

Answer: 稼働率

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 *** は、稼働率の反対、もしくはある特定の時間にシステムが稼働していない確率。 $ ***  = 1 - 稼働率$ で求めることができ、この値を不稼働率とも呼ぶ。また、単位時間内にどの程度の確率で故障するかを指す場合の *** は、 $ ***  = \frac{1}{MTBF}$ で求めることができる。

Answer: 故障率

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

故障率は、稼働率の反対、もしくはある特定の時間にシステムが稼働していない確率。 $故障率 = 1 - 稼働率$ で求めることができ、この値を **** とも呼ぶ。また、単位時間内にどの程度の確率で故障するかを指す場合の故障率は、 $故障率 = \frac{1}{MTBF}$ で求めることができる。

Answer: 不稼働率

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 ******* は、サーバの性能を上げる方法のひとつで、サーバのハードウェアを物理的に性能の高いものに置き換えるという方法。CPUを高性能なものにしたり、メモリの容量を大きくしたりする。

Answer: スケールアップ

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 ******* は、サーバの性能を上げる方法のひとつで、サーバの数を増やすという方法。スケールアップと比べても大幅にサーバへの負荷を減らすことができる。

Answer: スケールアウト

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 ****** は、システムを構成するサーバの数を減らすことで、リソースの無駄を減らす方法。スケールアウトとは反対の操作となる。

Answer: スケールイン

Source: ../../note/system/_/chapters/system_performance_evaluation.md

====================

 **** は、データや情報を1か所にまとめてホストコンピュータで処理するシステムの形態。データの更新やセキュリティを一括で管理できる一方で、コンピュータがダウンするとシステム全体が機能しなくなってしまう。

Answer: 集中処理

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 ****** (Centralized System)は、処理形態として集中処理を用いるようなシステム。

Answer: 集中システム

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 ***** は、データを一定期間蓄積しておき、一括して処理する形態。データ量の多い処理に適している。

Answer: バッチ処理

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 ******** は、処理要求が発生してから即座に処理を行い、決められた時間までに完了する形態。

Answer: リアルタイム処理

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 ***** は、利用者とシステムがやり取りしながら処理を進めていく形態。速い応答が期待されるシステムなどで採用される場合が多く、プログラムの開発にも適している（対話型インタプリタ、対話型シェル）。

Answer: 対話型処理

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 ********** は、制御システムで刻々と変化する情報を元に即座に計算処理を行い、その結果を制御システムに出力する形態。制御結果をシステムにフィードバックして次の制御を決めるPID制御などが代表的。

Answer: リアルタイム制御処理

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 ********** （オンライン ********** 、OLTP）は、発生したデータを処理し、その都度確定しながら進めていく形態。一連の処理をまとめておき、その処理全体が成功するか失敗するかの2つの結果しか起こりえない。 ********** はACID特性を保証している必要がある。

Answer: トランザクション処理

Source: ../../note/system/_/chapters/system_processing_model.md

====================

トランザクション処理（ *************** 、OLTP）は、発生したデータを処理し、その都度確定しながら進めていく形態。一連の処理をまとめておき、その処理全体が成功するか失敗するかの2つの結果しか起こりえない。トランザクション処理はACID特性を保証している必要がある。

Answer: オンライントランザクション処理

Source: ../../note/system/_/chapters/system_processing_model.md

====================

トランザクション処理（オンライントランザクション処理、 **** ）は、発生したデータを処理し、その都度確定しながら進めていく形態。一連の処理をまとめておき、その処理全体が成功するか失敗するかの2つの結果しか起こりえない。トランザクション処理はACID特性を保証している必要がある。

Answer: OLTP

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 ****** (Atomicity, Consistency, Isolation, Durability)はトランザクション処理が保証するべき4つの性質を合わせた用語。

原始性・不可分性(Atomicity)はある操作がそれ以上細かい単位や要素に分割されない性質。原始性を持つ操作は、「実行される」か「実行されない」かのどちらかしか起きないことが保障されており、データベースのトランザクション（複数の操作をひとつにまとめ上げて管理すること）は原始性を持つ操作となっている。トランザクションは「全て成功」か「全て失敗」のいずれかとなることが保障されている。

一貫性・整合性(Consistency)はあるデータが更新された場合に必ず変更後の状態を取得できる性質。変更中のデータを別の操作により取得しようとした場合、古いデータが参照されることなく最新のデータが取得できることが保障される（強整合性）。トランザクションの前後ではデータの整合性が保たれ、矛盾が発生しないことが保障されている。

独立性・隔離性(Isolation)はある操作の処理中はその内容が他の操作から隠蔽される性質。独立性を持つ操作は別の処理が並行して実行されたとしても影響を受けないことが保障されており、データベースのトランザクションは独立性を持つ操作となっている。トランザクションを複数同時に実行しても、単独で実行した場合と同じ結果を得られることが保障されている。

永続性・持続性(Durability)は操作結果が失われない確率あるいは性質。数値としての永続性は、1からAFR（年間故障率）を引いた確率で表される。また、データベースのトランザクションは永続性を持つ操作となっており、トランザクションの結果は障害が発生しても失われてはいけない。トランザクションにおけるデータ操作はログに記録され、障害発生時にはログをもとに更新を反映させるといった対策が施される。

また強整合性と比較して用いられる結果整合性は、更新が反映されるまでに時間がかかる場合に保存前や変更前の状態が見える可能性がある性質のこと。一貫性を保とうとした場合、あるユーザが操作中のデータに他のユーザが一時的にアクセスできなくなるため、可用性を犠牲にすることとなる。強整合性が必要となるか結果整合性がとれていれば問題ないかはシステムや処理に応じて判断する必要がある。

Answer: ACID特性

Source: ../../note/system/_/chapters/system_processing_model.md

====================

ACID特性(Atomicity, Consistency, Isolation, Durability)はトランザクション処理が保証するべき4つの性質を合わせた用語。

 ******** (Atomicity)はある操作がそれ以上細かい単位や要素に分割されない性質。原始性を持つ操作は、「実行される」か「実行されない」かのどちらかしか起きないことが保障されており、データベースのトランザクション（複数の操作をひとつにまとめ上げて管理すること）は原始性を持つ操作となっている。トランザクションは「全て成功」か「全て失敗」のいずれかとなることが保障されている。

一貫性・整合性(Consistency)はあるデータが更新された場合に必ず変更後の状態を取得できる性質。変更中のデータを別の操作により取得しようとした場合、古いデータが参照されることなく最新のデータが取得できることが保障される（強整合性）。トランザクションの前後ではデータの整合性が保たれ、矛盾が発生しないことが保障されている。

独立性・隔離性(Isolation)はある操作の処理中はその内容が他の操作から隠蔽される性質。独立性を持つ操作は別の処理が並行して実行されたとしても影響を受けないことが保障されており、データベースのトランザクションは独立性を持つ操作となっている。トランザクションを複数同時に実行しても、単独で実行した場合と同じ結果を得られることが保障されている。

永続性・持続性(Durability)は操作結果が失われない確率あるいは性質。数値としての永続性は、1からAFR（年間故障率）を引いた確率で表される。また、データベースのトランザクションは永続性を持つ操作となっており、トランザクションの結果は障害が発生しても失われてはいけない。トランザクションにおけるデータ操作はログに記録され、障害発生時にはログをもとに更新を反映させるといった対策が施される。

また強整合性と比較して用いられる結果整合性は、更新が反映されるまでに時間がかかる場合に保存前や変更前の状態が見える可能性がある性質のこと。一貫性を保とうとした場合、あるユーザが操作中のデータに他のユーザが一時的にアクセスできなくなるため、可用性を犠牲にすることとなる。強整合性が必要となるか結果整合性がとれていれば問題ないかはシステムや処理に応じて判断する必要がある。

Answer: 原始性・不可分性

Source: ../../note/system/_/chapters/system_processing_model.md

====================

ACID特性(Atomicity, Consistency, Isolation, Durability)は ******** 処理が保証するべき4つの性質を合わせた用語。

原始性・不可分性(Atomicity)はある操作がそれ以上細かい単位や要素に分割されない性質。原始性を持つ操作は、「実行される」か「実行されない」かのどちらかしか起きないことが保障されており、データベースの ******** （複数の操作をひとつにまとめ上げて管理すること）は原始性を持つ操作となっている。 ******** は「全て成功」か「全て失敗」のいずれかとなることが保障されている。

一貫性・整合性(Consistency)はあるデータが更新された場合に必ず変更後の状態を取得できる性質。変更中のデータを別の操作により取得しようとした場合、古いデータが参照されることなく最新のデータが取得できることが保障される（強整合性）。 ******** の前後ではデータの整合性が保たれ、矛盾が発生しないことが保障されている。

独立性・隔離性(Isolation)はある操作の処理中はその内容が他の操作から隠蔽される性質。独立性を持つ操作は別の処理が並行して実行されたとしても影響を受けないことが保障されており、データベースの ******** は独立性を持つ操作となっている。 ******** を複数同時に実行しても、単独で実行した場合と同じ結果を得られることが保障されている。

永続性・持続性(Durability)は操作結果が失われない確率あるいは性質。数値としての永続性は、1からAFR（年間故障率）を引いた確率で表される。また、データベースの ******** は永続性を持つ操作となっており、 ******** の結果は障害が発生しても失われてはいけない。 ******** におけるデータ操作はログに記録され、障害発生時にはログをもとに更新を反映させるといった対策が施される。

また強整合性と比較して用いられる結果整合性は、更新が反映されるまでに時間がかかる場合に保存前や変更前の状態が見える可能性がある性質のこと。一貫性を保とうとした場合、あるユーザが操作中のデータに他のユーザが一時的にアクセスできなくなるため、可用性を犠牲にすることとなる。強整合性が必要となるか結果整合性がとれていれば問題ないかはシステムや処理に応じて判断する必要がある。

Answer: トランザクション

Source: ../../note/system/_/chapters/system_processing_model.md

====================

ACID特性(Atomicity, Consistency, Isolation, Durability)はトランザクション処理が保証するべき4つの性質を合わせた用語。

原始性・不可分性(Atomicity)はある操作がそれ以上細かい単位や要素に分割されない性質。原始性を持つ操作は、「実行される」か「実行されない」かのどちらかしか起きないことが保障されており、データベースのトランザクション（複数の操作をひとつにまとめ上げて管理すること）は原始性を持つ操作となっている。トランザクションは「全て成功」か「全て失敗」のいずれかとなることが保障されている。

 ******* (Consistency)はあるデータが更新された場合に必ず変更後の状態を取得できる性質。変更中のデータを別の操作により取得しようとした場合、古いデータが参照されることなく最新のデータが取得できることが保障される（強整合性）。トランザクションの前後ではデータの整合性が保たれ、矛盾が発生しないことが保障されている。

独立性・隔離性(Isolation)はある操作の処理中はその内容が他の操作から隠蔽される性質。独立性を持つ操作は別の処理が並行して実行されたとしても影響を受けないことが保障されており、データベースのトランザクションは独立性を持つ操作となっている。トランザクションを複数同時に実行しても、単独で実行した場合と同じ結果を得られることが保障されている。

永続性・持続性(Durability)は操作結果が失われない確率あるいは性質。数値としての永続性は、1からAFR（年間故障率）を引いた確率で表される。また、データベースのトランザクションは永続性を持つ操作となっており、トランザクションの結果は障害が発生しても失われてはいけない。トランザクションにおけるデータ操作はログに記録され、障害発生時にはログをもとに更新を反映させるといった対策が施される。

また強整合性と比較して用いられる結果整合性は、更新が反映されるまでに時間がかかる場合に保存前や変更前の状態が見える可能性がある性質のこと。一貫性を保とうとした場合、あるユーザが操作中のデータに他のユーザが一時的にアクセスできなくなるため、可用性を犠牲にすることとなる。強整合性が必要となるか結果整合性がとれていれば問題ないかはシステムや処理に応じて判断する必要がある。

Answer: 一貫性・整合性

Source: ../../note/system/_/chapters/system_processing_model.md

====================

ACID特性(Atomicity, Consistency, Isolation, Durability)はトランザクション処理が保証するべき4つの性質を合わせた用語。

原始性・不可分性(Atomicity)はある操作がそれ以上細かい単位や要素に分割されない性質。原始性を持つ操作は、「実行される」か「実行されない」かのどちらかしか起きないことが保障されており、データベースのトランザクション（複数の操作をひとつにまとめ上げて管理すること）は原始性を持つ操作となっている。トランザクションは「全て成功」か「全て失敗」のいずれかとなることが保障されている。

一貫性・整合性(Consistency)はあるデータが更新された場合に必ず変更後の状態を取得できる性質。変更中のデータを別の操作により取得しようとした場合、古いデータが参照されることなく最新のデータが取得できることが保障される（ **** ）。トランザクションの前後ではデータの整合性が保たれ、矛盾が発生しないことが保障されている。

独立性・隔離性(Isolation)はある操作の処理中はその内容が他の操作から隠蔽される性質。独立性を持つ操作は別の処理が並行して実行されたとしても影響を受けないことが保障されており、データベースのトランザクションは独立性を持つ操作となっている。トランザクションを複数同時に実行しても、単独で実行した場合と同じ結果を得られることが保障されている。

永続性・持続性(Durability)は操作結果が失われない確率あるいは性質。数値としての永続性は、1からAFR（年間故障率）を引いた確率で表される。また、データベースのトランザクションは永続性を持つ操作となっており、トランザクションの結果は障害が発生しても失われてはいけない。トランザクションにおけるデータ操作はログに記録され、障害発生時にはログをもとに更新を反映させるといった対策が施される。

また **** と比較して用いられる結果整合性は、更新が反映されるまでに時間がかかる場合に保存前や変更前の状態が見える可能性がある性質のこと。一貫性を保とうとした場合、あるユーザが操作中のデータに他のユーザが一時的にアクセスできなくなるため、可用性を犠牲にすることとなる。 **** が必要となるか結果整合性がとれていれば問題ないかはシステムや処理に応じて判断する必要がある。

Answer: 強整合性

Source: ../../note/system/_/chapters/system_processing_model.md

====================

ACID特性(Atomicity, Consistency, Isolation, Durability)はトランザクション処理が保証するべき4つの性質を合わせた用語。

原始性・不可分性(Atomicity)はある操作がそれ以上細かい単位や要素に分割されない性質。原始性を持つ操作は、「実行される」か「実行されない」かのどちらかしか起きないことが保障されており、データベースのトランザクション（複数の操作をひとつにまとめ上げて管理すること）は原始性を持つ操作となっている。トランザクションは「全て成功」か「全て失敗」のいずれかとなることが保障されている。

一貫性・整合性(Consistency)はあるデータが更新された場合に必ず変更後の状態を取得できる性質。変更中のデータを別の操作により取得しようとした場合、古いデータが参照されることなく最新のデータが取得できることが保障される（強整合性）。トランザクションの前後ではデータの整合性が保たれ、矛盾が発生しないことが保障されている。

 ******* (Isolation)はある操作の処理中はその内容が他の操作から隠蔽される性質。独立性を持つ操作は別の処理が並行して実行されたとしても影響を受けないことが保障されており、データベースのトランザクションは独立性を持つ操作となっている。トランザクションを複数同時に実行しても、単独で実行した場合と同じ結果を得られることが保障されている。

永続性・持続性(Durability)は操作結果が失われない確率あるいは性質。数値としての永続性は、1からAFR（年間故障率）を引いた確率で表される。また、データベースのトランザクションは永続性を持つ操作となっており、トランザクションの結果は障害が発生しても失われてはいけない。トランザクションにおけるデータ操作はログに記録され、障害発生時にはログをもとに更新を反映させるといった対策が施される。

また強整合性と比較して用いられる結果整合性は、更新が反映されるまでに時間がかかる場合に保存前や変更前の状態が見える可能性がある性質のこと。一貫性を保とうとした場合、あるユーザが操作中のデータに他のユーザが一時的にアクセスできなくなるため、可用性を犠牲にすることとなる。強整合性が必要となるか結果整合性がとれていれば問題ないかはシステムや処理に応じて判断する必要がある。

Answer: 独立性・隔離性

Source: ../../note/system/_/chapters/system_processing_model.md

====================

ACID特性(Atomicity, Consistency, Isolation, Durability)はトランザクション処理が保証するべき4つの性質を合わせた用語。

原始性・不可分性(Atomicity)はある操作がそれ以上細かい単位や要素に分割されない性質。原始性を持つ操作は、「実行される」か「実行されない」かのどちらかしか起きないことが保障されており、データベースのトランザクション（複数の操作をひとつにまとめ上げて管理すること）は原始性を持つ操作となっている。トランザクションは「全て成功」か「全て失敗」のいずれかとなることが保障されている。

一貫性・整合性(Consistency)はあるデータが更新された場合に必ず変更後の状態を取得できる性質。変更中のデータを別の操作により取得しようとした場合、古いデータが参照されることなく最新のデータが取得できることが保障される（強整合性）。トランザクションの前後ではデータの整合性が保たれ、矛盾が発生しないことが保障されている。

独立性・隔離性(Isolation)はある操作の処理中はその内容が他の操作から隠蔽される性質。独立性を持つ操作は別の処理が並行して実行されたとしても影響を受けないことが保障されており、データベースのトランザクションは独立性を持つ操作となっている。トランザクションを複数同時に実行しても、単独で実行した場合と同じ結果を得られることが保障されている。

 ******* (Durability)は操作結果が失われない確率あるいは性質。数値としての永続性は、1からAFR（年間故障率）を引いた確率で表される。また、データベースのトランザクションは永続性を持つ操作となっており、トランザクションの結果は障害が発生しても失われてはいけない。トランザクションにおけるデータ操作はログに記録され、障害発生時にはログをもとに更新を反映させるといった対策が施される。

また強整合性と比較して用いられる結果整合性は、更新が反映されるまでに時間がかかる場合に保存前や変更前の状態が見える可能性がある性質のこと。一貫性を保とうとした場合、あるユーザが操作中のデータに他のユーザが一時的にアクセスできなくなるため、可用性を犠牲にすることとなる。強整合性が必要となるか結果整合性がとれていれば問題ないかはシステムや処理に応じて判断する必要がある。

Answer: 永続性・持続性

Source: ../../note/system/_/chapters/system_processing_model.md

====================

ACID特性(Atomicity, Consistency, Isolation, Durability)はトランザクション処理が保証するべき4つの性質を合わせた用語。

原始性・不可分性(Atomicity)はある操作がそれ以上細かい単位や要素に分割されない性質。原始性を持つ操作は、「実行される」か「実行されない」かのどちらかしか起きないことが保障されており、データベースのトランザクション（複数の操作をひとつにまとめ上げて管理すること）は原始性を持つ操作となっている。トランザクションは「全て成功」か「全て失敗」のいずれかとなることが保障されている。

一貫性・整合性(Consistency)はあるデータが更新された場合に必ず変更後の状態を取得できる性質。変更中のデータを別の操作により取得しようとした場合、古いデータが参照されることなく最新のデータが取得できることが保障される（強整合性）。トランザクションの前後ではデータの整合性が保たれ、矛盾が発生しないことが保障されている。

独立性・隔離性(Isolation)はある操作の処理中はその内容が他の操作から隠蔽される性質。独立性を持つ操作は別の処理が並行して実行されたとしても影響を受けないことが保障されており、データベースのトランザクションは独立性を持つ操作となっている。トランザクションを複数同時に実行しても、単独で実行した場合と同じ結果を得られることが保障されている。

永続性・持続性(Durability)は操作結果が失われない確率あるいは性質。数値としての永続性は、1から *** （年間故障率）を引いた確率で表される。また、データベースのトランザクションは永続性を持つ操作となっており、トランザクションの結果は障害が発生しても失われてはいけない。トランザクションにおけるデータ操作はログに記録され、障害発生時にはログをもとに更新を反映させるといった対策が施される。

また強整合性と比較して用いられる結果整合性は、更新が反映されるまでに時間がかかる場合に保存前や変更前の状態が見える可能性がある性質のこと。一貫性を保とうとした場合、あるユーザが操作中のデータに他のユーザが一時的にアクセスできなくなるため、可用性を犠牲にすることとなる。強整合性が必要となるか結果整合性がとれていれば問題ないかはシステムや処理に応じて判断する必要がある。

Answer: AFR

Source: ../../note/system/_/chapters/system_processing_model.md

====================

ACID特性(Atomicity, Consistency, Isolation, Durability)はトランザクション処理が保証するべき4つの性質を合わせた用語。

原始性・不可分性(Atomicity)はある操作がそれ以上細かい単位や要素に分割されない性質。原始性を持つ操作は、「実行される」か「実行されない」かのどちらかしか起きないことが保障されており、データベースのトランザクション（複数の操作をひとつにまとめ上げて管理すること）は原始性を持つ操作となっている。トランザクションは「全て成功」か「全て失敗」のいずれかとなることが保障されている。

一貫性・整合性(Consistency)はあるデータが更新された場合に必ず変更後の状態を取得できる性質。変更中のデータを別の操作により取得しようとした場合、古いデータが参照されることなく最新のデータが取得できることが保障される（強整合性）。トランザクションの前後ではデータの整合性が保たれ、矛盾が発生しないことが保障されている。

独立性・隔離性(Isolation)はある操作の処理中はその内容が他の操作から隠蔽される性質。独立性を持つ操作は別の処理が並行して実行されたとしても影響を受けないことが保障されており、データベースのトランザクションは独立性を持つ操作となっている。トランザクションを複数同時に実行しても、単独で実行した場合と同じ結果を得られることが保障されている。

永続性・持続性(Durability)は操作結果が失われない確率あるいは性質。数値としての永続性は、1からAFR（年間故障率）を引いた確率で表される。また、データベースのトランザクションは永続性を持つ操作となっており、トランザクションの結果は障害が発生しても失われてはいけない。トランザクションにおけるデータ操作はログに記録され、障害発生時にはログをもとに更新を反映させるといった対策が施される。

また強整合性と比較して用いられる ***** は、更新が反映されるまでに時間がかかる場合に保存前や変更前の状態が見える可能性がある性質のこと。一貫性を保とうとした場合、あるユーザが操作中のデータに他のユーザが一時的にアクセスできなくなるため、可用性を犠牲にすることとなる。強整合性が必要となるか ***** がとれていれば問題ないかはシステムや処理に応じて判断する必要がある。

Answer: 結果整合性

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 **** は、複数のコンピュータをネットワークで接続し、処理能力や資源を共有しあって効率の良い処理を実現する処理形態。1台のコンピュータが停止してもシステムへの影響が少なく、拡張性も高い。また、システムの利用者が場所を選ばずに機能にアクセスできるという利点もあり、このような性質をアクセス透過性という。一方で、データの不整合が発生してしまったり、保守が複雑になるといったデメリットもある。

Answer: 分散処理

Source: ../../note/system/_/chapters/system_processing_model.md

====================

分散処理は、複数のコンピュータをネットワークで接続し、処理能力や資源を共有しあって効率の良い処理を実現する処理形態。1台のコンピュータが停止してもシステムへの影響が少なく、拡張性も高い。また、システムの利用者が場所を選ばずに機能にアクセスできるという利点もあり、このような性質を ******* という。一方で、データの不整合が発生してしまったり、保守が複雑になるといったデメリットもある。

Answer: アクセス透過性

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 ****** (Distributed System)は、処理形態として分散処理を用いるようなシステム。

Answer: 分散システム

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 *** （遠隔手続き呼び出し: Remote Procedure Call）は、ネットワークによって繋がれた他のコンピュータ上のプログラムを実行する仕組みで、分散処理実行の基盤となる。

有名な *** システムとしては、Sun MicrosystemsのSun *** (ONC  *** )やアポロ、IBMとDECが共同開発したDCE(Distributed Computing Environment)がある。

Answer: RPC

Source: ../../note/system/_/chapters/system_processing_model.md

====================

RPC（ ********* : Remote Procedure Call）は、ネットワークによって繋がれた他のコンピュータ上のプログラムを実行する仕組みで、分散処理実行の基盤となる。

有名なRPCシステムとしては、Sun MicrosystemsのSunRPC(ONC RPC)やアポロ、IBMとDECが共同開発したDCE(Distributed Computing Environment)がある。

Answer: 遠隔手続き呼び出し

Source: ../../note/system/_/chapters/system_processing_model.md

====================

RPC（遠隔手続き呼び出し: Remote Procedure Call）は、ネットワークによって繋がれた他のコンピュータ上のプログラムを実行する仕組みで、分散処理実行の基盤となる。

有名なRPCシステムとしては、Sun Microsystemsの ****** (ONC RPC)やアポロ、IBMとDECが共同開発したDCE(Distributed Computing Environment)がある。

Answer: SunRPC

Source: ../../note/system/_/chapters/system_processing_model.md

====================

RPC（遠隔手続き呼び出し: Remote Procedure Call）は、ネットワークによって繋がれた他のコンピュータ上のプログラムを実行する仕組みで、分散処理実行の基盤となる。

有名なRPCシステムとしては、Sun MicrosystemsのSunRPC(ONC RPC)や *** 、IBMとDECが共同開発したDCE(Distributed Computing Environment)がある。

Answer: アポロ

Source: ../../note/system/_/chapters/system_processing_model.md

====================

RPC（遠隔手続き呼び出し: Remote Procedure Call）は、ネットワークによって繋がれた他のコンピュータ上のプログラムを実行する仕組みで、分散処理実行の基盤となる。

有名なRPCシステムとしては、Sun MicrosystemsのSunRPC(ONC RPC)やアポロ、IBMとDECが共同開発した *** (Distributed Computing Environment)がある。

Answer: DCE

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 ******** (Distributed Object)は、RPCのような単なる関数の呼び出しではなく、オブジェクト自体をリモートに配置する技術。

代表的な ******** には、CORBA(Common Object Request Broker Architecture)やMicrosoftが開発したDCOM(Distributed Component Object Model)がある。これらは、IDL(Interface Definition Language)によってオブジェクトメソッドを定義し、ネットワーク越しにシリアライズしたメッセージを交換する仕組みであった。

Answer: 分散オブジェクト

Source: ../../note/system/_/chapters/system_processing_model.md

====================

分散オブジェクト(Distributed Object)は、RPCのような単なる関数の呼び出しではなく、オブジェクト自体をリモートに配置する技術。

代表的な分散オブジェクトには、 ***** (Common Object Request Broker Architecture)やMicrosoftが開発したDCOM(Distributed Component Object Model)がある。これらは、IDL(Interface Definition Language)によってオブジェクトメソッドを定義し、ネットワーク越しにシリアライズしたメッセージを交換する仕組みであった。

Answer: CORBA

Source: ../../note/system/_/chapters/system_processing_model.md

====================

分散オブジェクト(Distributed Object)は、RPCのような単なる関数の呼び出しではなく、オブジェクト自体をリモートに配置する技術。

代表的な分散オブジェクトには、CORBA(Common Object Request Broker Architecture)やMicrosoftが開発した **** (Distributed Component Object Model)がある。これらは、IDL(Interface Definition Language)によってオブジェクトメソッドを定義し、ネットワーク越しにシリアライズしたメッセージを交換する仕組みであった。

Answer: DCOM

Source: ../../note/system/_/chapters/system_processing_model.md

====================

分散オブジェクト(Distributed Object)は、RPCのような単なる関数の呼び出しではなく、オブジェクト自体をリモートに配置する技術。

代表的な分散オブジェクトには、CORBA(Common Object Request Broker Architecture)やMicrosoftが開発したDCOM(Distributed Component Object Model)がある。これらは、 *** (Interface Definition Language)によってオブジェクトメソッドを定義し、ネットワーク越しにシリアライズしたメッセージを交換する仕組みであった。

Answer: IDL

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 ************* は、同じ機材などを複数用意して、処理を振り分けることで負荷を分散する処理形態。

Answer: ロードシェアリングシステム

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 *** （ピアツーピア: peer to peer）は、コンピュータ同士の接続形態のひとつで、処理が集中しないよう特定のサーバを置かず、上下関係も持たない。単純に接続するピュア型や、検索用のサーバを置くハイブリット型、処理の高いノードが検索と管理を担うスーパーノード型がある。

Answer: P2P

Source: ../../note/system/_/chapters/system_processing_model.md

====================

P2P（ ****** : peer to peer）は、コンピュータ同士の接続形態のひとつで、処理が集中しないよう特定のサーバを置かず、上下関係も持たない。単純に接続するピュア型や、検索用のサーバを置くハイブリット型、処理の高いノードが検索と管理を担うスーパーノード型がある。

Answer: ピアツーピア

Source: ../../note/system/_/chapters/system_processing_model.md

====================

P2P（ピアツーピア: peer to peer）は、コンピュータ同士の接続形態のひとつで、処理が集中しないよう特定のサーバを置かず、上下関係も持たない。単純に接続する **** や、検索用のサーバを置くハイブリット型、処理の高いノードが検索と管理を担うスーパーノード型がある。

Answer: ピュア型

Source: ../../note/system/_/chapters/system_processing_model.md

====================

P2P（ピアツーピア: peer to peer）は、コンピュータ同士の接続形態のひとつで、処理が集中しないよう特定のサーバを置かず、上下関係も持たない。単純に接続するピュア型や、検索用のサーバを置く ******* 、処理の高いノードが検索と管理を担うスーパーノード型がある。

Answer: ハイブリット型

Source: ../../note/system/_/chapters/system_processing_model.md

====================

P2P（ピアツーピア: peer to peer）は、コンピュータ同士の接続形態のひとつで、処理が集中しないよう特定のサーバを置かず、上下関係も持たない。単純に接続するピュア型や、検索用のサーバを置くハイブリット型、処理の高いノードが検索と管理を担う ******** がある。

Answer: スーパーノード型

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 ************* は、サービスを提供するサーバと、サービスを要求するクライアントで役割を分担するシステムの形態。クライアントとサーバで負荷を分散できるほか、互いの実装が独立しているため、クライアントをマルチプラットフォームにしたり、サーバの実装に用いるプログラミング言語を自由に選択できるといった利点がある。

サーバに対してクライアントの数が多くなるため、サーバの負荷を減らす工夫が必要となる。

Answer: クライアントサーバシステム

Source: ../../note/system/_/chapters/system_processing_model.md

====================

クライアント *** システムは、サービスを提供する *** と、サービスを要求するクライアントで役割を分担するシステムの形態。クライアントと *** で負荷を分散できるほか、互いの実装が独立しているため、クライアントをマルチプラットフォームにしたり、 *** の実装に用いるプログラミング言語を自由に選択できるといった利点がある。

 *** に対してクライアントの数が多くなるため、 *** の負荷を減らす工夫が必要となる。

Answer: サーバ

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 ****** サーバシステムは、サービスを提供するサーバと、サービスを要求する ****** で役割を分担するシステムの形態。 ****** とサーバで負荷を分散できるほか、互いの実装が独立しているため、 ****** をマルチプラットフォームにしたり、サーバの実装に用いるプログラミング言語を自由に選択できるといった利点がある。

サーバに対して ****** の数が多くなるため、サーバの負荷を減らす工夫が必要となる。

Answer: クライアント

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 ***** は、クライアントサーバシステムにおいて、クライアントがサーバに対して行うサービスの要求通信。

Answer: リクエスト

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 ***** は、クライアントサーバシステムにおいて、サーバがクライアントのリクエストを受けてサービスを提供する応答通信。

Answer: レスポンス

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 *************** は、クライアントがユーザインタフェースとデータの加工処理を行い、サーバはデータベースへのアクセスのみを行うようなクライアントサーバシステム。サービスを要求するクライアントと依頼された処理を提供するサーバとの組み合わせからなる構成。

Answer: 2層クライアントサーバシステム

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 *************** は、ユーザインタフェース（プレゼンテーション層）、データの加工処理（ファンクション層）、データベースへのアクセス（データベース層）、という3つのレイヤで構成されたクライアントサーバシステム。それぞれの役割はクライアント、アプリケーションサーバ、データベース管理システムが担う。

• プレゼンテーション層（クライアント側）: ユーザからの入力を受け取り、サーバから受け取った情報を提供する
• ファンクション層（サーバ側）: データの加工や取得、その他システムに必要な処理を行う
• データベース層（サーバ側）: データベースにアクセスし、データを管理する

Answer: 3層クライアントサーバシステム

Source: ../../note/system/_/chapters/system_processing_model.md

====================

3層クライアントサーバシステムは、ユーザインタフェース（ ********** ）、データの加工処理（ファンクション層）、データベースへのアクセス（データベース層）、という3つのレイヤで構成されたクライアントサーバシステム。それぞれの役割はクライアント、アプリケーションサーバ、データベース管理システムが担う。

•  ********** （クライアント側）: ユーザからの入力を受け取り、サーバから受け取った情報を提供する
• ファンクション層（サーバ側）: データの加工や取得、その他システムに必要な処理を行う
• データベース層（サーバ側）: データベースにアクセスし、データを管理する

Answer: プレゼンテーション層

Source: ../../note/system/_/chapters/system_processing_model.md

====================

3層クライアントサーバシステムは、ユーザインタフェース（プレゼンテーション層）、データの加工処理（ ******** ）、データベースへのアクセス（データベース層）、という3つのレイヤで構成されたクライアントサーバシステム。それぞれの役割はクライアント、アプリケーションサーバ、データベース管理システムが担う。

• プレゼンテーション層（クライアント側）: ユーザからの入力を受け取り、サーバから受け取った情報を提供する
•  ******** （サーバ側）: データの加工や取得、その他システムに必要な処理を行う
• データベース層（サーバ側）: データベースにアクセスし、データを管理する

Answer: ファンクション層

Source: ../../note/system/_/chapters/system_processing_model.md

====================

3層クライアントサーバシステムは、ユーザインタフェース（プレゼンテーション層）、データの加工処理（ファンクション層）、データベースへのアクセス（ ******* ）、という3つのレイヤで構成されたクライアントサーバシステム。それぞれの役割はクライアント、アプリケーションサーバ、データベース管理システムが担う。

• プレゼンテーション層（クライアント側）: ユーザからの入力を受け取り、サーバから受け取った情報を提供する
• ファンクション層（サーバ側）: データの加工や取得、その他システムに必要な処理を行う
•  ******* （サーバ側）: データベースにアクセスし、データを管理する

Answer: データベース層

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 ********** は、データベースに対する一連の処理の流れを1つのプログラムにまとめておき（プロシージャ）、それをデータベース管理システムに保存したもの。複雑なSQL文の呼び出しを簡易化することができる。

Answer: ストアドプロシージャ

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 ************ は、クライアント側のコンピュータに最低限の機能のみを持たせ、実際の処理やデータの蓄積をサーバ側で行うシステム。クライアント側にデータを残さないことで情報漏洩を防ぐことができる。ただし、ネットワークに接続できない環境においては全く機能しないという欠点もある。

Answer: シンクライアントシステム

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 ******* は、分散処理のシステムにおいて、リクエストを複数のサーバに均等に分散するための装置やソフトウェア。主な役割は、ネットワーク上でトラフィックを分散してサーバへの負荷の分散、サーバが障害などにより応答できなくなった場合のフェールオーバ、新しいサーバを追加することによるスケーラビリティの確保などがある。

ラウンドロビンDNSを用いた負荷分散とは異なり、 ******* は自身がグローバルIPアドレスを持ってWebサーバのように振る舞うため、各サーバに個別のグローバルIPアドレスを割り当てる必要がない。また、クライアントからのリクエストを毎回受け取って本物のサーバへ中継することで、リアルタイムにヘルスチェックの結果を反映することができる。

 ******* には、トランスポート層で負荷分散を行うものと、アプリケーション層で負荷分散を行うものがある。前者はクライアントと実サーバの間でTCPのコネクションが確立されるが、後者はクライアントと ******* 、 ******* と実サーバの両方でTCPコネクションが発生する。ただし、アプリケーション層の ******* はアクセスされたURLを見て接続先のサーバを切り替えるといった柔軟な処理が可能となる。

Answer: ロードバランサ

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 **** は、分散処理のシステムにおいて、処理を行うコンピュータを複数用意してその負荷を分散することで、システムの可用性を向上させる方法。 **** のためには、ロードバランサなどのツールを使用する。

Answer: 負荷分散

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 **** (Distributed Replicated Block Device)は、ネットワークを通じてハードディスクをリアルタイムに同期するソフトウェア。RAID1のような構成を、デバイス自体を分離した状態で構築することができる。

Answer: DRBD

Source: ../../note/system/_/chapters/system_processing_model.md

====================

 ****** は、インターネットやデジタル機器を絡めた手口で、システムの破壊や情報の改ざん、窃取などをする行為。 ****** は、ネットワークやコンピュータ、ソフトウェア、データなどの様々なレベルで実行される。

Answer: サイバー攻撃

Source: ../../note/system/security/_/chapters/cyber_attack.md

====================

 **** （クラッカー）は、コンピュータシステムやネットワークに対して、技術的な知識やスキルを駆使して不正な行為を行う攻撃者。 **** はセキュリティの脆弱性を研究し、これを悪用して攻撃を行う。一方で、セキュリティ向上のために善意で活動する **** （ホワイト **** ）も存在する。

Answer: ハッカー

Source: ../../note/system/security/_/chapters/cyber_attack.md

====================

ハッカー（ ***** ）は、コンピュータシステムやネットワークに対して、技術的な知識やスキルを駆使して不正な行為を行う攻撃者。ハッカーはセキュリティの脆弱性を研究し、これを悪用して攻撃を行う。一方で、セキュリティ向上のために善意で活動するハッカー（ホワイトハッカー）も存在する。

Answer: クラッカー

Source: ../../note/system/security/_/chapters/cyber_attack.md

