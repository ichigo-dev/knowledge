====================

 ****** は、ある一定の時間が経過しても、受信ホストから確認応答が返ってこずに、接続の確立に失敗するエラー。 ****** が発生した場合、送信ホストはデータが喪失したと判断して再送処理を行う。確認応答の到着を待つ時間を再送 ****** 時間という。再送 ****** 時間を決めるため、パケットを送信する度に通信のラウンドトリップタイムとジッタを計算する。

Answer: タイムアウト

Source: ../../note/network/_/chapters/transport_layer.md

====================

タイムアウトは、ある一定の時間が経過しても、受信ホストから確認応答が返ってこずに、接続の確立に失敗するエラー。タイムアウトが発生した場合、送信ホストはデータが喪失したと判断して再送処理を行う。確認応答の到着を待つ時間を ********** という。 ********** を決めるため、パケットを送信する度に通信のラウンドトリップタイムとジッタを計算する。

Answer: 再送タイムアウト時間

Source: ../../note/network/_/chapters/transport_layer.md

====================

 *** (User Datagram Protocol)は、コネクションレス型で信頼性のないプロトコル。高速性やリアルタイム性を重視する通信や同報通信を行いたい場合に利用する。

• 総パケットが少ない通信（DNS、SNMPなど）
• 動画や音声などのマルチメディア通信（即時性が必要な通信）
• LANなどの特定のネットワークに限定したアプリケーションの通信
• 同報性が必要な通信（ブロードキャスト、マルチキャスト）

Answer: UDP

Source: ../../note/network/_/chapters/transport_layer.md

====================

 **** は、TCPやUDPを利用して通信を行うために広く使われているAPI。アプリケーションは **** を利用して、通信相手のIPアドレスやポート番号の設定、データの送受信の要求を行う。

Answer: ソケット

Source: ../../note/network/_/chapters/transport_layer.md

====================

 *** （Maximum Segment Size: 最大セグメント長）は、TCPパケットにおけるペイロード（TCPヘッダは含まない）の最大長。 *** は、コネクション確立時に決定される。

Answer: MSS

Source: ../../note/network/_/chapters/transport_layer.md

====================

MSS（Maximum Segment Size:  ******** ）は、TCPパケットにおけるペイロード（TCPヘッダは含まない）の最大長。MSSは、コネクション確立時に決定される。

Answer: 最大セグメント長

Source: ../../note/network/_/chapters/transport_layer.md

====================

 ***** は、TCPにおけるデータ転送を ***** 制御によって行うときの、データ転送の単位。複数のセグメントをひとつにまとめたもの。

Answer: ウィンドウ

Source: ../../note/network/_/chapters/transport_layer.md

====================

 ******** は、TCPにおけるデータ転送をウィンドウ制御によって行うときに用いられる、ウィンドウの大きさ。

Answer: ウィンドウサイズ

Source: ../../note/network/_/chapters/transport_layer.md

====================

 ******* は、TCPにおいて効率よくパケットを伝送するための仕組み。複数のセグメントをまとめたウィンドウを送信することで、毎回確認応答を待たずに連続したデータを送信できる。

Answer: ウィンドウ制御

Source: ../../note/network/_/chapters/transport_layer.md

====================

 ************ は、確認応答を受け取った分だけウィンドウをずらして、次々とデータを転送していく方法。ウィンドウ制御では複数のセグメントに対してまとめて確認応答をしているが、 ************ では全てのセグメントに対して確認応答が行われるため、信頼性を損なわない。

Answer: スライディングウィンドウ

Source: ../../note/network/_/chapters/transport_layer.md

====================

 ***** は、受信側の受信能力に合わせてパケット送信量を制御する方式。

受信ホストは、受信可能なバッファサイズをTCPヘッダのフィールドに入れて送信ホストに送る。このフィールドの値が大きいほどスループットが大きく、高い効率での通信が可能になる。

受信ホストはバッファがいっぱいになると、送信ホストに対してデータの送信停止を要求する。停止したデータのやり取りを再開するために、送信ホストはウィンドウプローブと呼ばれるセグメントを時々送信する。

Answer: フロー制御

Source: ../../note/network/_/chapters/transport_layer.md

====================

 ********* は、一時停止したデータ送信を再開するため、受信ホストのバッファに空きがあるかを確認するセグメント。

Answer: ウィンドウプローブ

Source: ../../note/network/_/chapters/transport_layer.md

====================

 ****** は、ネットワークが混雑することを防ぐための制御。

Answer: ふくそう制御

Source: ../../note/network/_/chapters/transport_layer.md

====================

 **** は、連続的にパケットが送信されることによって、トラフィックが混雑し、ふくそう状態となる現象。

Answer: バースト

Source: ../../note/network/_/chapters/transport_layer.md

====================

 ******* は、TCPにおいて、通信開始時は送信量を抑えておき、徐々に増やしていく方式。送信側でデータの送信量を調整するためのふくそうウィンドウを定義しておき、最初はこのウィンドウの大きさを1セグメントに設定しておく。確認応答されるたびに1セグメントずつウィンドウを大きくしていき、タイムアウトが発生した際には、ふくそうウィンドウを1にして再度 ******* をやり直す。

Answer: スロースタート

Source: ../../note/network/_/chapters/transport_layer.md

====================

スロースタートは、TCPにおいて、通信開始時は送信量を抑えておき、徐々に増やしていく方式。送信側でデータの送信量を調整するための ********* を定義しておき、最初はこのウィンドウの大きさを1セグメントに設定しておく。確認応答されるたびに1セグメントずつウィンドウを大きくしていき、タイムアウトが発生した際には、 ********* を1にして再度スロースタートをやり直す。

Answer: ふくそうウィンドウ

Source: ../../note/network/_/chapters/transport_layer.md

====================

 *********** は、ネットワークの利用効率を高めるためにTCPで用いられているアルゴリズム。その瞬間に送信側に送信すべきデータがあったとしても、そのデータが少ない場合にはすぐに送信せずに遅延させる。通信が遅延してほしくないような場合には、このアルゴリズムを無効にする。

Answer: Nagleアルゴリズム

Source: ../../note/network/_/chapters/transport_layer.md

====================

 ************** (SWS: Silly Window Syndrome)は、データを受信したホストが即座に確認応答をすることで、次々にデータを受信してしまい、バッファがいっぱいになる現象。

Answer: シリーウィンドウシンドローム

Source: ../../note/network/_/chapters/transport_layer.md

====================

 ****** は、シリーウィンドウシンドロームを防ぐため、確認応答のタイミングを遅延させる方法。

Answer: 遅延確認応答

Source: ../../note/network/_/chapters/transport_layer.md

====================

 ****** は、確認応答とレスポンスのデータパケットを1つのパケットとして送る方法。

Answer: ピギーバック

Source: ../../note/network/_/chapters/transport_layer.md

====================

 **** (Quick UDP Internet Connection)は、Googleによって提案され、標準化が進められているプロトコル。TCPには暗号化の機能はないが、 **** はそれ自体で暗号化通信を可能にする。

 **** はUDPを使用するため、UDPと **** を合わせてトランスポートプロトコルの役割を果たす。 **** の特徴は次の通り。

• 認証、暗号化
• 低遅延のコネクション管理
• 多重化（1コネクションで複数のストリームを同時に扱う）
• 高精度な再送処理
• コネクションのマイグレーション（IPアドレスが変わってもコネクションを維持する）

TCPではコネクションの確立だけで3回（スリーウェイハンドシェイク）、TLSによる通信の暗号化を行う場合は7回のパケットのやり取りが必要であったが、 **** では1回のパケットのやり取りで実現できる。

Answer: QUIC

Source: ../../note/network/_/chapters/transport_layer.md

====================

 **** (Stream Control Transmission Protocol)は、TCPと同様、データの到達に関する信頼性を提供するプロトコル。マルチホーミング機能をサポートしている。

Answer: SCTP

Source: ../../note/network/_/chapters/transport_layer.md

====================

 ********** は、複数のNICがついているホストで、NICが変わっても通信が継続できる機能。

Answer: マルチホーミング機能

Source: ../../note/network/_/chapters/transport_layer.md

====================

 **** (Datagram Congestion Control Protocol)は、UDPを補うプロトコルで、データの到達性に関する信頼性はないものの、コネクション型でコネクションの確立と切断に関する信頼性を持つ。

Answer: DCCP

Source: ../../note/network/_/chapters/transport_layer.md

====================

 ******** (Lightweight UDP)は、UDPとほぼ同じ機能を提供するプロトコル。

UDPでは、チェックサムによりエラーを検知するとパケット全体が破棄される。 ******** では、チェックサムを計算する範囲をアプリケーションが決めることができる。

Answer: UDP-Lite

Source: ../../note/network/_/chapters/transport_layer.md

====================

 *** は、TCP/IPのアプリケーションレイヤのシステムで、インターネット上でHTTP通信によりハイパーテキスト形式の情報をやり取りすることができる。世界最大の分散システムであり、ハイパーメディアという情報システムの一種である。

 *** ブラウザの画面に表示されるイメージ全体を *** ページ、 *** ページの見出しとなるページをホームページと呼ぶ。

Answer: Web

Source: ../../note/network/_/chapters/web.md

====================

Webは、TCP/IPのアプリケーションレイヤのシステムで、インターネット上でHTTP通信によりハイパーテキスト形式の情報をやり取りすることができる。世界最大の分散システムであり、ハイパーメディアという情報システムの一種である。

Webブラウザの画面に表示されるイメージ全体を ****** 、 ****** の見出しとなるページをホームページと呼ぶ。

Answer: Webページ

Source: ../../note/network/_/chapters/web.md

====================

Webは、TCP/IPのアプリケーションレイヤのシステムで、インターネット上でHTTP通信によりハイパーテキスト形式の情報をやり取りすることができる。世界最大の分散システムであり、ハイパーメディアという情報システムの一種である。

Webブラウザの画面に表示されるイメージ全体をWebページ、Webページの見出しとなるページを ****** と呼ぶ。

Answer: ホームページ

Source: ../../note/network/_/chapters/web.md

====================

 ******* は、Webの情報を画面に表示するためのクライアントソフトウェア。代表的なブラウザとしてはMicrosoftのMicrosoft EdgeやMozilla FoundationのFirefox、GoogleのGoogle Chrome、Opera SoftwareのOpera、AppleのSafariなどがある。

HTMLやCSS、JavaScriptをどのように解釈するかはブラウザの実装次第であるため、Webコンテンツの表示や挙動が微妙に異なる場合がある。

Answer: Webブラウザ

Source: ../../note/network/_/chapters/web.md

====================

 ****** は、インターネット上でWebブラウザにコンテンツを配信するサーバ。

Answer: Webサーバ

Source: ../../note/network/_/chapters/web.md

====================

 ********* (UA: User Agent)は、Webコンテンツにアクセスする具体的なプログラムやソフトウェア。OSやブラウザの名称、バージョンなどの情報は ********* としてサーバに通知される。

Answer: ユーザエージェント

Source: ../../note/network/_/chapters/web.md

====================

ユーザエージェント( ** : User Agent)は、Webコンテンツにアクセスする具体的なプログラムやソフトウェア。OSやブラウザの名称、バージョンなどの情報はユーザエージェントとしてサーバに通知される。

Answer: UA

Source: ../../note/network/_/chapters/web.md

====================

 ******* (Web Application Programming Interface)は、Webを介して他のソフトウェアと機能やサービスを共有する仕組み。データを共有する際のフォーマットとしてはXMLやJSONがよく用いられる。

Answer: Web API

Source: ../../note/network/_/chapters/web.md

====================

 *** (World Wide Web Consortium)は、IETFに代わってWebの標準化を行う団体。HTMLやXML、HTTP、URI、CSSなどの標準化作業を行う。

Answer: W3C

Source: ../../note/network/_/chapters/web.md

====================

1980年代までにハイパーメディアの構想が成熟し、インターネットの技術が登場し、分散システムの基盤が構築された。1990年11月、スイスの **** （European Organization for Nuclear Research: 欧州原子核研究機構）のTim Berners-Leeが、インターネットベースの分散情報管理システムとしてWebの提案書を書き、その年の年末には最初のバージョンのブラウザとサーバを完成させた。

1993年にイリノイ大学のNCSA（National Center for Supercomputing Application: 米国立スーパーコンピュータ応用研究所）が公開したMosaicというブラウザは、それまでのブラウザがテキストのみを扱っていたのに対して、画像をインライン表示できるという機能を備えていた。

様々な高機能ブラウザが登場するとWebは急速に普及し、インターネットの標準化を行うIETFのRFCの仕様策定が追いつかなくなった。そこで、1994年にBerners-Leeが中心となってW3Cを設立し、IETFに代わってWebの標準化を進めた。

Answer: CERN

Source: ../../note/network/_/chapters/web.md

====================

1980年代までにハイパーメディアの構想が成熟し、インターネットの技術が登場し、分散システムの基盤が構築された。1990年11月、スイスのCERN（European Organization for Nuclear Research: 欧州原子核研究機構）のTim Berners-Leeが、インターネットベースの分散情報管理システムとしてWebの提案書を書き、その年の年末には最初のバージョンのブラウザとサーバを完成させた。

1993年にイリノイ大学の **** （National Center for Supercomputing Application: 米国立スーパーコンピュータ応用研究所）が公開したMosaicというブラウザは、それまでのブラウザがテキストのみを扱っていたのに対して、画像をインライン表示できるという機能を備えていた。

様々な高機能ブラウザが登場するとWebは急速に普及し、インターネットの標準化を行うIETFのRFCの仕様策定が追いつかなくなった。そこで、1994年にBerners-Leeが中心となってW3Cを設立し、IETFに代わってWebの標準化を進めた。

Answer: NCSA

Source: ../../note/network/_/chapters/web.md

====================

1980年代までにハイパーメディアの構想が成熟し、インターネットの技術が登場し、分散システムの基盤が構築された。1990年11月、スイスのCERN（European Organization for Nuclear Research: 欧州原子核研究機構）のTim Berners-Leeが、インターネットベースの分散情報管理システムとしてWebの提案書を書き、その年の年末には最初のバージョンのブラウザとサーバを完成させた。

1993年にイリノイ大学のNCSA（National Center for Supercomputing Application: 米国立スーパーコンピュータ応用研究所）が公開した ****** というブラウザは、それまでのブラウザがテキストのみを扱っていたのに対して、画像をインライン表示できるという機能を備えていた。

様々な高機能ブラウザが登場するとWebは急速に普及し、インターネットの標準化を行うIETFのRFCの仕様策定が追いつかなくなった。そこで、1994年にBerners-Leeが中心となってW3Cを設立し、IETFに代わってWebの標準化を進めた。

Answer: Mosaic

Source: ../../note/network/_/chapters/web.md

====================

 ******** は、テキストや音声、映像などの様々なメディアをリンクで結び付けて構成したシステム。

Answer: ハイパーメディア

Source: ../../note/network/_/chapters/web.md

====================

 ******* （リンク）は、ハイパーメディアにおいて情報同士を結びつける機能。

Answer: ハイパーリンク

Source: ../../note/network/_/chapters/web.md

====================

ハイパー *** （ *** ）は、ハイパーメディアにおいて情報同士を結びつける機能。

Answer: リンク

Source: ../../note/network/_/chapters/web.md

====================

 ******** は、ハイパーリンクを用いて情報を結びつけた文字情報中心の文書。ハイパーメディアは ******** を拡張した考え方。

Answer: ハイパーテキスト

Source: ../../note/network/_/chapters/web.md

====================

 ***** は、1945年にアメリカの研究者Vannevar Bushが発表した情報検索システムについての論文で、ハイパーメディアの起源。コンピュータが登場したばかりの頃の論文であるが、電気的に接続した本やフィルムなどを相互にリンクし、リンクをたどって情報を探索するという現在のWebを予感させるシステムが構想されていた。

Answer: Memex

Source: ../../note/network/_/chapters/web.md

====================

 ****** は、Memexの構想に影響を受けたTed Nelsonによって構想されたハイパーメディアシステム。現在のWebよりもさらに高機能な理想のハイパーメディアとして開発されたが、あまりの複雑さから計画が頓挫し、Webの圧倒的な普及速度に追いつけなかった。

Answer: Xanadu

Source: ../../note/network/_/chapters/web.md

====================

 ********* は、1987年にAppleのBill Atkinsonが開発したハイパーメディアで、カードと呼ばれる文書を単位に相互にリンクを張るという構成。当時Appleがよく利用していたスクリプト言語、HyperTalkにより実装されていた。

Answer: HyperCard

Source: ../../note/network/_/chapters/web.md

====================

 ****** は、広大なインターネット上の情報から、クライアントが求める情報を探し出すためのシステム。ユーザがWebブラウザの検索ボックスに入力したキーワードを元に、最適な情報を探索する。現在使われている ****** は、ほとんどがGoogleとなっているが、YahooやBingといった ****** もよく用いられている。

Answer: 検索エンジン

Source: ../../note/network/_/chapters/web.md

====================

 ****** は、クローラというプログラムによってインターネット上のリンクをたどり、Webページを巡回して情報を収集する処理。

Answer: クローリング

Source: ../../note/network/_/chapters/web.md

====================

クローリングは、 **** というプログラムによってインターネット上のリンクをたどり、Webページを巡回して情報を収集する処理。

Answer: クローラ

Source: ../../note/network/_/chapters/web.md

====================

 ****** は、クローリングによって収集したデータを蓄積し、検索 ****** にWebページの情報を格納する処理。

Answer: インデックス

Source: ../../note/network/_/chapters/web.md

====================

 ***** は、インデックスされた情報を検索アルゴリズムと照合して評価し、関連性の高い回答を検索結果として表示する処理。

Answer: ランキング

Source: ../../note/network/_/chapters/web.md

====================

 ****** は、Googleが採用している検索エンジンのランキングアルゴリズム。

Answer: ページランク

Source: ../../note/network/_/chapters/web.md

====================

 **** は、ネットワークシステムのアーキテクチャスタイルのひとつであり、クライアントサーバシステムに様々な制約を加えたものとなっている。 **** はWebをソフトウェアアーキテクチャの観点から分析してまとめられている。

 **** は、ULCODC$SS(Uniform Layered Code on Demand Client Cache Stateless Server)というアーキテクチャスタイルの通称。Webサービスを実装する上では **** を構成するいくつかのアーキテクチャスタイルは除外してもよい。

Answer: REST

Source: ../../note/network/_/chapters/web.md

====================

RESTは、ネットワークシステムのアーキテクチャスタイルのひとつであり、クライアントサーバシステムに様々な制約を加えたものとなっている。RESTはWebをソフトウェアアーキテクチャの観点から分析してまとめられている。

RESTは、 ********* (Uniform Layered Code on Demand Client Cache Stateless Server)というアーキテクチャスタイルの通称。Webサービスを実装する上ではRESTを構成するいくつかのアーキテクチャスタイルは除外してもよい。

Answer: ULCODC$SS

Source: ../../note/network/_/chapters/web.md

====================

 **** は、ネットワークシステムのアーキテクチャスタイルのひとつであり、メッセージの転送方法を定めた仕様。1990年代後半から2000年代にかけて、Web APIの標準化をめぐってRESTと争っていたが、多くのベンダがドラフトを持ち寄って実装を進めた結果、相互運用性に欠ける状態となったためにRESTに敗北した。

Answer: SOAP

Source: ../../note/network/_/chapters/web.md

====================

 ********* (Client/Server)は、クライアントがサーバにリクエストを送り、それに対してサーバがレスポンスを返すというアーキテクチャスタイル。

Answer: クライアントサーバ

Source: ../../note/network/_/chapters/web.md

====================

 ********* (Stateless Server)は、クライアントのアプリケーション状態（セッション状態）をサーバが管理しないアーキテクチャスタイル。しかし現実にはステートレスではないWebサービスやWeb APIがほとんどであり、Cookieなどのセッションを使ったステートフルな状態管理が多用されている。

ステートフルなアプリケーションでは、クライアントの数が増え、保持しなければいけないアプリケーション状態が増加した際にスケールアウトすることが難しい。ステートフルな構成は ********* の利点をあえて捨てているということを理解した上で利用する必要がある。

Answer: ステートレスサーバ

Source: ../../note/network/_/chapters/web.md

====================

ステートレスサーバ(Stateless Server)は、クライアントの ********** （セッション状態）をサーバが管理しないアーキテクチャスタイル。しかし現実にはステートレスではないWebサービスやWeb APIがほとんどであり、Cookieなどのセッションを使ったステートフルな状態管理が多用されている。

ステートフルなアプリケーションでは、クライアントの数が増え、保持しなければいけない ********** が増加した際にスケールアウトすることが難しい。ステートフルな構成はステートレスサーバの利点をあえて捨てているということを理解した上で利用する必要がある。

Answer: アプリケーション状態

Source: ../../note/network/_/chapters/web.md

====================

ステートレスサーバ(Stateless Server)は、クライアントのアプリケーション状態（ ******* ）をサーバが管理しないアーキテクチャスタイル。しかし現実にはステートレスではないWebサービスやWeb APIがほとんどであり、Cookieなどのセッションを使ったステートフルな状態管理が多用されている。

ステートフルなアプリケーションでは、クライアントの数が増え、保持しなければいけないアプリケーション状態が増加した際にスケールアウトすることが難しい。ステートフルな構成はステートレスサーバの利点をあえて捨てているということを理解した上で利用する必要がある。

Answer: セッション状態

Source: ../../note/network/_/chapters/web.md

====================

 ***** (Cache)は、リソースの鮮度に基づいて、一度取得したリソースの表現をクライアント側で使いまわすアーキテクチャスタイル。CDNを用いるなどしてサーバ側で ***** を扱う場合もある。

 ***** を用いることにより、サーバとクライアントの間の通信を減らしてネットワーク帯域の利用や処理時間を縮小し、より効率的な処理ができるようになる。ただし、古い ***** を利用してしまい、情報の信頼性が下がる可能性もある。

Answer: キャッシュ

Source: ../../note/network/_/chapters/web.md

====================

 ********* (Uniform Interface)は、URIで指示したリソースに対する操作を、統一した限定的なインタフェースにより行うアーキテクチャスタイル。実際にHTTPには限られたいくつかのメソッドしか用意されておらず、Webのアーキテクチャ全体をシンプルに保っている。

Answer: 統一インタフェース

Source: ../../note/network/_/chapters/web.md

====================

 ******* (Layered System)は、システムをいくつかの階層に分類するアーキテクチャスタイル。統一インタフェースの恩恵もあり、サーバとクライアントの間にロードバランサを設置して負荷分散をしたり、プロキシサーバを設置してアクセスを制限したりすることが容易となっている。

Answer: 階層化システム

Source: ../../note/network/_/chapters/web.md

====================

 ********* は、プログラムコードをサーバからダウンロードして、それをクライアント側で実行するアーキテクチャスタイル。JavaScriptやFlash、Javaアンプレットがこれに該当する技術で、クライアント側の拡張性が高くなるという利点がある。

Answer: コードオンデマンド

Source: ../../note/network/_/chapters/web.md

====================

コードオンデマンドは、プログラムコードをサーバからダウンロードして、それをクライアント側で実行するアーキテクチャスタイル。JavaScriptや ***** 、Javaアンプレットがこれに該当する技術で、クライアント側の拡張性が高くなるという利点がある。

Answer: Flash

Source: ../../note/network/_/chapters/web.md

====================

コードオンデマンドは、プログラムコードをサーバからダウンロードして、それをクライアント側で実行するアーキテクチャスタイル。JavaScriptやFlash、 ********** がこれに該当する技術で、クライアント側の拡張性が高くなるという利点がある。

Answer: Javaアンプレット

Source: ../../note/network/_/chapters/web.md

====================

 ******* は、RESTの制約に従うRESTらしいサービスのことを指す用語。個別のWebサービスやWeb APIが ******* になると、Webは全体としてより良くなるため、開発者はRESTを意識して個別のシステムを設計する必要がある。

Answer: RESTful

Source: ../../note/network/_/chapters/web.md

====================

 *** （Uniform Resource Identifier: 統一リソース識別子）は、インターネット上の資源（リソース）を表す識別子。

 *** で表されるパスにはASCII文字のみ利用することができ、日本語などのASCII以外の文字を使いたい場合は**%エンコーディング**（パーセントエンコーディング）という方式を用いて文字をエンコードする。

Answer: URI

Source: ../../note/network/_/chapters/web.md

====================

URI（Uniform Resource Identifier:  ********* ）は、インターネット上の資源（リソース）を表す識別子。

URIで表されるパスにはASCII文字のみ利用することができ、日本語などのASCII以外の文字を使いたい場合は**%エンコーディング**（パーセントエンコーディング）という方式を用いて文字をエンコードする。

Answer: 統一リソース識別子

Source: ../../note/network/_/chapters/web.md

====================

URI（Uniform Resource Identifier: 統一リソース識別子）は、インターネット上の資源（リソース）を表す識別子。

URIで表されるパスにはASCII文字のみ利用することができ、日本語などのASCII以外の文字を使いたい場合は** ********* **（パーセントエンコーディング）という方式を用いて文字をエンコードする。

Answer: %エンコーディング

Source: ../../note/network/_/chapters/web.md

====================

URI（Uniform Resource Identifier: 統一リソース識別子）は、インターネット上の資源（リソース）を表す識別子。

URIで表されるパスにはASCII文字のみ利用することができ、日本語などのASCII以外の文字を使いたい場合は**%エンコーディング**（ ************* ）という方式を用いて文字をエンコードする。

Answer: パーセントエンコーディング

Source: ../../note/network/_/chapters/web.md

====================

 *** (Uniform Resource Locator)は、URIよりも狭義の概念で、インターネット上のWebリソースを表す識別子のことを指す。

Answer: URL

Source: ../../note/network/_/chapters/web.md

====================

 *** (Uniform Resource Name)は、URIよりも狭義の概念で、リソースに恒久的なIDを振るための識別子。例えば、書籍にはISBNという世界的に統一された *** が割り振られている。

Answer: URN

Source: ../../note/network/_/chapters/web.md

====================

URN(Uniform Resource Name)は、URIよりも狭義の概念で、リソースに恒久的なIDを振るための識別子。例えば、書籍には **** という世界的に統一されたURNが割り振られている。

Answer: ISBN

Source: ../../note/network/_/chapters/web.md

====================

 **** (Scheme)は、URI中でそのURIが利用するプロトコルを指す部分。 **** の公式な一覧はIANA(Internet Assigned Numbers Authority)にある。

Answer: スキーム

Source: ../../note/network/_/chapters/web.md

====================

スキーム(Scheme)は、URI中でそのURIが利用するプロトコルを指す部分。スキームの公式な一覧は **** (Internet Assigned Numbers Authority)にある。

Answer: IANA

Source: ../../note/network/_/chapters/web.md

====================

 ******** （クエリ文字列）は、URI中に指定することができるパラメータで、クライアントがサーバに対して情報を送信したい場合に用いられる。URI中で ? 以降に記載され、キーと値が = 区切りでつなげられる。複数のパラメータを含めたい場合は、 & によってパラメータ同士が結合された文字列となる。

Answer: クエリパラメータ

Source: ../../note/network/_/chapters/web.md

====================

クエリパラメータ（ ****** ）は、URI中に指定することができるパラメータで、クライアントがサーバに対して情報を送信したい場合に用いられる。URI中で ? 以降に記載され、キーと値が = 区切りでつなげられる。複数のパラメータを含めたい場合は、 & によってパラメータ同士が結合された文字列となる。

Answer: クエリ文字列

Source: ../../note/network/_/chapters/web.md

====================

 ********* は、URI中でリソースの内部のさらに細かい部分を指定するときに使用される部分。URI中で # 以降に記載され、HTMLのid属性に紐付けられる。

Answer: URIフラグメント

Source: ../../note/network/_/chapters/web.md

====================

 **** は、Web上に存在するURIを持ったありとあらゆる情報を指す用語。ひとつの **** が複数の名前を持つこともできる。

実際にクライアントとサーバがやり取りするデータのことを **** の表現といい、 **** の表現は時間によって状態が変化する可能性がある。

Answer: リソース

Source: ../../note/network/_/chapters/web.md

====================

リソースは、Web上に存在するURIを持ったありとあらゆる情報を指す用語。ひとつのリソースが複数の名前を持つこともできる。

実際にクライアントとサーバがやり取りするデータのことを ******* といい、 ******* は時間によって状態が変化する可能性がある。

Answer: リソースの表現

Source: ../../note/network/_/chapters/web.md

====================

リソースは、Web上に存在するURIを持ったありとあらゆる情報を指す用語。ひとつのリソースが複数の名前を持つこともできる。

実際にクライアントとサーバがやり取りするデータのことをリソースの表現といい、リソースの表現は時間によって ** が変化する可能性がある。

Answer: 状態

Source: ../../note/network/_/chapters/web.md

====================

 ******* は、URIが持つ、リソースを一意的に指し示すことができる性質。

Answer: アドレス可能性

Source: ../../note/network/_/chapters/web.md

====================

 ****** は、良いURIや綺麗なURIを指す言葉で、Berners-Leeが1998年に発表した「Cool URIs don't change」というWebページが発祥となっている。Berners-Leeは、「URIは変わらないべきである。変わらないURIこそが最上のURIである」と主張した。

Answer: クールURI

Source: ../../note/network/_/chapters/web.md

====================

 ****** (Redirect)は、古いURIを新しいURIに転送するHTTPの仕組み。サーバがクライアントに ****** を要求する際には、300番台のステータスコードとLocationヘッダが含まれるレスポンスメッセージを送信し、ブラウザはLocationに指定された新しいURLに再度リクエストを行う。

URIを変更したい場合は ****** により古いURIが完全に使えなくなることを防ぐとよい。

Answer: リダイレクト

Source: ../../note/network/_/chapters/web.md

====================

 **** (HyperText Markup Language)は、Webページを記述するためのマークアップ言語あるいはデータ形式。 **** はハイパーテキストであり、画面に表示する文字や画像にリンクを張って別の情報と紐づけることができる。

 **** はWWWのプレゼンテーション層の機能であるが、このプレゼンテーション層は完全には整備されておらず、OSやブラウザが異なると表示の細かい部分に違いを生じる場合がある。

•  **** 

Answer: HTML

Source: ../../note/network/_/chapters/web.md

====================

 ******* は、base64でエンコードされたユーザIDとパスワードによる認証。平文でネットワークを流れるので、安全性は低く、HTTPSの暗号化通信と組み合わせて使用することが推奨されている。

Answer: Basic認証

Source: ../../note/network/_/chapters/web.md

====================

 ******** は、Basic認証の欠点であった平文で認証情報が流れてしまうことを改善した認証方式。ユーザIDとパスワードをMD5でハッシュ化して送信する。ただし、 ******** の暗号化方式も解析が可能となっているため、HTTPSと合わせて使用するなど安全性を高める対策は必要となる。

Answer: Digest認証

Source: ../../note/network/_/chapters/web.md

====================

 ********* は、HTTP通信においてリクエストやレスポンスの際にやり取りされるメッセージ。

Answer: HTTPメッセージ

Source: ../../note/network/_/chapters/web.md

====================

 ******* は、HTTPメッセージにおいて、HTTP通信のメタデータが格納された部分。クライアントとサーバが相互に情報をやり取りするために使用される。 ******* はキーと値のペアから構成され、 User-Agent や Accept 、 Content-Type 、 Content-Length といったものが頻繁に利用される。

Answer: HTTPヘッダ

Source: ../../note/network/_/chapters/web.md

====================

 ******* は、HTTPメッセージにおいて様々な情報が格納される部分で、その扱いはソフトウェア次第。 ******* は省略することも可能。通常のWebページのレスポンスでは ******* にHTMLが格納され、Web APIではリクエストのパラメータやレスポンスデータとして ******* にXMLやJSONなどが格納されることが多い。

Answer: HTTPボディ

Source: ../../note/network/_/chapters/web.md

====================

 ********** は、HTTP通信においてリクエストの際にやり取りされるHTTPメッセージ。

[ ********** の例]
GET /test?q=test HTTP/1.1
Host: example.jp
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)
Accept: text/html,application/xhtml+xml,application/xml;q=0.9

Answer: リクエストメッセージ

Source: ../../note/network/_/chapters/web.md

====================

 ******** は、リクエストメッセージの1行目にあたる部分で、HTTPメソッド、リクエストURI、プロトコルバージョンからなる。

Answer: リクエストライン

Source: ../../note/network/_/chapters/web.md

====================

 ********** は、HTTP通信においてレスポンスの際にやり取りされるHTTPメッセージ。

[ ********** の例]
HTTP/1.1 200 OK
Content-Type: application/xhtml+xml; charset=utf-8

<html>
 ...
</html>

Answer: レスポンスメッセージ

Source: ../../note/network/_/chapters/web.md

====================

 ******** は、レスポンスメッセージの1行目にあたる部分で、プロトコルバージョン、ステータスコード、テキストフレーズからなる。

Answer: ステータスライン

Source: ../../note/network/_/chapters/web.md

====================

 ******** は、HTTPリクエストの際に、対象となるリソースに対してどのような操作を行うかを表す命令。中でもGET、POST、PUT、DELETEは、これら4つでCRUDの性質を満たす。

| メソッド  | 意味                                                     | | --------- | -------------------------------------------------------- | | GET     | リソースの取得                                           | | POST    | 子リソースの作成、リソースへのデータの追加、その他の処理 | | PATCH   | リソースの部分的な更新                                   | | PUT     | リソースの更新、リソースの作成                           | | DELETE  | リソースの削除                                           | | HEAD    | リソースのヘッダの取得                                   | | OPTIONS | リソースがサポートしているメソッドの取得                 | | TRACE   | 自分宛てにリクエストメッセージを返す（ループバック）試験 | | CONNECT | プロキシ動作のトンネル接続への変更                       |

Answer: HTTPメソッド

Source: ../../note/network/_/chapters/web.md

====================

 ******** は、HTTPリクエストの処理結果を表す3桁の数字。レスポンスメッセージのステータスラインに記載され、先頭の数字によって5つに分類することができる。

|  ******** の分類    | 概要                                                                                                                                     | | ------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- | | 1xx（処理中）             | 処理が継続していることを示す。クライアントはそのままリクエストを継続するか、サーバの指示に従ってプロトコルをアップデートして再送信する。 | | 2xx（成功）               | リクエストが成功したことを示す。                                                                                                         | | 3xx（リダイレクト）       | ほかのリソースへのリダイレクトを示す。クライアントはレスポンスメッセージのLocationヘッダを見て新しいリソースへ接続する。                 | | 4xx（クライアントエラー） | クライアントエラーを示す。原因はクライアント側にあり、エラーを解消しない限りは正常な結果が得られない。                                   | | 5xx（サーバエラー）       | サーバエラーを示す。サーバ側の原因を解決すれば同一のリクエストを再送信して正常な結果が得られる可能性がある。                             |

Answer: ステータスコード

Source: ../../note/network/_/chapters/web.md

====================

 **** は、HTTPにおいて、クライアントからサーバに対してデータを送信するための技術。

HTMLでは form タグを用いることで **** を作成でき、 action 属性に指定されたURLにデータが送信される。また、使用するHTTPメソッドを method 属性で指定することもできる。

Answer: フォーム

Source: ../../note/network/_/chapters/web.md

====================

 ********** は、HTTPのフォームにおけるエンコードタイプの形式で、通常は単一のコンテンツしか持つことのできないHTTPメッセージに複数のコンテンツ（ファイル）を持たせるためのオプション。 ********** のHTTPボディは、リクエストごとに異なる境界文字列で複数のコンテンツを区切った形式となっており、区切られた各コンテンツはそれぞれがヘッダを持つことができる。境界文字列は Content-Type ヘッダに付与された boundary に記載される。

HTMLの form では、 enctype="multipart/form-data" を指定することで ********** を作成することができる。

Answer: マルチパートフォーム

Source: ../../note/network/_/chapters/web.md

====================

 ************* は、HTTPにおいて、クライアントが期待している形式や設定をサーバに伝えることで、最適なコンテンツをレスポンスするための仕組み。以下のネゴシエーション用のリクエストのヘッダと、それに対応するレスポンスのヘッダに示したように、MIMEタイプや言語、文字セットなどをネゴシエーションできる。

| リクエストヘッダ  | レスポンスヘッダ              | ネゴシエーション対象 | | ----------------- | ----------------------------- | -------------------- | | Accept          | Content-Type                | MIMEタイプ           | | Accept-Language | Content-Language / HTMLタグ | 表示言語             | | Accept-Charset  | Content-Type                | 文字セット           | | Accept-Encoding | Content-Encoding            | ボディの圧縮形式     |

Answer: コンテントネゴシエーション

Source: ../../note/network/_/chapters/web.md

====================

 ***** は、クライアントがあるWebサイトに訪問してから離脱するまでの通信。各クライアントごとの ***** 情報はサーバが利用するストレージに格納されており、クライアントは自分の ***** 情報を参照するためのキーをCookieなどで保持する。

サーバを冗長化する場合は、全てのサーバが共有できるストレージ（DBやキャッシュサーバなど）で ***** 情報を管理する必要がある。

Answer: セッション

Source: ../../note/network/_/chapters/web.md

====================

 ****** は、ブラウザに情報を保存するための機能で、JavaScriptやHTTPヘッダによって制御される。 ****** の情報をどれだけの期間保持しておくかは、ブラウザの設定やHTTPメッセージ内のメタ情報により制御する。

セッション情報を参照するためのキーや、一時的なデータの保存などに用いられる。

Answer: Cookie

Source: ../../note/network/_/chapters/web.md

====================

 ********* (Local Storage)は、ブラウザに情報を保存するための機能で、Cookieよりも情報の保存期間が長く、格納できるデータ量も大きい。Cookieの情報はHTTPメッセージを介してサーバにも送信されるが、 ********* の情報はブラウザのみで使用されるため、サーバ側のセッションの管理には向いていない。

Answer: ローカルストレージ

Source: ../../note/network/_/chapters/web.md

