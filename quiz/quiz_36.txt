====================

CSSのプロパティの値を設定する際に使用される単位には、次のような種類がある。

| 単位     | 説明                                                           | | -------- | -------------------------------------------------------------- | | em   | 1em = 親要素に設定されているフォントサイズ                     | | rem  | 1rem = <html> に設定されているフォントサイズ（標準は16px）   | |  **    | 1 **  = ビューポートの幅の1/100                                  | | vh   | 1vh = ビューポートの高さの1/100                                | | vmin | 1vmin = ビューポートの幅か高さ、どちらか短い方の1/100          | | vmax | 1vmax = ビューポートの幅か高さ、どちらか長い方の1/100          | | px   | 1px = 1ピクセル（ディスプレイを構成する最小単位）の大きさ      | | pt   | 1pt = 1ポイント（1/72インチ、約0.035cm）                       | | %    | 基準となる長さや大きさ（プロパティによって異なる）に対する割合 | | deg  | 1deg = 1°                                                      | | rad  | 1rad = 1ラジアン                                               | | s    | 1s = 1秒                                                       | | ms   | 1ms = 1ミリ秒（1/1000秒）                                      |

Answer: vw

Source: ../../note/web_development/css/_/chapters/css.md

====================

CSSのプロパティの値を設定する際に使用される単位には、次のような種類がある。

| 単位     | 説明                                                           | | -------- | -------------------------------------------------------------- | | em   | 1em = 親要素に設定されているフォントサイズ                     | | rem  | 1rem = <html> に設定されているフォントサイズ（標準は16px）   | | vw   | 1vw = ビューポートの幅の1/100                                  | |  **    | 1 **  = ビューポートの高さの1/100                                | | vmin | 1vmin = ビューポートの幅か高さ、どちらか短い方の1/100          | | vmax | 1vmax = ビューポートの幅か高さ、どちらか長い方の1/100          | | px   | 1px = 1ピクセル（ディスプレイを構成する最小単位）の大きさ      | | pt   | 1pt = 1ポイント（1/72インチ、約0.035cm）                       | | %    | 基準となる長さや大きさ（プロパティによって異なる）に対する割合 | | deg  | 1deg = 1°                                                      | | rad  | 1rad = 1ラジアン                                               | | s    | 1s = 1秒                                                       | | ms   | 1ms = 1ミリ秒（1/1000秒）                                      |

Answer: vh

Source: ../../note/web_development/css/_/chapters/css.md

====================

CSSのプロパティの値を設定する際に使用される単位には、次のような種類がある。

| 単位     | 説明                                                           | | -------- | -------------------------------------------------------------- | | em   | 1em = 親要素に設定されているフォントサイズ                     | | rem  | 1rem = <html> に設定されているフォントサイズ（標準は16px）   | | vw   | 1vw = ビューポートの幅の1/100                                  | | vh   | 1vh = ビューポートの高さの1/100                                | |  ****  | 1 ****  = ビューポートの幅か高さ、どちらか短い方の1/100          | | vmax | 1vmax = ビューポートの幅か高さ、どちらか長い方の1/100          | | px   | 1px = 1ピクセル（ディスプレイを構成する最小単位）の大きさ      | | pt   | 1pt = 1ポイント（1/72インチ、約0.035cm）                       | | %    | 基準となる長さや大きさ（プロパティによって異なる）に対する割合 | | deg  | 1deg = 1°                                                      | | rad  | 1rad = 1ラジアン                                               | | s    | 1s = 1秒                                                       | | ms   | 1ms = 1ミリ秒（1/1000秒）                                      |

Answer: vmin

Source: ../../note/web_development/css/_/chapters/css.md

====================

CSSのプロパティの値を設定する際に使用される単位には、次のような種類がある。

| 単位     | 説明                                                           | | -------- | -------------------------------------------------------------- | | em   | 1em = 親要素に設定されているフォントサイズ                     | | rem  | 1rem = <html> に設定されているフォントサイズ（標準は16px）   | | vw   | 1vw = ビューポートの幅の1/100                                  | | vh   | 1vh = ビューポートの高さの1/100                                | | vmin | 1vmin = ビューポートの幅か高さ、どちらか短い方の1/100          | |  ****  | 1 ****  = ビューポートの幅か高さ、どちらか長い方の1/100          | | px   | 1px = 1ピクセル（ディスプレイを構成する最小単位）の大きさ      | | pt   | 1pt = 1ポイント（1/72インチ、約0.035cm）                       | | %    | 基準となる長さや大きさ（プロパティによって異なる）に対する割合 | | deg  | 1deg = 1°                                                      | | rad  | 1rad = 1ラジアン                                               | | s    | 1s = 1秒                                                       | | ms   | 1ms = 1ミリ秒（1/1000秒）                                      |

Answer: vmax

Source: ../../note/web_development/css/_/chapters/css.md

====================

CSSのプロパティの値を設定する際に使用される単位には、次のような種類がある。

| 単位     | 説明                                                           | | -------- | -------------------------------------------------------------- | | em   | 1em = 親要素に設定されているフォントサイズ                     | | rem  | 1rem = <html> に設定されているフォントサイズ（標準は16 ** ）   | | vw   | 1vw = ビューポートの幅の1/100                                  | | vh   | 1vh = ビューポートの高さの1/100                                | | vmin | 1vmin = ビューポートの幅か高さ、どちらか短い方の1/100          | | vmax | 1vmax = ビューポートの幅か高さ、どちらか長い方の1/100          | |  **    | 1 **  = 1ピクセル（ディスプレイを構成する最小単位）の大きさ      | | pt   | 1pt = 1ポイント（1/72インチ、約0.035cm）                       | | %    | 基準となる長さや大きさ（プロパティによって異なる）に対する割合 | | deg  | 1deg = 1°                                                      | | rad  | 1rad = 1ラジアン                                               | | s    | 1s = 1秒                                                       | | ms   | 1ms = 1ミリ秒（1/1000秒）                                      |

Answer: px

Source: ../../note/web_development/css/_/chapters/css.md

====================

CSSのプロパティの値を設定する際に使用される単位には、次のような種類がある。

| 単位     | 説明                                                           | | -------- | -------------------------------------------------------------- | | em   | 1em = 親要素に設定されているフォントサイズ                     | | rem  | 1rem = <html> に設定されているフォントサイズ（標準は16px）   | | vw   | 1vw = ビューポートの幅の1/100                                  | | vh   | 1vh = ビューポートの高さの1/100                                | | vmin | 1vmin = ビューポートの幅か高さ、どちらか短い方の1/100          | | vmax | 1vmax = ビューポートの幅か高さ、どちらか長い方の1/100          | | px   | 1px = 1ピクセル（ディスプレイを構成する最小単位）の大きさ      | |  **    | 1 **  = 1ポイント（1/72インチ、約0.035cm）                       | | %    | 基準となる長さや大きさ（プロパティによって異なる）に対する割合 | | deg  | 1deg = 1°                                                      | | rad  | 1rad = 1ラジアン                                               | | s    | 1s = 1秒                                                       | | ms   | 1ms = 1ミリ秒（1/1000秒）                                      |

Answer: pt

Source: ../../note/web_development/css/_/chapters/css.md

====================

CSSのプロパティの値を設定する際に使用される単位には、次のような種類がある。

| 単位     | 説明                                                           | | -------- | -------------------------------------------------------------- | | em   | 1em = 親要素に設定されているフォントサイズ                     | | rem  | 1rem = <html> に設定されているフォントサイズ（標準は16px）   | | vw   | 1vw = ビューポートの幅の1/100                                  | | vh   | 1vh = ビューポートの高さの1/100                                | | vmin | 1vmin = ビューポートの幅か高さ、どちらか短い方の1/100          | | vmax | 1vmax = ビューポートの幅か高さ、どちらか長い方の1/100          | | px   | 1px = 1ピクセル（ディスプレイを構成する最小単位）の大きさ      | | pt   | 1pt = 1ポイント（1/72インチ、約0.035cm）                       | |  *     | 基準となる長さや大きさ（プロパティによって異なる）に対する割合 | | deg  | 1deg = 1°                                                      | | rad  | 1rad = 1ラジアン                                               | | s    | 1s = 1秒                                                       | | ms   | 1ms = 1ミリ秒（1/1000秒）                                      |

Answer: %

Source: ../../note/web_development/css/_/chapters/css.md

====================

CSSのプロパティの値を設定する際に使用される単位には、次のような種類がある。

| 単位     | 説明                                                           | | -------- | -------------------------------------------------------------- | | em   | 1em = 親要素に設定されているフォントサイズ                     | | rem  | 1rem = <html> に設定されているフォントサイズ（標準は16px）   | | vw   | 1vw = ビューポートの幅の1/100                                  | | vh   | 1vh = ビューポートの高さの1/100                                | | vmin | 1vmin = ビューポートの幅か高さ、どちらか短い方の1/100          | | vmax | 1vmax = ビューポートの幅か高さ、どちらか長い方の1/100          | | px   | 1px = 1ピクセル（ディスプレイを構成する最小単位）の大きさ      | | pt   | 1pt = 1ポイント（1/72インチ、約0.035cm）                       | | %    | 基準となる長さや大きさ（プロパティによって異なる）に対する割合 | |  ***   | 1 ***  = 1°                                                      | | rad  | 1rad = 1ラジアン                                               | | s    | 1s = 1秒                                                       | | ms   | 1ms = 1ミリ秒（1/1000秒）                                      |

Answer: deg

Source: ../../note/web_development/css/_/chapters/css.md

====================

CSSのプロパティの値を設定する際に使用される単位には、次のような種類がある。

| 単位     | 説明                                                           | | -------- | -------------------------------------------------------------- | | em   | 1em = 親要素に設定されているフォントサイズ                     | | rem  | 1rem = <html> に設定されているフォントサイズ（標準は16px）   | | vw   | 1vw = ビューポートの幅の1/100                                  | | vh   | 1vh = ビューポートの高さの1/100                                | | vmin | 1vmin = ビューポートの幅か高さ、どちらか短い方の1/100          | | vmax | 1vmax = ビューポートの幅か高さ、どちらか長い方の1/100          | | px   | 1px = 1ピクセル（ディスプレイを構成する最小単位）の大きさ      | | pt   | 1pt = 1ポイント（1/72インチ、約0.035cm）                       | | %    | 基準となる長さや大きさ（プロパティによって異なる）に対する割合 | | deg  | 1deg = 1°                                                      | |  ***   | 1 ***  = 1ラジアン                                               | | s    | 1s = 1秒                                                       | | ms   | 1ms = 1ミリ秒（1/1000秒）                                      |

Answer: rad

Source: ../../note/web_development/css/_/chapters/css.md

====================

CSSのプロパティの値を設定する際に使用される単位には、次のような種類がある。

| 単位     | 説明                                                           | | -------- | -------------------------------------------------------------- | | em   | 1em = 親要素に設定されているフォントサイズ                     | | rem  | 1rem = <html> に設定されているフォントサイズ（標準は16px）   | | vw   | 1vw = ビューポートの幅の1/100                                  | | vh   | 1vh = ビューポートの高さの1/100                                | | vmin | 1vmin = ビューポートの幅か高さ、どちらか短い方の1/100          | | vmax | 1vmax = ビューポートの幅か高さ、どちらか長い方の1/100          | | px   | 1px = 1ピクセル（ディスプレイを構成する最小単位）の大きさ      | | pt   | 1pt = 1ポイント（1/72インチ、約0.035cm）                       | | %    | 基準となる長さや大きさ（プロパティによって異なる）に対する割合 | | deg  | 1deg = 1°                                                      | | rad  | 1rad = 1ラジアン                                               | |  *     | 1 *  = 1秒                                                       | | m *    | 1m *  = 1ミリ秒（1/1000秒）                                      |

Answer: s

Source: ../../note/web_development/css/_/chapters/css.md

====================

CSSのプロパティの値を設定する際に使用される単位には、次のような種類がある。

| 単位     | 説明                                                           | | -------- | -------------------------------------------------------------- | | em   | 1em = 親要素に設定されているフォントサイズ                     | | rem  | 1rem = <html> に設定されているフォントサイズ（標準は16px）   | | vw   | 1vw = ビューポートの幅の1/100                                  | | vh   | 1vh = ビューポートの高さの1/100                                | | vmin | 1vmin = ビューポートの幅か高さ、どちらか短い方の1/100          | | vmax | 1vmax = ビューポートの幅か高さ、どちらか長い方の1/100          | | px   | 1px = 1ピクセル（ディスプレイを構成する最小単位）の大きさ      | | pt   | 1pt = 1ポイント（1/72インチ、約0.035cm）                       | | %    | 基準となる長さや大きさ（プロパティによって異なる）に対する割合 | | deg  | 1deg = 1°                                                      | | rad  | 1rad = 1ラジアン                                               | | s    | 1s = 1秒                                                       | |  **    | 1 **  = 1ミリ秒（1/1000秒）                                      |

Answer: ms

Source: ../../note/web_development/css/_/chapters/css.md

====================

 ******** は、ブラウザの画面内でWebページが表示される領域。異なるデバイスでWebページを閲覧したときにもユーザがストレスなくコンテンツを閲覧できるように、 ******** に合わせたスタイリングを心がけることは重要である。また、 ******** を基準としてスタイリングを行うことが効果的な場合もある。

Answer: viewport

Source: ../../note/web_development/css/_/chapters/css.md

====================

 ******* は、HTML要素が持つコンテンツを中心に、その要素を4つの領域から構成するモデル。HTML要素は、そのコンテンツを表示するための表示領域を確保しており、その外側にはそのコンテンツの余白や枠線を表示するための領域を持っている。これらをすべて合わせた領域のことをボックスと呼び、CSSではこのボックスを装飾することでレイアウトやデザインを整える。

ボックスはコンテンツ領域、パディング領域、ボーダー領域、マージン領域から構成される。

Answer: ボックスモデル

Source: ../../note/web_development/css/_/chapters/css.md

====================

 **** モデルは、HTML要素が持つコンテンツを中心に、その要素を4つの領域から構成するモデル。HTML要素は、そのコンテンツを表示するための表示領域を確保しており、その外側にはそのコンテンツの余白や枠線を表示するための領域を持っている。これらをすべて合わせた領域のことを **** と呼び、CSSではこの **** を装飾することでレイアウトやデザインを整える。

 **** はコンテンツ領域、パディング領域、ボーダー領域、マージン領域から構成される。

Answer: ボックス

Source: ../../note/web_development/css/_/chapters/css.md

====================

 ******* は、CSSのボックスモデルにおいて、HTML要素の持つコンテンツを表示するための領域。 height や width といったプロパティによってサイズを変更することができる。

Answer: コンテンツ領域

Source: ../../note/web_development/css/_/chapters/css.md

====================

 ******* は、CSSのボックスモデルにおいて、コンテンツ領域とボーダー領域の間にある領域で、コンテンツの内側の余白を表す。 padding プロパティによって余白の広さを調整することができる。

Answer: パディング領域

Source: ../../note/web_development/css/_/chapters/css.md

====================

 ****** は、CSSのボックスモデルにおいて、コンテンツ領域とパディング領域を囲むための領域で、コンテンツの枠線を表す。 border プロパティによって枠線の形状や色、太さを調整することができる。実装者の感覚として、 ****** までをコンテンツのサイズとみなす方が自然であるため、 height や width といったプロパティの表すサイズをコンテンツ領域ではなく ****** にするための box-sizing: border-box; というCSSルールを適用することが多い。

Answer: ボーダー領域

Source: ../../note/web_development/css/_/chapters/css.md

====================

 ****** は、CSSのボックスモデルにおいて、ボーダー領域の外側にある領域で、コンテンツの外側の余白を表す。 margin プロパティによって余白の広さを調整することができる。

Answer: マージン領域

Source: ../../note/web_development/css/_/chapters/css.md

====================

 ******** は、HTML要素のうち、親要素のコンテンツ領域の横幅いっぱいに広がるタイプのボックス。CSSでコンテンツの幅や高さ、パディング、ボーダー、マージンなど、すべての領域のサイズを指定できる。

div 、 section 、 header 、 footer 、 p 、 ul といった要素はデフォルトで ******** となっている。

Answer: ブロックボックス

Source: ../../note/web_development/css/_/chapters/css.md

====================

 ********* は、HTML要素のうち、テキスト業に紛れ込むことができるタイプのボックス。 ********* の隣には、別のテキストや ********* が並ぶことができる。基本的には、CSSでコンテンツの幅や高さ、上下マージンを指定することができない。

span 、 strong 、 br 、 img 、 input といった要素はデフォルトで ********* となっている。

Answer: インラインボックス

Source: ../../note/web_development/css/_/chapters/css.md

====================

 ************* は、インラインボックスとブロックボックスの中間的な性質を持つボックス。基本的な性質はインラインボックスであるが、コンテンツの幅や高さ、上下マージンを設定することができる。

Answer: インラインブロックボックス

Source: ../../note/web_development/css/_/chapters/css.md

====================

 ********* は、ページの幅を固定してCSSを適用するWebデザイン手法。幅が固定されているため、デザインに適したブラウザサイズで閲覧しなければユーザビリティの低下につながる（画面を横スクロールしなければ全コンテンツが表示されないため）。

Answer: フィックスデザイン

Source: ../../note/web_development/css/_/chapters/css.md

====================

 ********* は、ブラウザの幅に応じて、常にページの幅が100%になるようにするWebデザイン手法。横スクロールが不要である分フィックスデザインよりもユーザビリティは向上するが、デザインの崩れが発生する可能性がある。

Answer: フルーイドデザイン

Source: ../../note/web_development/css/_/chapters/css.md

====================

 ********** は、いくつかのブラウザサイズに対してそれぞれ最適なHTMLやCSSを用意しておくWebデザイン手法。どの画面サイズの端末から見ても整ったデザインのページとなるが、その分実装コストが大きくなる。

Answer: アダプティブデザイン

Source: ../../note/web_development/css/_/chapters/css.md

====================

 ********** は、単一のHTMLとCSSで様々なブラウザサイズに対応するWebデザイン手法。ユーザが閲覧中にブラウザサイズを変更しても柔軟に対応でき、アダプティブデザインと比べて実装やメンテナンスのコストが低くなりやすい。

Answer: レスポンシブデザイン

Source: ../../note/web_development/css/_/chapters/css.md

====================

 *** は、CSSにおいて、同じ要素の同じプロパティに対して複数の値が設定されていた場合に、どの値を優先的に適用するかを判断するためのアルゴリズム。基本的には、セレクタの指定方法によって *** が計算される。

 *** の計算は以下の3段階に分けられ、上位の *** から優先的に評価される。

1. IDセレクタの *** 
2. クラスセレクタや属性セレクタ、擬似クラスの *** 
3. 要素型セレクタ、擬似要素の *** 

例えば、 #container .box div は 1.1.1 の *** 、 #container .box div:first-child は 1.2.1 の *** となり、後者のスタイルが優先的に適用される。また、 *** が等しいスタイルについては、CSSファイルの後に記述されたものが適用される。

Answer: 詳細度

Source: ../../note/web_development/css/_/chapters/css.md

====================

 ******* は、CSSにおいて、ボックスの表示方法を指定するためのプロパティ。ブロックボックスをインラインボックスにしたり、フレックスボックスやグリッドレイアウトを適用するために用いられる。

Answer: display

Source: ../../note/web_development/css/_/chapters/layout.md

====================

 ********* は、子要素を列方向や行方向に1次元にレイアウトすることを容易にするためのボックス。 display プロパティに flex という値を指定することで要素をフレックスコンテナにし、その子要素をフレックスアイテムにすることができる。

子要素の並び方向や整列位置、要素の伸縮などを指定できる。

Answer: フレックスボックス

Source: ../../note/web_development/css/_/chapters/layout.md

====================

フレックスボックスは、子要素を列方向や行方向に1次元にレイアウトすることを容易にするためのボックス。 display プロパティに flex という値を指定することで要素を ********* にし、その子要素をフレックスアイテムにすることができる。

子要素の並び方向や整列位置、要素の伸縮などを指定できる。

Answer: フレックスコンテナ

Source: ../../note/web_development/css/_/chapters/layout.md

====================

フレックスボックスは、子要素を列方向や行方向に1次元にレイアウトすることを容易にするためのボックス。 display プロパティに flex という値を指定することで要素をフレックスコンテナにし、その子要素を ********* にすることができる。

子要素の並び方向や整列位置、要素の伸縮などを指定できる。

Answer: フレックスアイテム

Source: ../../note/web_development/css/_/chapters/layout.md

====================

 **** は、CSSにおいて、フレックスアイテムの伸縮を指定するためのプロパティ。1つ目の値として伸長係数、2つ目の値として縮小係数、3つ目の値として初期の寸法を一括で設定できるショートハンドプロパティ。

各スタイルを個別に指定するプロパティも存在し、伸長係数を指定する **** -grow、縮小係数を指定する **** -shrink、初期の寸法を指定する **** -basisが使用できる。

Answer: flex

Source: ../../note/web_development/css/_/chapters/layout.md

====================

flexは、CSSにおいて、フレックスアイテムの伸縮を指定するためのプロパティ。1つ目の値として伸長係数、2つ目の値として縮小係数、3つ目の値として初期の寸法を一括で設定できるショートハンドプロパティ。

各スタイルを個別に指定するプロパティも存在し、伸長係数を指定する ********* 、縮小係数を指定するflex-shrink、初期の寸法を指定するflex-basisが使用できる。

Answer: flex-grow

Source: ../../note/web_development/css/_/chapters/layout.md

====================

flexは、CSSにおいて、フレックスアイテムの伸縮を指定するためのプロパティ。1つ目の値として伸長係数、2つ目の値として縮小係数、3つ目の値として初期の寸法を一括で設定できるショートハンドプロパティ。

各スタイルを個別に指定するプロパティも存在し、伸長係数を指定するflex-grow、縮小係数を指定する *********** 、初期の寸法を指定するflex-basisが使用できる。

Answer: flex-shrink

Source: ../../note/web_development/css/_/chapters/layout.md

====================

flexは、CSSにおいて、フレックスアイテムの伸縮を指定するためのプロパティ。1つ目の値として伸長係数、2つ目の値として縮小係数、3つ目の値として初期の寸法を一括で設定できるショートハンドプロパティ。

各スタイルを個別に指定するプロパティも存在し、伸長係数を指定するflex-grow、縮小係数を指定するflex-shrink、初期の寸法を指定する ********** が使用できる。

Answer: flex-basis

Source: ../../note/web_development/css/_/chapters/layout.md

====================

 ************** は、CSSにおいて、フレックスボックスの要素の並び方向を指定するためのプロパティ。 row （行方向）、 row-reverse （行方向逆順）、 column （列方向）、 column-reverse （列方向逆順）といったキーワードを指定できる。

Answer: flex-direction

Source: ../../note/web_development/css/_/chapters/layout.md

====================

 ********* は、CSSにおいて、フレックスボックスの要素の折返しを指定するためのプロパティ。 nowrap （折返しなし）、 wrap （折返しあり）、 wrap-reverse （折返し逆順）といったキーワードを指定できる。

Answer: flex-wrap

Source: ../../note/web_development/css/_/chapters/layout.md

====================

 *************** は、CSSにおいて、フレックスボックスの要素の並び方向に対する配置を指定するためのプロパティ。 flex-start （前揃え）、 flex-end （後揃え）、 center （中央揃え）、 space-between （アイテム間のスペースを均等に割当）、 space-around （アイテムの両端にスペースを均等に割当）といったキーワードを指定できる。

Answer: justify-content

Source: ../../note/web_development/css/_/chapters/layout.md

====================

 *********** は、CSSにおいて、フレックスボックスの要素の並び方向に直行する方向に対する配置を指定するためのプロパティ。 stretch （伸縮）、 flex-start （始端揃え）、 flex-end （終端揃え）、 center （中央揃え）といったキーワードを指定できる。

Answer: align-items

Source: ../../note/web_development/css/_/chapters/layout.md

====================

 ********** は、CSSにおいて、フレックスアイテムが自身の配置位置を指定するためのプロパティ。使用できるキーワードは align-items と同様。

Answer: align-self

Source: ../../note/web_development/css/_/chapters/layout.md

====================

 *** は、CSSにおいて、フレックスボックスの要素同士の間隔（余白）を指定するためのプロパティ。

Answer: gap

Source: ../../note/web_development/css/_/chapters/layout.md

====================

 ********* は、子要素を2次元にレイアウトすることを容易にするためのボックス。 display プロパティに grid という値を指定することで要素をグリッドコンテナにし、その子要素をグリッドアイテムにすることができる。

子要素を行と列の方向にレイアウトすることができ、複雑なレイアウトをより簡単に構築できるようになる。fr(fraction)という単位を用いて、残りの幅や高さを自動で埋めることもでき、画面サイズに合わせたレイアウトが容易となる。

Answer: グリッドレイアウト

Source: ../../note/web_development/css/_/chapters/layout.md

====================

グリッドレイアウトは、子要素を2次元にレイアウトすることを容易にするためのボックス。 display プロパティに grid という値を指定することで要素を ******** にし、その子要素をグリッドアイテムにすることができる。

子要素を行と列の方向にレイアウトすることができ、複雑なレイアウトをより簡単に構築できるようになる。fr(fraction)という単位を用いて、残りの幅や高さを自動で埋めることもでき、画面サイズに合わせたレイアウトが容易となる。

Answer: グリッドコンテナ

Source: ../../note/web_development/css/_/chapters/layout.md

====================

グリッドレイアウトは、子要素を2次元にレイアウトすることを容易にするためのボックス。 display プロパティに grid という値を指定することで要素をグリッドコンテナにし、その子要素を ******** にすることができる。

子要素を行と列の方向にレイアウトすることができ、複雑なレイアウトをより簡単に構築できるようになる。fr(fraction)という単位を用いて、残りの幅や高さを自動で埋めることもでき、画面サイズに合わせたレイアウトが容易となる。

Answer: グリッドアイテム

Source: ../../note/web_development/css/_/chapters/layout.md

====================

グリッドレイアウトは、子要素を2次元にレイアウトすることを容易にするためのボックス。 display プロパティに grid という値を指定することで要素をグリッドコンテナにし、その子要素をグリッドアイテムにすることができる。

子要素を行と列の方向にレイアウトすることができ、複雑なレイアウトをより簡単に構築できるようになる。 ** ( ** action)という単位を用いて、残りの幅や高さを自動で埋めることもでき、画面サイズに合わせたレイアウトが容易となる。

Answer: fr

Source: ../../note/web_development/css/_/chapters/layout.md

====================

 ****************** は、CSSにおいて、グリッドレイアウトの行のレイアウトを指定するためのプロパティ。複数の値を指定することで、行方向に要素をどのように配置するのかを指定できる。

Answer: grid-template-rows

Source: ../../note/web_development/css/_/chapters/layout.md

====================

 ********************* は、CSSにおいて、グリッドレイアウトの列のレイアウトを指定するためのプロパティ。複数の値を指定することで、列方向に要素をどのように配置するのかを指定できる。

Answer: grid-template-columns

Source: ../../note/web_development/css/_/chapters/layout.md

====================

 ******** は、CSSにおいて、グリッドアイテムの行方向の位置（サイズ）を指定するためのプロパティ。値として、始点と終点となる番号をスラッシュ区切りで指定する。

Answer: grid-row

Source: ../../note/web_development/css/_/chapters/layout.md

====================

 *********** は、CSSにおいて、グリッドアイテムの列方向の位置（サイズ）を指定するためのプロパティ。値として、始点と終点となる番号をスラッシュ区切りで指定する。

Answer: grid-column

Source: ../../note/web_development/css/_/chapters/layout.md

====================

 ******** は、CSSにおいて、要素同士の位置関係を指定するためのプロパティ。このプロパティの値に応じてtop、bottom、left、rightといったプロパティの位置指定が適用される。  ********  には以下のような値が適用できる。

• static: デフォルトの位置指定で、 top や left といった位置指定はできない。
• relative: 本来要素が配置されるべき位置を基準として、 top や left といった位置指定を適用する。また、 absolute に対する基準位置としても使用される。
• absolute: relative が指定されている親要素の位置を基準として、 top や left といった位置指定を適用する。
• fixed: ブラウザのviewportを基準として、 top や left といった位置指定を適用する。ページをスクロールした場合も常に固定位置に表示される。
• sticky: 最初は relative と同様のフローに従って配置され、親要素が特定のスクロール位置に達したときに要素の位置が固定されるようになる。 top や left で位置指定を適用することもできる。テーブルのヘッダーなどを sticky にするといった使い方が多い。

Answer: position

Source: ../../note/web_development/css/_/chapters/layout.md

====================

positionは、CSSにおいて、要素同士の位置関係を指定するためのプロパティ。このプロパティの値に応じて *** 、bottom、left、rightといったプロパティの位置指定が適用される。 position には以下のような値が適用できる。

• static: デフォルトの位置指定で、  ***  や left といった位置指定はできない。
• relative: 本来要素が配置されるべき位置を基準として、  ***  や left といった位置指定を適用する。また、 absolute に対する基準位置としても使用される。
• absolute: relative が指定されている親要素の位置を基準として、  ***  や left といった位置指定を適用する。
• fixed: ブラウザのviewportを基準として、  ***  や left といった位置指定を適用する。ページをスクロールした場合も常に固定位置に表示される。
• sticky: 最初は relative と同様のフローに従って配置され、親要素が特定のスクロール位置に達したときに要素の位置が固定されるようになる。  ***  や left で位置指定を適用することもできる。テーブルのヘッダーなどを sticky にするといった使い方が多い。

Answer: top

Source: ../../note/web_development/css/_/chapters/layout.md

====================

positionは、CSSにおいて、要素同士の位置関係を指定するためのプロパティ。このプロパティの値に応じてtop、 ****** 、left、rightといったプロパティの位置指定が適用される。 position には以下のような値が適用できる。

• static: デフォルトの位置指定で、 top や left といった位置指定はできない。
• relative: 本来要素が配置されるべき位置を基準として、 top や left といった位置指定を適用する。また、 absolute に対する基準位置としても使用される。
• absolute: relative が指定されている親要素の位置を基準として、 top や left といった位置指定を適用する。
• fixed: ブラウザのviewportを基準として、 top や left といった位置指定を適用する。ページをスクロールした場合も常に固定位置に表示される。
• sticky: 最初は relative と同様のフローに従って配置され、親要素が特定のスクロール位置に達したときに要素の位置が固定されるようになる。 top や left で位置指定を適用することもできる。テーブルのヘッダーなどを sticky にするといった使い方が多い。

Answer: bottom

Source: ../../note/web_development/css/_/chapters/layout.md

====================

positionは、CSSにおいて、要素同士の位置関係を指定するためのプロパティ。このプロパティの値に応じてtop、bottom、 **** 、rightといったプロパティの位置指定が適用される。 position には以下のような値が適用できる。

• static: デフォルトの位置指定で、 top や  ****  といった位置指定はできない。
• relative: 本来要素が配置されるべき位置を基準として、 top や  ****  といった位置指定を適用する。また、 absolute に対する基準位置としても使用される。
• absolute: relative が指定されている親要素の位置を基準として、 top や  ****  といった位置指定を適用する。
• fixed: ブラウザのviewportを基準として、 top や  ****  といった位置指定を適用する。ページをスクロールした場合も常に固定位置に表示される。
• sticky: 最初は relative と同様のフローに従って配置され、親要素が特定のスクロール位置に達したときに要素の位置が固定されるようになる。 top や  ****  で位置指定を適用することもできる。テーブルのヘッダーなどを sticky にするといった使い方が多い。

Answer: left

Source: ../../note/web_development/css/_/chapters/layout.md

====================

positionは、CSSにおいて、要素同士の位置関係を指定するためのプロパティ。このプロパティの値に応じてtop、bottom、left、 ***** といったプロパティの位置指定が適用される。 position には以下のような値が適用できる。

• static: デフォルトの位置指定で、 top や left といった位置指定はできない。
• relative: 本来要素が配置されるべき位置を基準として、 top や left といった位置指定を適用する。また、 absolute に対する基準位置としても使用される。
• absolute: relative が指定されている親要素の位置を基準として、 top や left といった位置指定を適用する。
• fixed: ブラウザのviewportを基準として、 top や left といった位置指定を適用する。ページをスクロールした場合も常に固定位置に表示される。
• sticky: 最初は relative と同様のフローに従って配置され、親要素が特定のスクロール位置に達したときに要素の位置が固定されるようになる。 top や left で位置指定を適用することもできる。テーブルのヘッダーなどを sticky にするといった使い方が多い。

Answer: right

Source: ../../note/web_development/css/_/chapters/layout.md

====================

positionは、CSSにおいて、要素同士の位置関係を指定するためのプロパティ。このプロパティの値に応じてtop、bottom、left、rightといったプロパティの位置指定が適用される。 position には以下のような値が適用できる。

•  ****** : デフォルトの位置指定で、 top や left といった位置指定はできない。
• relative: 本来要素が配置されるべき位置を基準として、 top や left といった位置指定を適用する。また、 absolute に対する基準位置としても使用される。
• absolute: relative が指定されている親要素の位置を基準として、 top や left といった位置指定を適用する。
• fixed: ブラウザのviewportを基準として、 top や left といった位置指定を適用する。ページをスクロールした場合も常に固定位置に表示される。
• sticky: 最初は relative と同様のフローに従って配置され、親要素が特定のスクロール位置に達したときに要素の位置が固定されるようになる。 top や left で位置指定を適用することもできる。テーブルのヘッダーなどを sticky にするといった使い方が多い。

Answer: static

Source: ../../note/web_development/css/_/chapters/layout.md

====================

positionは、CSSにおいて、要素同士の位置関係を指定するためのプロパティ。このプロパティの値に応じてtop、bottom、left、rightといったプロパティの位置指定が適用される。 position には以下のような値が適用できる。

• static: デフォルトの位置指定で、 top や left といった位置指定はできない。
•  ******** : 本来要素が配置されるべき位置を基準として、 top や left といった位置指定を適用する。また、 absolute に対する基準位置としても使用される。
• absolute:  ********  が指定されている親要素の位置を基準として、 top や left といった位置指定を適用する。
• fixed: ブラウザのviewportを基準として、 top や left といった位置指定を適用する。ページをスクロールした場合も常に固定位置に表示される。
• sticky: 最初は  ********  と同様のフローに従って配置され、親要素が特定のスクロール位置に達したときに要素の位置が固定されるようになる。 top や left で位置指定を適用することもできる。テーブルのヘッダーなどを sticky にするといった使い方が多い。

Answer: relative

Source: ../../note/web_development/css/_/chapters/layout.md

====================

positionは、CSSにおいて、要素同士の位置関係を指定するためのプロパティ。このプロパティの値に応じてtop、bottom、left、rightといったプロパティの位置指定が適用される。 position には以下のような値が適用できる。

• static: デフォルトの位置指定で、 top や left といった位置指定はできない。
• relative: 本来要素が配置されるべき位置を基準として、 top や left といった位置指定を適用する。また、  ********  に対する基準位置としても使用される。
•  ******** : relative が指定されている親要素の位置を基準として、 top や left といった位置指定を適用する。
• fixed: ブラウザのviewportを基準として、 top や left といった位置指定を適用する。ページをスクロールした場合も常に固定位置に表示される。
• sticky: 最初は relative と同様のフローに従って配置され、親要素が特定のスクロール位置に達したときに要素の位置が固定されるようになる。 top や left で位置指定を適用することもできる。テーブルのヘッダーなどを sticky にするといった使い方が多い。

Answer: absolute

Source: ../../note/web_development/css/_/chapters/layout.md

====================

positionは、CSSにおいて、要素同士の位置関係を指定するためのプロパティ。このプロパティの値に応じてtop、bottom、left、rightといったプロパティの位置指定が適用される。 position には以下のような値が適用できる。

• static: デフォルトの位置指定で、 top や left といった位置指定はできない。
• relative: 本来要素が配置されるべき位置を基準として、 top や left といった位置指定を適用する。また、 absolute に対する基準位置としても使用される。
• absolute: relative が指定されている親要素の位置を基準として、 top や left といった位置指定を適用する。
•  ***** : ブラウザのviewportを基準として、 top や left といった位置指定を適用する。ページをスクロールした場合も常に固定位置に表示される。
• sticky: 最初は relative と同様のフローに従って配置され、親要素が特定のスクロール位置に達したときに要素の位置が固定されるようになる。 top や left で位置指定を適用することもできる。テーブルのヘッダーなどを sticky にするといった使い方が多い。

Answer: fixed

Source: ../../note/web_development/css/_/chapters/layout.md

====================

positionは、CSSにおいて、要素同士の位置関係を指定するためのプロパティ。このプロパティの値に応じてtop、bottom、left、rightといったプロパティの位置指定が適用される。 position には以下のような値が適用できる。

• static: デフォルトの位置指定で、 top や left といった位置指定はできない。
• relative: 本来要素が配置されるべき位置を基準として、 top や left といった位置指定を適用する。また、 absolute に対する基準位置としても使用される。
• absolute: relative が指定されている親要素の位置を基準として、 top や left といった位置指定を適用する。
• fixed: ブラウザのviewportを基準として、 top や left といった位置指定を適用する。ページをスクロールした場合も常に固定位置に表示される。
•  ****** : 最初は relative と同様のフローに従って配置され、親要素が特定のスクロール位置に達したときに要素の位置が固定されるようになる。 top や left で位置指定を適用することもできる。テーブルのヘッダーなどを  ******  にするといった使い方が多い。

Answer: sticky

Source: ../../note/web_development/css/_/chapters/layout.md

====================

 ******* は、CSSにおいて、同じ位置にある要素同士の重なり順を指定するためのプロパティ。より大きな値を指定したものが上に重なるようになる。

Answer: z-index

Source: ../../note/web_development/css/_/chapters/layout.md

====================

 ******* は、CSSにおいて、特定の特性（viewportのサイズなど）に応じて適用するスタイルを切り替えるための機能。 ******* の使用例は以下の通り。

@media screen and (min-width: 768px)
{
    /* PC用スタイル */
}

@media screen and (max-width: 768px)
{
    /* モバイル用（タブレット含む）スタイル */
}

Answer: メディアクエリ

Source: ../../note/web_development/css/_/chapters/layout.md

====================

 ********** は、CSSにおいて、リストのマークを指定するためのプロパティ。非順序リストにおいては、 disc （黒丸）、 circle （白丸）、 square （四角）、 none （非表示）などが、順序付きリストにおいては、 lower-alpha （小文字アルファベット）、 upper-alpha （大文字アルファベット）、 lower-roman （小文字ローマ数字）、 upper-roman （大文字ローマ数字）などがキーワードとして使用できる。また、 url に任意の画像パスを指定することで、オリジナルのマークを用いることもできる。

Answer: list-style

Source: ../../note/web_development/css/_/chapters/list.md

====================

 ************ は、CSSにおいて、テーブルのセル幅をどのように決定するかを指定するためのプロパティ。 auto （コンテンツに応じて自動決定）、 fixed （各セルが均等になるように決定）のキーワードが使用できる。

Answer: table-layout

Source: ../../note/web_development/css/_/chapters/table.md

====================

 *************** は、CSSにおいて、テーブルのセル同士がボーダを共有するか分離するかを指定するためのプロパティ。 collapse （共有）、 separate （分離）のキーワードが使用できる。

Answer: border-collapse

Source: ../../note/web_development/css/_/chapters/table.md

====================

 ************ は、CSSにおいて、テーブルのキャプション（ caption タグ）をどこに表示するか指定するためのプロパティ。 top （上部）、 bottom （下部）のキーワードが使用できる。

Answer: caption-side

Source: ../../note/web_development/css/_/chapters/table.md

====================

 ***** は、CSSにおいて、テキスト色を指定するためのプロパティ。色の指定方法としては、HEXカラー、RGB(RGBA)、HSL(HSLA)、カラーキーワードが使用できる。

Answer: color

Source: ../../note/web_development/css/_/chapters/text.md

====================

 ********* は、CSSにおいて、フォントの大きさを指定するためのプロパティ。デフォルトCSSにおいてはこの値は 16px となっており、見出しなど目立たせたい部分は 32px や 24px 、やや小さく表示したい部分は 10px や 12px などを用いることが多い。

Answer: font-size

Source: ../../note/web_development/css/_/chapters/text.md

====================

 ********* は、CSSにおいて、フォントの太さを指定するためのプロパティ。 100 ~ 900 （ 400 が通常の太さ）という数値で指定したり、 normal や bold などのキーワードで指定したりする。

Answer: font-size

Source: ../../note/web_development/css/_/chapters/text.md

====================

 *********** は、CSSにおいて、行の高さを指定するためのプロパティ。 font-size を 1 としたときの倍率で指定する場合が多く（ px など他の単位も使用可能）、通常は 1.5 ~ 1.8 程度とするのが一般的。

Answer: line-height

Source: ../../note/web_development/css/_/chapters/text.md

====================

 ********** は、CSSにおいて、文字の整列方向を指定するためのプロパティ。 left （左揃え）、 center （中央揃え）、 right （右揃え）、 justify （両端揃え）というキーワードで指定する。

Answer: text-align

Source: ../../note/web_development/css/_/chapters/text.md

====================

 ************** は、CSSにおいて、文字と文字の間隔を指定するためのプロパティ。見出しを目立たせたい場合などに使用されることが多い。

Answer: letter-spacing

Source: ../../note/web_development/css/_/chapters/text.md

====================

 *************** は、CSSにおいて、文字の装飾を指定するためのプロパティ。 overline （テキストの上線）、 underline （テキストの下線）、 line-through （テキストの字消し線）、 none （装飾なし）というキーワードで指定する。

Answer: text-decoration

Source: ../../note/web_development/css/_/chapters/text.md

====================

 ************* は、CSSにおいて、親要素からテキストがはみ出た場合の表示方法を指定するためのプロパティ。 ellipsis （...に置き換える）、 clip （切り取る）などのキーワードを指定したり、値として任意の文字列を指定してはみ出た部分をそれに置き換えたりすることができる。

Answer: text-overflow

Source: ../../note/web_development/css/_/chapters/text.md

====================

 *********** は、CSSにおいて、親要素からテキストがはみ出た場合の改行制御を指定するためのプロパティ。 normal （改行する）、 nowrap （改行しない）などのキーワードを指定することができる。

Answer: white-space

Source: ../../note/web_development/css/_/chapters/text.md

====================

 ********* は、HTML文書の先頭に配置される特殊なタグで、ブラウザに対してどのバージョンのHTMLを使用しているかを伝える役割を持つ。文書がどのバージョンのHTML仕様に準拠しているかをブラウザに伝えることで、正しく内容を解釈してもらうために重要となる。

最新のHTML5の標準モードで文書を解釈するようにブラウザに指示をする場合は、 <!DOCTYPE html> と記述し、基本的に新しいサイトを作成する際はこれを覚えておくだけで十分。

過去バージョンのHTML仕様を使用する場合、次のように記述する。

<!-- HTML 4.01 Strict -->
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">

<!-- XHTML 1.0 Strict -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

Answer: DOCTYPE宣言

Source: ../../note/web_development/html/_/chapters/basics.md

====================

 **** は、HTML文書のルート要素であり、HTML文書の開始と終了を示すために使用されるタグ。すべてのHTML要素はこのタグの内部に配置される。

<!DOCTYPE  **** >
< **** >
 <!-- HTMLコンテンツ -->
</ **** >

また、HTML文書内で使われている主要な言語を設定したい場合は、  ****  要素に lang 属性を設定する。これは、ブラウザの翻訳ツールやアクセス解析のデータに影響するため、設定が推奨される。

<!-- 主要な言語を日本語に設定 -->
< ****  lang="ja">

Answer: html

Source: ../../note/web_development/html/_/chapters/basics.md

====================

 **** は、HTML文書のヘッド部を記述するためのタグ。ヘッド部*は、HTML文書のうち、ページが読み込まれてもWebブラウザに表示されない部分。 title やCSSおよびJavaScriptへのリンク、独自のファビコンへのリンク、その他のメタデータの情報などを含む。

Answer: head

Source: ../../note/web_development/html/_/chapters/basics.md

====================

headは、HTML文書の **** を記述するためのタグ。 **** *は、HTML文書のうち、ページが読み込まれてもWebブラウザに表示されない部分。 title やCSSおよびJavaScriptへのリンク、独自のファビコンへのリンク、その他のメタデータの情報などを含む。

Answer: ヘッド部

Source: ../../note/web_development/html/_/chapters/basics.md

====================

 ***** は、HTML文書全体のタイトルを表すメタデータとなるタグで、 head タグ内に記述される。この要素の内容は、SEOに大きく影響しており、ユーザが検索結果ページで目にすることになる重要なものとなる。また、  *****  はページのブックマークやSNSシェア時の表示などにも利用される。

<!DOCTYPE html>
<html>
 <head>
  <meta charset="utf-8">

  <!-- ページタイトルの設定 -->
  < ***** >Example page</ ***** >
 </head>
 <body></body>
</html>

Answer: title

Source: ../../note/web_development/html/_/chapters/basics.md

====================

 **** は、HTML文書のメタデータを記述するためのタグで、 head タグ内に複数記述することができる。HTML文書の文字コードの指定や、作成者やページの説明の追加、SNSシェア時のOGP画像の設定などに使用する。

<!DOCTYPE html>
<html>
 <head>

  <!-- ページの文字コードの設定 -->
  < ****  charset="utf-8">

  <title>Example page</title>

  <!-- ページ概要の設定 -->
  < ****  name="description" content="ページ概要">

  <!-- キーワードの設定 -->
  < ****  name="keywords" content="キーワード1, キーワード2, キーワード3">
 </head>
 <body></body>
</html>

Answer: meta

Source: ../../note/web_development/html/_/chapters/basics.md

====================

 **** は、HTML文書内で外部リソースとの関連付けやスタイルシートの適用などを行うために使用されるタグ。 rel 属性にはリンクの関係性、 type 属性にはリンクされているファイルの種類、 href 属性にはリンク先のURLを指定する。

 **** は主にCSSやファビコンの設定などに使用される。

<!DOCTYPE html>
<html>
 <head>
  <meta charset="utf-8">
  <title>Example page</title>

  <!-- スタイルシートの関連付け -->
  < ****  rel="stylesheet" type="text/css" href="style.css">

  <!-- ファビコンの設定 -->
  < ****  rel="icon" type="image/png" href="favicon.png">
 </head>
 <body></body>
</html>

Answer: link

Source: ../../note/web_development/html/_/chapters/basics.md

====================

 ****** は、HTML文書内にスクリプトコード（JavaScript）を埋め込むために使用されるタグ。直接スクリプトコードを記述したり、外部のJavaScriptファイルを読み込んだりすることができる。

< ****** >
// 直接JavaScriptコードを記述
alert("Hello, world!");
</ ****** >

<!-- 外部のJavaScriptファイルを読み込み -->
< ******  src=" ****** .js"></ ****** >

Answer: script

Source: ../../note/web_development/html/_/chapters/basics.md

====================

 ******** は、ブラウザでJavaScriptが動作しない場合に変わりのコンテンツを表示するために使用されるタグ。

< ******** >
JavaScriptが無効になっています。ブラウザの設定からJavaScriptの動作を有効化してください。
</ ******** >

Answer: noscript

Source: ../../note/web_development/html/_/chapters/basics.md

====================

 *** ( *** ision)は、HTML文書において、特に意味を持たないコンテナを作成するために使用されるタグ。主に、CSSによってスタイルを適用したり、レイアウトを調整するために用いられる。

このタグは、コンテンツのグループ化やスタイリングで頻繁に使用されるものの、コンテンツに意味付けをすることができないため、本来マークアップする必要がある要素に対して過度に利用してしまわないように注意が必要。

Answer: div

Source: ../../note/web_development/html/_/chapters/box.md

====================

 **** は、HTML文書において、その文書の中心となるコンテンツを記述するために使用されるタグ。このタグには、サイドバーやナビゲーション、サイトロゴといった共通のコンポーネントは含めず、その文書固有のコンテンツや機能を持っている部分のみを含める。また、  ****  はセクショニング要素の中に含めるべきではない。

Answer: main

Source: ../../note/web_development/html/_/chapters/box.md

====================

 ****** は、HTML文書において、その文書全体やセクショニング要素のヘッダーを表現するために使用されるタグ。

Answer: header

Source: ../../note/web_development/html/_/chapters/box.md

====================

 ****** は、HTML文書において、その文書全体やセクショニング要素のフッターを表現するために使用されるタグ。

Answer: footer

Source: ../../note/web_development/html/_/chapters/box.md

====================

 ********* は、HTML文書内のコンテンツをセクションに分割するために使用される要素。 article 、 aside 、 nav 、 section といった要素が含まれる。

Answer: セクショニング要素

Source: ../../note/web_development/html/_/chapters/box.md

====================

 ******* は、HTML文書において、それだけで独立したコンテンツとして意味を持つセクションを表現するために使用されるタグ。ニュースやブログの記事、SNSの投稿などをマークアップするのに適している。

Answer: article

Source: ../../note/web_development/html/_/chapters/box.md

====================

 ***** は、HTML文書において、メインコンテンツ（ main の中身）と間接的な関係しか持っていないセクションを表現するために使用されるタグ。サイドバーなどをマークアップするのに適している。

Answer: aside

Source: ../../note/web_development/html/_/chapters/box.md

====================

 *** ( *** igation)は、HTML文書において、現在の文書内の他の部分や他の文書へのナビゲーションリンクを提供するセクションを表現するために使用されるタグ。メニューや目次、索引などをマークアップするのに適している。

Answer: nav

Source: ../../note/web_development/html/_/chapters/box.md

====================

 ******* は、HTML文書において、文書全体の汎用的なセクションを表現するために使用されるタグ。他のセクショニング要素が全て意味的に適していないがセクションとして分割したい、という場合にのみ使用する。

Answer: section

Source: ../../note/web_development/html/_/chapters/box.md

====================

 ****** は、HTML文書において、図とそのキャプションを記述するために使用されるタグ。画像や表、図形などを含めることができ、 figcaption と合わせて利用する。

Answer: figure

Source: ../../note/web_development/html/_/chapters/box.md

====================

 ********** (figure caption)は、HTML文書において、図のキャプションを記述するために使用されるタグ。 figure の子要素として、 figure が含む画像や表などを説明するためのテキストを表示する役割を持つ。

Answer: figcaption

Source: ../../note/web_development/html/_/chapters/box.md

====================

 ****** (inline frame)は、HTML文書において、外部コンテンツを埋め込むために使用されるタグ。他のWebページや埋め込みコンテンツ（動画や地図など）を表示することができる。

Answer: iframe

Source: ../../note/web_development/html/_/chapters/box.md

====================

 **** は、HTML文書において、フォームをマークアップする目的で使用されるタグ。フォームとは、ユーザが入力した内容をWebサーバに送信するための機能であり、  ****  タグはフォーム全体を包む親要素となる。

action属性に対して、フォームのデータをどのURLに送信するかを指定する。また、method属性に対して、フォームの送信時のHTTPメソッドを指定する（GETかPOSTのどちらか）。

Answer: form

Source: ../../note/web_development/html/_/chapters/form.md

====================

formは、HTML文書において、フォームをマークアップする目的で使用されるタグ。フォームとは、ユーザが入力した内容をWebサーバに送信するための機能であり、 form タグはフォーム全体を包む親要素となる。

 ****** 属性に対して、フォームのデータをどのURLに送信するかを指定する。また、method属性に対して、フォームの送信時のHTTPメソッドを指定する（GETかPOSTのどちらか）。

Answer: action

Source: ../../note/web_development/html/_/chapters/form.md

====================

formは、HTML文書において、フォームをマークアップする目的で使用されるタグ。フォームとは、ユーザが入力した内容をWebサーバに送信するための機能であり、 form タグはフォーム全体を包む親要素となる。

action属性に対して、フォームのデータをどのURLに送信するかを指定する。また、 ****** 属性に対して、フォームの送信時のHTTPメソッドを指定する（GETかPOSTのどちらか）。

Answer: method

Source: ../../note/web_development/html/_/chapters/form.md

====================

 ******** は、HTML文書において、複数のフォーム部品をまとめてグループ化する目的で使用されるタグ。

Answer: fieldset

Source: ../../note/web_development/html/_/chapters/form.md

====================

 ****** は、HTML文書において、グループ化されたフォーム部品にキャプションをつける目的で使用されるタグ。 fieldset の直後に記述する必要がある。

Answer: legend

Source: ../../note/web_development/html/_/chapters/form.md

====================

 ***** は、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

type属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するためにname属性の値がキーとして使用され、送信される値はvalue属性となる。 type に指定できるキーワードには次のようなものがある。

• text: テキスト入力のためのフィールド（改行は除去される）。
• password: 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
• email: 電子メールアドレスを入力するための入力欄。
• tel: 電話番号を入力するための入力欄。
• url: URLを入力するための入力欄。
• number: 数値を入力するためのコントロールで、スピナーを表示する。
• range: 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
• checkbox: 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
• radio: 複数の選択肢から1つの値を選択することができるラジオボタン。
• date: 日付指定のための日付ピッカーのコントロール。
• time: 時間指定のためのコントロール。
• file: ファイル選択のためのコントロール。
• color: 色指定のためのカラーピッカーのコントロール。
• button: 規定の動作は持たず、 value 属性の値を表示するボタン。
• submit: フォームの入力内容をサーバに送信するボタン。
• hidden: 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

placeholder属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、required属性を付与することで入力項目を必須に、readonly属性を付与することで入力項目を読み取り専用に、autofocus属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: input

Source: ../../note/web_development/html/_/chapters/form.md

