====================

 ***** は、計算量を表記するための記法で、 $O(n \rm{に関する式})$ で表現する。ここで、 $n$ は扱うデータ数。

Answer: オーダ記法

Source: ../../note/basics/information_theory/_/chapters/computational_complexity.md

====================

 **** は、人間が使用する自然言語に対して、コンピュータなどで情報として扱うために曖昧さを排除した言語。

Answer: 形式言語

Source: ../../note/basics/information_theory/_/chapters/formal_language.md

====================

 ******** （後置記法）は、数式を表現するための記法で、演算子を被演算子の後ろに記述する形式言語。括弧を使わずに記述することができる。

例えば、 $A - (B + (C \times D))$ を ******** で表すと、 $ABCD \times +-$ となる。

 ******** は、計算式の演算子と被演算子を木の各ノードとしたものを後行順で走査したものとなる。

Answer: 逆ポーランド記法

Source: ../../note/basics/information_theory/_/chapters/formal_language.md

====================

逆ポーランド記法（ **** ）は、数式を表現するための記法で、演算子を被演算子の後ろに記述する形式言語。括弧を使わずに記述することができる。

例えば、 $A - (B + (C \times D))$ を逆ポーランド記法で表すと、 $ABCD \times +-$ となる。

逆ポーランド記法は、計算式の演算子と被演算子を木の各ノードとしたものを後行順で走査したものとなる。

Answer: 後置記法

Source: ../../note/basics/information_theory/_/chapters/formal_language.md

====================

 *** （バッカス・ナウア記法）は、プログラミング言語の文法を厳密に表現するための形式言語。表現方法には、順次、選択、反復がある。

• 順次 <x>::=<a><b> : ここで、 x という構文は a と b という文字の並びであるという意味
• 選択 <x>::=<a | b> : ここで、 x という構文は a もしくは b のどちらかという意味 <x>::=[<a>] : ここで、 x という構文は a もしくは空という意味
• 反復 <x>::=<a>... : ここで、 x という構文は a という文字の繰り返しという意味

例えば、数字と数字列は *** でそれぞれ次のように表すことができる。

<数字>::="0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"
<数字列>::=<数字>|<数字列><数字>

Answer: BNF

Source: ../../note/basics/information_theory/_/chapters/formal_language.md

====================

BNF（ ********** ）は、プログラミング言語の文法を厳密に表現するための形式言語。表現方法には、順次、選択、反復がある。

• 順次 <x>::=<a><b> : ここで、 x という構文は a と b という文字の並びであるという意味
• 選択 <x>::=<a | b> : ここで、 x という構文は a もしくは b のどちらかという意味 <x>::=[<a>] : ここで、 x という構文は a もしくは空という意味
• 反復 <x>::=<a>... : ここで、 x という構文は a という文字の繰り返しという意味

例えば、数字と数字列はBNFでそれぞれ次のように表すことができる。

<数字>::="0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"
<数字列>::=<数字>|<数字列><数字>

Answer: バッカス・ナウア記法

Source: ../../note/basics/information_theory/_/chapters/formal_language.md

====================

BNF（バッカス・ナウア記法）は、プログラミング言語の文法を厳密に表現するための形式言語。表現方法には、 ** 、選択、反復がある。

•  **  <x>::=<a><b> : ここで、 x という構文は a と b という文字の並びであるという意味
• 選択 <x>::=<a | b> : ここで、 x という構文は a もしくは b のどちらかという意味 <x>::=[<a>] : ここで、 x という構文は a もしくは空という意味
• 反復 <x>::=<a>... : ここで、 x という構文は a という文字の繰り返しという意味

例えば、数字と数字列はBNFでそれぞれ次のように表すことができる。

<数字>::="0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"
<数字列>::=<数字>|<数字列><数字>

Answer: 順次

Source: ../../note/basics/information_theory/_/chapters/formal_language.md

====================

BNF（バッカス・ナウア記法）は、プログラミング言語の文法を厳密に表現するための形式言語。表現方法には、順次、 ** 、反復がある。

• 順次 <x>::=<a><b> : ここで、 x という構文は a と b という文字の並びであるという意味
•  **  <x>::=<a | b> : ここで、 x という構文は a もしくは b のどちらかという意味 <x>::=[<a>] : ここで、 x という構文は a もしくは空という意味
• 反復 <x>::=<a>... : ここで、 x という構文は a という文字の繰り返しという意味

例えば、数字と数字列はBNFでそれぞれ次のように表すことができる。

<数字>::="0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"
<数字列>::=<数字>|<数字列><数字>

Answer: 選択

Source: ../../note/basics/information_theory/_/chapters/formal_language.md

====================

BNF（バッカス・ナウア記法）は、プログラミング言語の文法を厳密に表現するための形式言語。表現方法には、順次、選択、 ** がある。

• 順次 <x>::=<a><b> : ここで、 x という構文は a と b という文字の並びであるという意味
• 選択 <x>::=<a | b> : ここで、 x という構文は a もしくは b のどちらかという意味 <x>::=[<a>] : ここで、 x という構文は a もしくは空という意味
•  **  <x>::=<a>... : ここで、 x という構文は a という文字の繰り返しという意味

例えば、数字と数字列はBNFでそれぞれ次のように表すことができる。

<数字>::="0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"
<数字列>::=<数字>|<数字列><数字>

Answer: 反復

Source: ../../note/basics/information_theory/_/chapters/formal_language.md

====================

 **** は、文字列のパターンを示すための表現方法。パターンを表現するために特別なメタ文字が使用される。

| メタ文字 | 意味                                         | | -------- | :------------------------------------------- | | .      | 任意の1文字                                  | | ()     | ()内の文字列を1つのパターンとして扱う        | | +      | 直前の文字やパターンの1回以上の繰り返し      | | *      | 直前の文字やパターンの0回以上の繰り返し      | | ?      | 直前の文字やパターンの0回または1回の繰り返し | | \      | 次に続くメタ文字を通常の文字として扱う       | | \|     | 文字やパターンの選択                         | | []     | []内の文字のどれか1文字                      | | ^      | 行頭のマッチ                                 | | $      | 行末のマッチ                                 |

Answer: 正規表現

Source: ../../note/basics/information_theory/_/chapters/formal_language.md

====================

正規表現は、文字列のパターンを示すための表現方法。パターンを表現するために特別な **** が使用される。

|  ****  | 意味                                         | | -------- | :------------------------------------------- | | .      | 任意の1文字                                  | | ()     | ()内の文字列を1つのパターンとして扱う        | | +      | 直前の文字やパターンの1回以上の繰り返し      | | *      | 直前の文字やパターンの0回以上の繰り返し      | | ?      | 直前の文字やパターンの0回または1回の繰り返し | | \      | 次に続く **** を通常の文字として扱う       | | \|     | 文字やパターンの選択                         | | []     | []内の文字のどれか1文字                      | | ^      | 行頭のマッチ                                 | | $      | 行末のマッチ                                 |

Answer: メタ文字

Source: ../../note/basics/information_theory/_/chapters/formal_language.md

====================

 *** は、ある事象がどれほど起こりにくいかを表す尺度。起こりやすい事象であるほど持っている情報は少ないと考えられ、一方で起こりにくい事象は多くの情報を持っていると考えられる。

Answer: 情報量

Source: ../../note/basics/information_theory/_/chapters/information_theory.md

====================

 **** は、ある事象が発生する確率。

Answer: 生起確率

Source: ../../note/basics/information_theory/_/chapters/information_theory.md

====================

 ******** （選択情報量）は、ある事象が起こるときの情報量。対数の底を $2$ とする（2進数で情報を表現することを考えた場合）と、 ******** とはその情報を何ビットで表現できるのかを表す。

ある事象 $E$ の生起確率を $P(E)$ とすると、 ********  $I(E)$ は以下の式で求められる。

I(E) = \log_2{\frac{1}{P(E)}} = - \log_2{P(E)}

Answer: 自己エントロピー

Source: ../../note/basics/information_theory/_/chapters/information_theory.md

====================

自己エントロピー（ ***** ）は、ある事象が起こるときの情報量。対数の底を $2$ とする（2進数で情報を表現することを考えた場合）と、自己エントロピーとはその情報を何ビットで表現できるのかを表す。

ある事象 $E$ の生起確率を $P(E)$ とすると、自己エントロピー $I(E)$ は以下の式で求められる。

I(E) = \log_2{\frac{1}{P(E)}} = - \log_2{P(E)}

Answer: 選択情報量

Source: ../../note/basics/information_theory/_/chapters/information_theory.md

====================

 ****** （平均情報量）は、系全体で考えた場合の情報量の平均。平均情報量は、その系の情報を圧縮するときの限界となる。

Answer: エントロピー

Source: ../../note/basics/information_theory/_/chapters/information_theory.md

====================

エントロピー（ ***** ）は、系全体で考えた場合の情報量の平均。 ***** は、その系の情報を圧縮するときの限界となる。

Answer: 平均情報量

Source: ../../note/basics/information_theory/_/chapters/information_theory.md

====================

 **** は、命題を組み合わせて別の事象の真偽を証明する方法。

Answer: 述語理論

Source: ../../note/basics/information_theory/_/chapters/predicate_theory.md

====================

 **** は、既存の知識からある結論を導く手法。論理を数珠つなぎにしていって結論を引き出す。前提が正しければ結論も必ず正しいものとする。

Answer: 演繹推論

Source: ../../note/basics/information_theory/_/chapters/predicate_theory.md

====================

 **** は、観測事実の因果関係から一般論を導く手法。多くの事実から類似点をまとめて結論を出す。

Answer: 帰納推論

Source: ../../note/basics/information_theory/_/chapters/predicate_theory.md

====================

 ****** は、ロボットや機械などの他の機械を制御するためのシステム。

Answer: 制御システム

Source: ../../note/basics/measurement_and_control/_/chapters/control_theory.md

====================

 *** は、制御システムを構成する要素のひとつで、動きや温度などを観測するための機械。

• サーミスタ : 温度を測定するための *** 
• フォトダイオード : 光を測定するための *** 
• ジャイロ ***  : 物体の角度や角速度を測定するための *** 
• 距離画像 ***  : 目的物までの距離を計測するための *** で、TOF方式(Time of Flight)（照射した光線が物体にあたって反射し、 *** まで戻ってくるまでの時間を基に計算する方式）を用いる場合が多い

Answer: センサ

Source: ../../note/basics/measurement_and_control/_/chapters/control_theory.md

====================

センサは、制御システムを構成する要素のひとつで、動きや温度などを観測するための機械。

•  *****  : 温度を測定するためのセンサ
• フォトダイオード : 光を測定するためのセンサ
• ジャイロセンサ : 物体の角度や角速度を測定するためのセンサ
• 距離画像センサ : 目的物までの距離を計測するためのセンサで、TOF方式(Time of Flight)（照射した光線が物体にあたって反射し、センサまで戻ってくるまでの時間を基に計算する方式）を用いる場合が多い

Answer: サーミスタ

Source: ../../note/basics/measurement_and_control/_/chapters/control_theory.md

====================

センサは、制御システムを構成する要素のひとつで、動きや温度などを観測するための機械。

• サーミスタ : 温度を測定するためのセンサ
•  ********  : 光を測定するためのセンサ
• ジャイロセンサ : 物体の角度や角速度を測定するためのセンサ
• 距離画像センサ : 目的物までの距離を計測するためのセンサで、TOF方式(Time of Flight)（照射した光線が物体にあたって反射し、センサまで戻ってくるまでの時間を基に計算する方式）を用いる場合が多い

Answer: フォトダイオード

Source: ../../note/basics/measurement_and_control/_/chapters/control_theory.md

====================

センサは、制御システムを構成する要素のひとつで、動きや温度などを観測するための機械。

• サーミスタ : 温度を測定するためのセンサ
• フォトダイオード : 光を測定するためのセンサ
•  *******  : 物体の角度や角速度を測定するためのセンサ
• 距離画像センサ : 目的物までの距離を計測するためのセンサで、TOF方式(Time of Flight)（照射した光線が物体にあたって反射し、センサまで戻ってくるまでの時間を基に計算する方式）を用いる場合が多い

Answer: ジャイロセンサ

Source: ../../note/basics/measurement_and_control/_/chapters/control_theory.md

====================

センサは、制御システムを構成する要素のひとつで、動きや温度などを観測するための機械。

• サーミスタ : 温度を測定するためのセンサ
• フォトダイオード : 光を測定するためのセンサ
• ジャイロセンサ : 物体の角度や角速度を測定するためのセンサ
•  *******  : 目的物までの距離を計測するためのセンサで、TOF方式(Time of Flight)（照射した光線が物体にあたって反射し、センサまで戻ってくるまでの時間を基に計算する方式）を用いる場合が多い

Answer: 距離画像センサ

Source: ../../note/basics/measurement_and_control/_/chapters/control_theory.md

====================

センサは、制御システムを構成する要素のひとつで、動きや温度などを観測するための機械。

• サーミスタ : 温度を測定するためのセンサ
• フォトダイオード : 光を測定するためのセンサ
• ジャイロセンサ : 物体の角度や角速度を測定するためのセンサ
• 距離画像センサ : 目的物までの距離を計測するためのセンサで、 ***** (Time of Flight)（照射した光線が物体にあたって反射し、センサまで戻ってくるまでの時間を基に計算する方式）を用いる場合が多い

Answer: TOF方式

Source: ../../note/basics/measurement_and_control/_/chapters/control_theory.md

====================

 ******* は、制御システムを構成する要素のひとつで、機械や機構を物理的に動かすための装置。

Answer: アクチュエータ

Source: ../../note/basics/measurement_and_control/_/chapters/control_theory.md

====================

 ***** は、アナログ情報をデジタルデータに変換する処理。

Answer: A/D変換

Source: ../../note/basics/measurement_and_control/_/chapters/signal_processing.md

====================

 *** は、連続するアナログ情報を一定の間隔でサンプリングする処理。

Answer: 標本化

Source: ../../note/basics/measurement_and_control/_/chapters/signal_processing.md

====================

 *** は、標本化したデータをデジタル値に変換する処理。

Answer: 量子化

Source: ../../note/basics/measurement_and_control/_/chapters/signal_processing.md

====================

 *** は、量子化したデータを2進数に変換する処理。

Answer: 符号化

Source: ../../note/basics/measurement_and_control/_/chapters/signal_processing.md

====================

 ***** は、デジタルデータをアナログ情報に変換する処理。

Answer: D/A変換

Source: ../../note/basics/measurement_and_control/_/chapters/signal_processing.md

====================

 ******** （標本化定理）は、ある周波数のアナログ信号をデジタルデータに変換するときに、それをアナログ信号に復元するためには、その周波数の2倍のサンプリング周波数が必要であるという定理。

Answer: サンプリング定理

Source: ../../note/basics/measurement_and_control/_/chapters/signal_processing.md

====================

サンプリング定理（ ***** ）は、ある周波数のアナログ信号をデジタルデータに変換するときに、それをアナログ信号に復元するためには、その周波数の2倍のサンプリング周波数が必要であるという定理。

Answer: 標本化定理

Source: ../../note/basics/measurement_and_control/_/chapters/signal_processing.md

====================

 *** (Pulse Code Modulation)は、音を標本化し、量子化、符号化したデータを格納するために用いられている方式。

単純な *** では、標本化ごとのデータの変化が小さいことが多いので、データの差分を用いて動的にデータを作成することで圧縮を行うAD *** (Adaptive Differential  *** )という方式もある。

Answer: PCM

Source: ../../note/basics/measurement_and_control/_/chapters/signal_processing.md

====================

PCM(Pulse Code Modulation)は、音を標本化し、量子化、符号化したデータを格納するために用いられている方式。

単純なPCMでは、標本化ごとのデータの変化が小さいことが多いので、データの差分を用いて動的にデータを作成することで圧縮を行う ***** (Adaptive Differential PCM)という方式もある。

Answer: ADPCM

Source: ../../note/basics/measurement_and_control/_/chapters/signal_processing.md

====================

 ****** は、与えられた手順に従って計算やデータ処理を自動的に行う装置全般のことで、特に電子回路を用いてデジタルデータの入出力や演算、変換などを連続的に行うことができる電気機械を指す。

パソコンやゲーム機、スマートフォンやタブレットといった機器は全て ****** であり、最近では家電製品や自動車などに ****** が組み込まれることも珍しくない。

 ****** について正しく理解して使いこなす能力を持っていることを ****** リテラシと呼ぶ。

Answer: コンピュータ

Source: ../../note/computer/_/chapters/computer.md

====================

コンピュータは、与えられた手順に従って計算やデータ処理を自動的に行う装置全般のことで、特に電子回路を用いてデジタルデータの入出力や演算、変換などを連続的に行うことができる電気機械を指す。

パソコンやゲーム機、スマートフォンやタブレットといった機器は全てコンピュータであり、最近では家電製品や自動車などにコンピュータが組み込まれることも珍しくない。

コンピュータについて正しく理解して使いこなす能力を持っていることを ********** と呼ぶ。

Answer: コンピュータリテラシ

Source: ../../note/computer/_/chapters/computer.md

====================

第1世代のコンピュータは、主に *** を使用している。 *** は真空の容器中に電極を設けたもので、その間の電子流を制御することによって増幅や整流、発振などを行うことができる。

1942年に世界初のコンピュータ（電子計算機）としてアメリカ・アイオワ州立大学で開発されたABC(Atanasoff-Berry Computer)は、現在のコンピュータにつながる様々な発明が詰め込まれていたが、実用機ではなかった。

1946年にアメリカ・ペンシルバニア大学で開発されたENIAC(Electronic Numerical Integrator and Computer)は世界初の実用コンピュータで、大砲の弾道計算を行うことを目的としていた。ENIACは世界初のプログラム可能なコンピュータであったが、計算手順を変更するために配線を繋ぎ直さなければならないという欠点があった。

1949年にイギリス・ケンブリッジ大学で開発されたEDSAC(Electronic Delay Storage Automatic Calculator)は世界初のプログラム内蔵方式のコンピュータ。EDVACに関するレポートに刺激を受けて開発が進められ、結果としてEDVACよりも先に完成することとなった。

1950年にアメリカ・レミントンランド社で開発されたUNIVAC-I(UNIVersal Automatic Computer)はプログラム内蔵方式で世界初の商用コンピュータ。

1952年にENIACを改良して開発されたEDVAC(Electronic Discrete Variable Automatic Computer)は2進数とプログラム内蔵方式を採用したコンピュータ。「コンピュータの父」とも呼ばれるジョン・フォン・ノイマンが携わっていることでも有名。

Answer: 真空管

Source: ../../note/computer/_/chapters/computer.md

====================

第1世代のコンピュータは、主に真空管を使用している。真空管は真空の容器中に電極を設けたもので、その間の電子流を制御することによって増幅や整流、発振などを行うことができる。

1942年に世界初のコンピュータ（電子計算機）としてアメリカ・アイオワ州立大学で開発された *** (Atanasoff-Berry Computer)は、現在のコンピュータにつながる様々な発明が詰め込まれていたが、実用機ではなかった。

1946年にアメリカ・ペンシルバニア大学で開発されたENIAC(Electronic Numerical Integrator and Computer)は世界初の実用コンピュータで、大砲の弾道計算を行うことを目的としていた。ENIACは世界初のプログラム可能なコンピュータであったが、計算手順を変更するために配線を繋ぎ直さなければならないという欠点があった。

1949年にイギリス・ケンブリッジ大学で開発されたEDSAC(Electronic Delay Storage Automatic Calculator)は世界初のプログラム内蔵方式のコンピュータ。EDVACに関するレポートに刺激を受けて開発が進められ、結果としてEDVACよりも先に完成することとなった。

1950年にアメリカ・レミントンランド社で開発されたUNIVAC-I(UNIVersal Automatic Computer)はプログラム内蔵方式で世界初の商用コンピュータ。

1952年にENIACを改良して開発されたEDVAC(Electronic Discrete Variable Automatic Computer)は2進数とプログラム内蔵方式を採用したコンピュータ。「コンピュータの父」とも呼ばれるジョン・フォン・ノイマンが携わっていることでも有名。

Answer: ABC

Source: ../../note/computer/_/chapters/computer.md

====================

第1世代のコンピュータは、主に真空管を使用している。真空管は真空の容器中に電極を設けたもので、その間の電子流を制御することによって増幅や整流、発振などを行うことができる。

1942年に世界初のコンピュータ（電子計算機）としてアメリカ・アイオワ州立大学で開発されたABC(Atanasoff-Berry Computer)は、現在のコンピュータにつながる様々な発明が詰め込まれていたが、実用機ではなかった。

1946年にアメリカ・ペンシルバニア大学で開発された ***** (Electronic Numerical Integrator and Computer)は世界初の実用コンピュータで、大砲の弾道計算を行うことを目的としていた。 ***** は世界初のプログラム可能なコンピュータであったが、計算手順を変更するために配線を繋ぎ直さなければならないという欠点があった。

1949年にイギリス・ケンブリッジ大学で開発されたEDSAC(Electronic Delay Storage Automatic Calculator)は世界初のプログラム内蔵方式のコンピュータ。EDVACに関するレポートに刺激を受けて開発が進められ、結果としてEDVACよりも先に完成することとなった。

1950年にアメリカ・レミントンランド社で開発されたUNIVAC-I(UNIVersal Automatic Computer)はプログラム内蔵方式で世界初の商用コンピュータ。

1952年に ***** を改良して開発されたEDVAC(Electronic Discrete Variable Automatic Computer)は2進数とプログラム内蔵方式を採用したコンピュータ。「コンピュータの父」とも呼ばれるジョン・フォン・ノイマンが携わっていることでも有名。

Answer: ENIAC

Source: ../../note/computer/_/chapters/computer.md

====================

第1世代のコンピュータは、主に真空管を使用している。真空管は真空の容器中に電極を設けたもので、その間の電子流を制御することによって増幅や整流、発振などを行うことができる。

1942年に世界初のコンピュータ（電子計算機）としてアメリカ・アイオワ州立大学で開発されたABC(Atanasoff-Berry Computer)は、現在のコンピュータにつながる様々な発明が詰め込まれていたが、実用機ではなかった。

1946年にアメリカ・ペンシルバニア大学で開発されたENIAC(Electronic Numerical Integrator and Computer)は世界初の実用コンピュータで、大砲の弾道計算を行うことを目的としていた。ENIACは世界初のプログラム可能なコンピュータであったが、計算手順を変更するために配線を繋ぎ直さなければならないという欠点があった。

1949年にイギリス・ケンブリッジ大学で開発された ***** (Electronic Delay Storage Automatic Calculator)は世界初のプログラム内蔵方式のコンピュータ。EDVACに関するレポートに刺激を受けて開発が進められ、結果としてEDVACよりも先に完成することとなった。

1950年にアメリカ・レミントンランド社で開発されたUNIVAC-I(UNIVersal Automatic Computer)はプログラム内蔵方式で世界初の商用コンピュータ。

1952年にENIACを改良して開発されたEDVAC(Electronic Discrete Variable Automatic Computer)は2進数とプログラム内蔵方式を採用したコンピュータ。「コンピュータの父」とも呼ばれるジョン・フォン・ノイマンが携わっていることでも有名。

Answer: EDSAC

Source: ../../note/computer/_/chapters/computer.md

====================

第1世代のコンピュータは、主に真空管を使用している。真空管は真空の容器中に電極を設けたもので、その間の電子流を制御することによって増幅や整流、発振などを行うことができる。

1942年に世界初のコンピュータ（電子計算機）としてアメリカ・アイオワ州立大学で開発されたABC(Atanasoff-Berry Computer)は、現在のコンピュータにつながる様々な発明が詰め込まれていたが、実用機ではなかった。

1946年にアメリカ・ペンシルバニア大学で開発されたENIAC(Electronic Numerical Integrator and Computer)は世界初の実用コンピュータで、大砲の弾道計算を行うことを目的としていた。ENIACは世界初のプログラム可能なコンピュータであったが、計算手順を変更するために配線を繋ぎ直さなければならないという欠点があった。

1949年にイギリス・ケンブリッジ大学で開発されたEDSAC(Electronic Delay Storage Automatic Calculator)は世界初のプログラム内蔵方式のコンピュータ。EDVACに関するレポートに刺激を受けて開発が進められ、結果としてEDVACよりも先に完成することとなった。

1950年にアメリカ・レミントンランド社で開発された ******** (UNIVersal Automatic Computer)はプログラム内蔵方式で世界初の商用コンピュータ。

1952年にENIACを改良して開発されたEDVAC(Electronic Discrete Variable Automatic Computer)は2進数とプログラム内蔵方式を採用したコンピュータ。「コンピュータの父」とも呼ばれるジョン・フォン・ノイマンが携わっていることでも有名。

Answer: UNIVAC-I

Source: ../../note/computer/_/chapters/computer.md

====================

第1世代のコンピュータは、主に真空管を使用している。真空管は真空の容器中に電極を設けたもので、その間の電子流を制御することによって増幅や整流、発振などを行うことができる。

1942年に世界初のコンピュータ（電子計算機）としてアメリカ・アイオワ州立大学で開発されたABC(Atanasoff-Berry Computer)は、現在のコンピュータにつながる様々な発明が詰め込まれていたが、実用機ではなかった。

1946年にアメリカ・ペンシルバニア大学で開発されたENIAC(Electronic Numerical Integrator and Computer)は世界初の実用コンピュータで、大砲の弾道計算を行うことを目的としていた。ENIACは世界初のプログラム可能なコンピュータであったが、計算手順を変更するために配線を繋ぎ直さなければならないという欠点があった。

1949年にイギリス・ケンブリッジ大学で開発されたEDSAC(Electronic Delay Storage Automatic Calculator)は世界初のプログラム内蔵方式のコンピュータ。 ***** に関するレポートに刺激を受けて開発が進められ、結果として ***** よりも先に完成することとなった。

1950年にアメリカ・レミントンランド社で開発されたUNIVAC-I(UNIVersal Automatic Computer)はプログラム内蔵方式で世界初の商用コンピュータ。

1952年にENIACを改良して開発された ***** (Electronic Discrete Variable Automatic Computer)は2進数とプログラム内蔵方式を採用したコンピュータ。「コンピュータの父」とも呼ばれるジョン・フォン・ノイマンが携わっていることでも有名。

Answer: EDVAC

Source: ../../note/computer/_/chapters/computer.md

====================

第1世代のコンピュータは、主に真空管を使用している。真空管は真空の容器中に電極を設けたもので、その間の電子流を制御することによって増幅や整流、発振などを行うことができる。

1942年に世界初のコンピュータ（電子計算機）としてアメリカ・アイオワ州立大学で開発されたABC(Atanasoff-Berry Computer)は、現在のコンピュータにつながる様々な発明が詰め込まれていたが、実用機ではなかった。

1946年にアメリカ・ペンシルバニア大学で開発されたENIAC(Electronic Numerical Integrator and Computer)は世界初の実用コンピュータで、大砲の弾道計算を行うことを目的としていた。ENIACは世界初のプログラム可能なコンピュータであったが、計算手順を変更するために配線を繋ぎ直さなければならないという欠点があった。

1949年にイギリス・ケンブリッジ大学で開発されたEDSAC(Electronic Delay Storage Automatic Calculator)は世界初のプログラム内蔵方式のコンピュータ。EDVACに関するレポートに刺激を受けて開発が進められ、結果としてEDVACよりも先に完成することとなった。

1950年にアメリカ・レミントンランド社で開発されたUNIVAC-I(UNIVersal Automatic Computer)はプログラム内蔵方式で世界初の商用コンピュータ。

1952年にENIACを改良して開発されたEDVAC(Electronic Discrete Variable Automatic Computer)は2進数とプログラム内蔵方式を採用したコンピュータ。「コンピュータの父」とも呼ばれる ************ が携わっていることでも有名。

Answer: ジョン・フォン・ノイマン

Source: ../../note/computer/_/chapters/computer.md

====================

第2世代のコンピュータは、主に ****** などの半導体を使用している。 ****** は電子回路中で信号を増幅したりスイッチングしたりすることができる半導体素子。 ****** の登場によりコンピュータの小型化（ダウンサイジング）、低価格化が進んだ。また真空管と比べても信頼性が高く、発熱量も少ないため寿命が長いという利点があった。

この世代のコンピュータとしては、IBMが開発したIBM1400シリーズが世界的に人気が高かった。

Answer: トランジスタ

Source: ../../note/computer/_/chapters/computer.md

====================

第2世代のコンピュータは、主にトランジスタなどの半導体を使用している。トランジスタは電子回路中で信号を増幅したりスイッチングしたりすることができる半導体素子。トランジスタの登場によりコンピュータの小型化（ ******** ）、低価格化が進んだ。また真空管と比べても信頼性が高く、発熱量も少ないため寿命が長いという利点があった。

この世代のコンピュータとしては、IBMが開発したIBM1400シリーズが世界的に人気が高かった。

Answer: ダウンサイジング

Source: ../../note/computer/_/chapters/computer.md

====================

第2世代のコンピュータは、主にトランジスタなどの半導体を使用している。トランジスタは電子回路中で信号を増幅したりスイッチングしたりすることができる半導体素子。トランジスタの登場によりコンピュータの小型化（ダウンサイジング）、低価格化が進んだ。また真空管と比べても信頼性が高く、発熱量も少ないため寿命が長いという利点があった。

この世代のコンピュータとしては、IBMが開発した *********** が世界的に人気が高かった。

Answer: IBM1400シリーズ

Source: ../../note/computer/_/chapters/computer.md

====================

第3世代のコンピュータは主に集積回路を使用している。集積回路は半導体基板上に様々な回路素子を連結したもので、大変サイズが小さいことから *** と呼ばれる。ICの登場によりコンピュータの小型化、高速化が一気に進んだ。

この世代のコンピュータとしては、IBMが開発したIBM 360シリーズが有名。

Answer: チップ

Source: ../../note/computer/_/chapters/computer.md

====================

第3世代のコンピュータは主に集積回路を使用している。集積回路は半導体基板上に様々な回路素子を連結したもので、大変サイズが小さいことからチップと呼ばれる。ICの登場によりコンピュータの小型化、高速化が一気に進んだ。

この世代のコンピュータとしては、IBMが開発した *********** が有名。

Answer: IBM 360シリーズ

Source: ../../note/computer/_/chapters/computer.md

====================

第3.5世代のコンピュータは、IC回路の進歩により生まれたLSIを使用している。LSIはICと同じ意味で使われることもあるが、もともとはICよりも集積度が高いものを指す用語。

インテルが演算回路や制御回路を1チップに集積した ********* を開発したことで、さらにコンピュータの小型化、高速化が進んだ。また、スーパーコンピュータの登場により科学技術計算などの高速演算も可能となった。

Answer: マイクロプロセッサ

Source: ../../note/computer/_/chapters/computer.md

====================

 *********** （パソコン、PC）は、個人が使用するのに適した小型で低価格のコンピュータ。形状やサイズに焦点を当てるとノートPC（ラップトップPC）、デスクトップPC、タブレットPCなどに分類できる。

Answer: パーソナルコンピュータ

Source: ../../note/computer/_/chapters/computer.md

====================

 ********* は、3次元の設計やCG、科学計算などに用いられる、一般のPCよりも高速な処理が可能なPC。CPUを複数台搭載していたり、高速なグラフィックボードを搭載していたりと、PCの中でも高額な部類。

Answer: ワークステーション

Source: ../../note/computer/_/chapters/computer.md

====================

 *** は、クライアントと呼ばれる他のコンピュータやソフトウェアからの要求に応じてデータやサービスを提供するためのコンピュータ。ホームページを配信するWeb *** やメールを配信するメール *** 、ファイルを管理するためのファイル *** などに分類できる。

Answer: サーバ

Source: ../../note/computer/_/chapters/computer.md

====================

 ******* は、企業などの巨大な組織の根幹情報システムなどに使用されるコンピュータ。多数の利用者や業務で共有し、大量の重要なデータや処理を扱うため、高い性能や信頼性を求められる。

Answer: メインフレーム

Source: ../../note/computer/_/chapters/computer.md

====================

 ********** は、科学的な研究目的で用いられる、大量の数値演算を高速で行うことができるコンピュータ。気象の予測や宇宙産業の領域で活躍している。

Answer: スーパーコンピュータ

Source: ../../note/computer/_/chapters/computer.md

====================

 ******** は、量子力学の原理を計算に応用したコンピュータ。素粒子の世界にみられる状態である重ね合わせを利用して、従来の電子回路では不可能な超並列的な処理を行うことができる。

Answer: 量子コンピュータ

Source: ../../note/computer/_/chapters/computer.md

====================

量子コンピュータは、量子力学の原理を計算に応用したコンピュータ。素粒子の世界にみられる状態である ***** を利用して、従来の電子回路では不可能な超並列的な処理を行うことができる。

Answer: 重ね合わせ

Source: ../../note/computer/_/chapters/computer.md

====================

 ****** は、コンピュータを構成する要素のうち、回路や装置、設備などの物理的な実体を伴うもの。ディスプレイやキーボード、マウス、プリンタ等は ****** に分類される。

•  ****** 

Answer: ハードウェア

Source: ../../note/computer/_/chapters/computer.md

====================

 ****** は、コンピュータを動作させるためのプログラム。コンピュータの根幹的な制御に関わる基本 ****** と、特定の機能や目的のためにつくられた応用 ****** がある。

•  ****** 

Answer: ソフトウェア

Source: ../../note/computer/_/chapters/computer.md

====================

 ******* は、コンピュータに内蔵されるソフトウェアの一種で、本体内部の回路や装置などの基本的な制御を行う機能を持ったもの。機械の内部に固定的に組み込まれ内容の変更が少ないことから、ハードウェアとソフトウェアの中間的な存在として扱われる。

Answer: ファームウェア

Source: ../../note/computer/_/chapters/computer.md

====================

 ****** は、ソフトウェアの一種で、基本ソフトウェアと応用ソフトウェアの中間に位置し、様々なソフトウェアから共通して利用される機能を提供するもの。基本ソフトウェアよりも分野や用途が限定された具体的な機能を提供する場合が多い。

Answer: ミドルウェア

Source: ../../note/computer/_/chapters/computer.md

====================

 ************* は、コンピュータにおけるハードウェアやソフトウェア、ネットワークなどの設計思想。

Answer: コンピュータアーキテクチャ

Source: ../../note/computer/_/chapters/computer.md

====================

 ********* （ストアドプログラム方式）は、プログラムをデータとして記憶装置に格納しておき、これを読み込みながら実行するコンピュータアーキテクチャ。 ********* ではない最初期のコンピュータは、計算手順を変えるために配線をつなぎなおす必要があったため、汎用性に乏しかった。 ********* ではプログラムを外部から与えることで、ひとつのコンピュータで様々な処理を行えるようになっている。現在使われているほとんどのコンピュータは ********* を採用している。

 ********* を採用したコンピュータは、ノイマン型コンピュータと呼ばれている。これは ********* を採用した初期のコンピュータであるEDVACに関する論文の著者、ジョン・フォン・ノイマンに由来している。

ノイマン型コンピュータでは、記憶装置から演算装置にプログラムをデータとして伝送する際の速度がボトルネックとなりやすい。これをフォンノイマンボトルネックという。

Answer: プログラム内蔵方式

Source: ../../note/computer/_/chapters/computer.md

====================

プログラム内蔵方式（ *********** ）は、プログラムをデータとして記憶装置に格納しておき、これを読み込みながら実行するコンピュータアーキテクチャ。プログラム内蔵方式ではない最初期のコンピュータは、計算手順を変えるために配線をつなぎなおす必要があったため、汎用性に乏しかった。プログラム内蔵方式ではプログラムを外部から与えることで、ひとつのコンピュータで様々な処理を行えるようになっている。現在使われているほとんどのコンピュータはプログラム内蔵方式を採用している。

プログラム内蔵方式を採用したコンピュータは、ノイマン型コンピュータと呼ばれている。これはプログラム内蔵方式を採用した初期のコンピュータであるEDVACに関する論文の著者、ジョン・フォン・ノイマンに由来している。

ノイマン型コンピュータでは、記憶装置から演算装置にプログラムをデータとして伝送する際の速度がボトルネックとなりやすい。これをフォンノイマンボトルネックという。

Answer: ストアドプログラム方式

Source: ../../note/computer/_/chapters/computer.md

====================

プログラム内蔵方式（ストアドプログラム方式）は、プログラムをデータとして記憶装置に格納しておき、これを読み込みながら実行するコンピュータアーキテクチャ。プログラム内蔵方式ではない最初期のコンピュータは、計算手順を変えるために配線をつなぎなおす必要があったため、汎用性に乏しかった。プログラム内蔵方式ではプログラムを外部から与えることで、ひとつのコンピュータで様々な処理を行えるようになっている。現在使われているほとんどのコンピュータはプログラム内蔵方式を採用している。

プログラム内蔵方式を採用したコンピュータは、 *********** と呼ばれている。これはプログラム内蔵方式を採用した初期のコンピュータであるEDVACに関する論文の著者、ジョン・フォン・ノイマンに由来している。

 *********** では、記憶装置から演算装置にプログラムをデータとして伝送する際の速度がボトルネックとなりやすい。これをフォンノイマンボトルネックという。

Answer: ノイマン型コンピュータ

Source: ../../note/computer/_/chapters/computer.md

====================

プログラム内蔵方式（ストアドプログラム方式）は、プログラムをデータとして記憶装置に格納しておき、これを読み込みながら実行するコンピュータアーキテクチャ。プログラム内蔵方式ではない最初期のコンピュータは、計算手順を変えるために配線をつなぎなおす必要があったため、汎用性に乏しかった。プログラム内蔵方式ではプログラムを外部から与えることで、ひとつのコンピュータで様々な処理を行えるようになっている。現在使われているほとんどのコンピュータはプログラム内蔵方式を採用している。

プログラム内蔵方式を採用したコンピュータは、ノイマン型コンピュータと呼ばれている。これはプログラム内蔵方式を採用した初期のコンピュータであるEDVACに関する論文の著者、ジョン・フォン・ノイマンに由来している。

ノイマン型コンピュータでは、記憶装置から演算装置にプログラムをデータとして伝送する際の速度がボトルネックとなりやすい。これを ************* という。

Answer: フォンノイマンボトルネック

Source: ../../note/computer/_/chapters/computer.md

====================

 ****** は、命令を主記憶装置から取り出して解読し、その内容によってデータを取り出し、処理を実行するという一連の流れを繰り返すことでプログラムを実行する方式。

Answer: 逐次制御方式

Source: ../../note/computer/_/chapters/computer.md

====================

 ****** は、電源を切ってもデータを保持しておくことができる不揮発性の記憶装置。主記憶装置に比べて読み書きの速度は遅いが、大容量なのが特徴。

Answer: 補助記憶装置

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

 ********* （HDD: Hard Disk Drive、磁気ディスク装置）は、磁気ヘッドがディスク面を移動し、磁性体の磁性の向きを変えることでデータの読み書きを行う。ディスク面と磁気ヘッドは微小な間隔を保って浮いているため、摩耗しないようになっている。ディスクは常に高速回転している。

Answer: ハードディスク装置

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

ハードディスク装置（ *** : Hard Disk Drive、磁気ディスク装置）は、磁気ヘッドがディスク面を移動し、磁性体の磁性の向きを変えることでデータの読み書きを行う。ディスク面と磁気ヘッドは微小な間隔を保って浮いているため、摩耗しないようになっている。ディスクは常に高速回転している。

Answer: HDD

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

ハードディスク装置（HDD: Hard Disk Drive、 ******** ）は、磁気ヘッドがディスク面を移動し、磁性体の磁性の向きを変えることでデータの読み書きを行う。ディスク面と磁気ヘッドは微小な間隔を保って浮いているため、摩耗しないようになっている。ディスクは常に高速回転している。

Answer: 磁気ディスク装置

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

 **** （磁気ディスク）は、情報が記録される媒体そのもので、表面の磁性体の磁性の向きによって情報を記録する。

Answer: プラッタ

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

プラッタ（ ****** ）は、情報が記録される媒体そのもので、表面の磁性体の磁性の向きによって情報を記録する。

Answer: 磁気ディスク

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

 ******** は、プラッタを回転させるための動力。

Answer: スピンドルモータ

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

 ******* （スイングアーム）は、磁気ヘッドとアクチュエータを結びつけるアーム。

Answer: アクセスアーム

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

アクセスアーム（ ******* ）は、磁気ヘッドとアクチュエータを結びつけるアーム。

Answer: スイングアーム

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

 ***** は、アクセスアームの先端に取り付けられており、プラッタ表面の磁気記録層に対して磁気データを読み書きする部品。

Answer: 磁気ヘッド

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

 ******* （位置決め装置、ヘッドポジショナ）は、磁気ヘッドをプラッタ上の適切な位置に移動させるための部品。

Answer: アクチュエータ

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

アクチュエータ（ ****** 、ヘッドポジショナ）は、磁気ヘッドをプラッタ上の適切な位置に移動させるための部品。

Answer: 位置決め装置

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

アクチュエータ（位置決め装置、 ******** ）は、磁気ヘッドをプラッタ上の適切な位置に移動させるための部品。

Answer: ヘッドポジショナ

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

 **** は、磁気ディスクに同心円上に設けられたデータの記憶領域。1つの円を1 **** という。

Answer: トラック

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

 *** は、トラックを放射状に分割した記憶領域。

Answer: セクタ

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

 **** は、複数のセクタをまとめた物理的な単位。

Answer: クラスタ

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

 **** は、データを記録する最小単位で、1つのセクタが複数の **** に区切られる。

Answer: レコード

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

 **** は、レコードの読み書きの効率化のために複数のレコードをまとめた物理的な単位。

Answer: ブロック

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

 **** は、同心円状のトラックの集合。

Answer: シリンダ

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

 ****** は、ハードディスクにデータの入出力を要求してから実際にデータの転送が完了するまでにかかる時間で、次の要素によって決まる。

• 平均シーク時間（平均位置決め時間） : 磁気ヘッドを目的のトラックまで移動するのに要する時間
• 平均サーチ時間（平均回転待ち時間） : トラックで該当のデータの先頭が磁気ヘッドの位置に来るまでに要する時間（トラックの回転数から算出）
• データ転送時間 : データの転送に要する時間

ハードディスクへの ******  = 平均待ち時間 + データ転送時間 = 平均シーク時間 + 平均サーチ時間 + データ転送時間

Answer: アクセス時間

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

アクセス時間は、ハードディスクにデータの入出力を要求してから実際にデータの転送が完了するまでにかかる時間で、次の要素によって決まる。

•  ******* （平均位置決め時間） : 磁気ヘッドを目的のトラックまで移動するのに要する時間
• 平均サーチ時間（平均回転待ち時間） : トラックで該当のデータの先頭が磁気ヘッドの位置に来るまでに要する時間（トラックの回転数から算出）
• データ転送時間 : データの転送に要する時間

ハードディスクへのアクセス時間 = 平均待ち時間 + データ転送時間 =  *******  + 平均サーチ時間 + データ転送時間

Answer: 平均シーク時間

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

アクセス時間は、ハードディスクにデータの入出力を要求してから実際にデータの転送が完了するまでにかかる時間で、次の要素によって決まる。

• 平均シーク時間（ ******** ） : 磁気ヘッドを目的のトラックまで移動するのに要する時間
• 平均サーチ時間（平均回転待ち時間） : トラックで該当のデータの先頭が磁気ヘッドの位置に来るまでに要する時間（トラックの回転数から算出）
• データ転送時間 : データの転送に要する時間

ハードディスクへのアクセス時間 = 平均待ち時間 + データ転送時間 = 平均シーク時間 + 平均サーチ時間 + データ転送時間

Answer: 平均位置決め時間

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

アクセス時間は、ハードディスクにデータの入出力を要求してから実際にデータの転送が完了するまでにかかる時間で、次の要素によって決まる。

• 平均シーク時間（平均位置決め時間） : 磁気ヘッドを目的のトラックまで移動するのに要する時間
•  ******* （平均回転待ち時間） : トラックで該当のデータの先頭が磁気ヘッドの位置に来るまでに要する時間（トラックの回転数から算出）
• データ転送時間 : データの転送に要する時間

ハードディスクへのアクセス時間 = 平均待ち時間 + データ転送時間 = 平均シーク時間 +  *******  + データ転送時間

Answer: 平均サーチ時間

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

アクセス時間は、ハードディスクにデータの入出力を要求してから実際にデータの転送が完了するまでにかかる時間で、次の要素によって決まる。

• 平均シーク時間（平均位置決め時間） : 磁気ヘッドを目的のトラックまで移動するのに要する時間
• 平均サーチ時間（ ******** ） : トラックで該当のデータの先頭が磁気ヘッドの位置に来るまでに要する時間（トラックの回転数から算出）
• データ転送時間 : データの転送に要する時間

ハードディスクへのアクセス時間 = 平均待ち時間 + データ転送時間 = 平均シーク時間 + 平均サーチ時間 + データ転送時間

Answer: 平均回転待ち時間

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

アクセス時間は、ハードディスクにデータの入出力を要求してから実際にデータの転送が完了するまでにかかる時間で、次の要素によって決まる。

• 平均シーク時間（平均位置決め時間） : 磁気ヘッドを目的のトラックまで移動するのに要する時間
• 平均サーチ時間（平均回転待ち時間） : トラックで該当のデータの先頭が磁気ヘッドの位置に来るまでに要する時間（トラックの回転数から算出）
•  *******  : データの転送に要する時間

ハードディスクへのアクセス時間 = 平均待ち時間 +  *******  = 平均シーク時間 + 平均サーチ時間 +  ******* 

Answer: データ転送時間

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

 ********** （断片化）は、記憶装置に対して書き込みや削除といった操作を繰り返していくことで、データの保存間隔が飛び飛びになる状態。まとまった空き容量が少なくなると、ファイルが小さな容量に分割されて保存されるといった状態になる。

ハードディスクでは ********** が発生するとアクセス時間が増加してしまう。

また、このようなストレージの ********** と似た現象として、メモリでも ********** が起こる。

Answer: フラグメンテーション

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

フラグメンテーション（ *** ）は、記憶装置に対して書き込みや削除といった操作を繰り返していくことで、データの保存間隔が飛び飛びになる状態。まとまった空き容量が少なくなると、ファイルが小さな容量に分割されて保存されるといった状態になる。

ハードディスクではフラグメンテーションが発生するとアクセス時間が増加してしまう。

また、このようなストレージのフラグメンテーションと似た現象として、メモリでもフラグメンテーションが起こる。

Answer: 断片化

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

 *********** （デフラグ）は、フラグメンテーションを解消する処理。小さな空き領域を1つにまとめたり、断片化したデータを連続した領域に移したりする。

Answer: デフラグメンテーション

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

 **** メンテーション（ **** ）は、フラグメンテーションを解消する処理。小さな空き領域を1つにまとめたり、断片化したデータを連続した領域に移したりする。

Answer: デフラグ

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

 ***** は、レーザ光を用いて樹脂のディスクにデータを読み書きする補助記憶装置。 ***** には、あらかじめデータが書き込まれており新たに読み書きができない読み出し専用型、追加の書き込みのみ可能で消去はできない追記型、消去も書き込みも可能な書換え型がある。

追記型にはCD-RやDVD-R、BD-R、BD-R XL、書換え型にはCD-RWやDVD-RW、BD-RE、BD-RE XLがある。

Answer: 光ディスク

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

====================

光ディスクは、レーザ光を用いて樹脂のディスクにデータを読み書きする補助記憶装置。光ディスクには、あらかじめデータが書き込まれており新たに読み書きができない ******* 、追加の書き込みのみ可能で消去はできない追記型、消去も書き込みも可能な書換え型がある。

追記型にはCD-RやDVD-R、BD-R、BD-R XL、書換え型にはCD-RWやDVD-RW、BD-RE、BD-RE XLがある。

Answer: 読み出し専用型

Source: ../../note/computer/hardware/_/chapters/auxiliary_memory_unit.md

