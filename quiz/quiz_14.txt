====================

オペレーティングシステム( ** : Operating system)は、アプリケーションソフトウェアにハードウェア資源を分配したり、ユーザや他のプログラムに対して使いやすいユーティリティプログラムを提供したりといった、コンピュータ全体の制御を行うプログラム。他にも、ファイル管理、ジョブ管理やプロセス管理、記憶管理や仮想記憶管理といった役割がある。オペレーティングシステムは基本ソフトウェアに分類される。

Answer: OS

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ******* は、Microsoftが提供するオペレーティングシステムで、個人利用のOSとしては世界で最も利用者数が多い。技術的な知識を有さないユーザ数も多いため、攻撃者からも狙われやすく、ウィルスの種類も多い。

Answer: Windows

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ***** は、Appleが提供するオペレーティングシステムで、美しいUIや高いUXが特徴。一般ビジネスや個人利用においてはWindowsに及ばないものの、クリエイティブな分野で活躍している。

Answer: macOS

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 **** は、1960年代にアメリカのAT&T社のベル研究所で誕生したOS。同研究所でもともと開発されていたMULTICSというOSがあったが、多機能なOSを目指したことで研究が頓挫し、その片隅で開発されていたミニマルなOSである **** が様々な実験プロジェクトに用いられるようになった。当時 **** は商用として考えられていなかったため、ライセンスが無料で自由に利用でき、ソースコードも配布されていたことから多くのユーザが研究や開発に利用できた。

このような背景から多くの企業や団体が独自実装した **** が登場したため、AT&Tが正式にライセンス契約を始めることとなった。AT&Tの **** をSystem Vと呼び、正式なライセンス契約を結んだ組織のみが自社のOSを **** と宣言できるようになった。一方でAT&Tとライセンス契約を結ばなかった組織のOSは **** 互換OSと呼ばれるようになった。

様々な種類の **** が広まる中、BSD（Berkeley Software Distribution: バークレー版 **** ）は初めて本格的にTCP/IPによる通信をサポートしたことで広く知られるようになった。

 **** は現在でも、IT業界やサーバの分野においては一定のシェアを有している。基本的にはCUIによる操作となっているが、GUI環境の導入も可能。

Answer: UNIX

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

UNIXは、1960年代にアメリカのAT&T社のベル研究所で誕生したOS。同研究所でもともと開発されていた ******* というOSがあったが、多機能なOSを目指したことで研究が頓挫し、その片隅で開発されていたミニマルなOSであるUNIXが様々な実験プロジェクトに用いられるようになった。当時UNIXは商用として考えられていなかったため、ライセンスが無料で自由に利用でき、ソースコードも配布されていたことから多くのユーザが研究や開発に利用できた。

このような背景から多くの企業や団体が独自実装したUNIXが登場したため、AT&Tが正式にライセンス契約を始めることとなった。AT&TのUNIXをSystem Vと呼び、正式なライセンス契約を結んだ組織のみが自社のOSをUNIXと宣言できるようになった。一方でAT&Tとライセンス契約を結ばなかった組織のOSはUNIX互換OSと呼ばれるようになった。

様々な種類のUNIXが広まる中、BSD（Berkeley Software Distribution: バークレー版UNIX）は初めて本格的にTCP/IPによる通信をサポートしたことで広く知られるようになった。

UNIXは現在でも、IT業界やサーバの分野においては一定のシェアを有している。基本的にはCUIによる操作となっているが、GUI環境の導入も可能。

Answer: MULTICS

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

UNIXは、1960年代にアメリカのAT&T社のベル研究所で誕生したOS。同研究所でもともと開発されていたMULTICSというOSがあったが、多機能なOSを目指したことで研究が頓挫し、その片隅で開発されていたミニマルなOSであるUNIXが様々な実験プロジェクトに用いられるようになった。当時UNIXは商用として考えられていなかったため、ライセンスが無料で自由に利用でき、ソースコードも配布されていたことから多くのユーザが研究や開発に利用できた。

このような背景から多くの企業や団体が独自実装したUNIXが登場したため、AT&Tが正式にライセンス契約を始めることとなった。AT&TのUNIXを ******** と呼び、正式なライセンス契約を結んだ組織のみが自社のOSをUNIXと宣言できるようになった。一方でAT&Tとライセンス契約を結ばなかった組織のOSはUNIX互換OSと呼ばれるようになった。

様々な種類のUNIXが広まる中、BSD（Berkeley Software Distribution: バークレー版UNIX）は初めて本格的にTCP/IPによる通信をサポートしたことで広く知られるようになった。

UNIXは現在でも、IT業界やサーバの分野においては一定のシェアを有している。基本的にはCUIによる操作となっているが、GUI環境の導入も可能。

Answer: System V

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

UNIXは、1960年代にアメリカのAT&T社のベル研究所で誕生したOS。同研究所でもともと開発されていたMULTICSというOSがあったが、多機能なOSを目指したことで研究が頓挫し、その片隅で開発されていたミニマルなOSであるUNIXが様々な実験プロジェクトに用いられるようになった。当時UNIXは商用として考えられていなかったため、ライセンスが無料で自由に利用でき、ソースコードも配布されていたことから多くのユーザが研究や開発に利用できた。

このような背景から多くの企業や団体が独自実装したUNIXが登場したため、AT&Tが正式にライセンス契約を始めることとなった。AT&TのUNIXをSystem Vと呼び、正式なライセンス契約を結んだ組織のみが自社のOSをUNIXと宣言できるようになった。一方でAT&Tとライセンス契約を結ばなかった組織のOSは ******** と呼ばれるようになった。

様々な種類のUNIXが広まる中、BSD（Berkeley Software Distribution: バークレー版UNIX）は初めて本格的にTCP/IPによる通信をサポートしたことで広く知られるようになった。

UNIXは現在でも、IT業界やサーバの分野においては一定のシェアを有している。基本的にはCUIによる操作となっているが、GUI環境の導入も可能。

Answer: UNIX互換OS

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

UNIXは、1960年代にアメリカのAT&T社のベル研究所で誕生したOS。同研究所でもともと開発されていたMULTICSというOSがあったが、多機能なOSを目指したことで研究が頓挫し、その片隅で開発されていたミニマルなOSであるUNIXが様々な実験プロジェクトに用いられるようになった。当時UNIXは商用として考えられていなかったため、ライセンスが無料で自由に利用でき、ソースコードも配布されていたことから多くのユーザが研究や開発に利用できた。

このような背景から多くの企業や団体が独自実装したUNIXが登場したため、AT&Tが正式にライセンス契約を始めることとなった。AT&TのUNIXをSystem Vと呼び、正式なライセンス契約を結んだ組織のみが自社のOSをUNIXと宣言できるようになった。一方でAT&Tとライセンス契約を結ばなかった組織のOSはUNIX互換OSと呼ばれるようになった。

様々な種類のUNIXが広まる中、 *** （Berkeley Software Distribution: バークレー版UNIX）は初めて本格的にTCP/IPによる通信をサポートしたことで広く知られるようになった。

UNIXは現在でも、IT業界やサーバの分野においては一定のシェアを有している。基本的にはCUIによる操作となっているが、GUI環境の導入も可能。

Answer: BSD

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ***** は、 ***** カーネル（狭義の ***** ）と、GNUが提供するソフトウェア群などから構成されるOS。UNIXを模倣して作られているが、全く別のOSとして設計されており、オープンソースソフトウェアとして提供されている。基本的にはCUIによる操作となっているが、GUI環境の導入も可能。

Answer: Linux

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ******* は、Googleが開発しているモバイル向けのOS。LinuxやOSSをベースとしており、主にスマートフォンやタブレットなどのタッチスクリーンモバイルデバイス向けに設計されている。そのほか、IoTデバイスにも組み込まれることが多い。

Answer: Android

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 *** は、Appleが開発しているモバイル用のOS。スマートフォンのiPhoneシリーズに搭載されているOSで、Androidと比べるとカスタマイズ性やコスト面では劣るものの、アプリケーションのセキュリティが高いという利点がある。

Answer: iOS

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 **** は、OSの最も核となる機能を担うソフトウェア。個々のアプリケーションから **** の機能を使用するにはシステムコールを利用する。

Answer: カーネル

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ******* （スーパーバイザコール: SVC）は、プログラムがOSのカーネルの特権的な機能を呼び出す仕組み。または、そのための命令や関数などのインタフェース仕様(API)を指す。

Answer: システムコール

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

システムコール（ ********** : SVC）は、プログラムがOSのカーネルの特権的な機能を呼び出す仕組み。または、そのための命令や関数などのインタフェース仕様(API)を指す。

Answer: スーパーバイザコール

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

システムコール（スーパーバイザコール:  *** ）は、プログラムがOSのカーネルの特権的な機能を呼び出す仕組み。または、そのための命令や関数などのインタフェース仕様(API)を指す。

Answer: SVC

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ******** は、OSの機能の中でも最小限の機能だけを有するカーネル。他の機能はサービスとして実行する。

Answer: マイクロカーネル

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ********** は、OSの機能の多くをカーネルに含み、カーネルだけで豊富な機能を提供できるもの。

Answer: モノリシックカーネル

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ******* （スーパーバイザモード）は、コンピュータに対する高い権限を持って処理を実行するモード。コンピュータ資源のあらゆる部分にアクセスが可能で、実行する命令も優先度が高くなっている。

Answer: カーネルモード

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

カーネルモード（ ********** ）は、コンピュータに対する高い権限を持って処理を実行するモード。コンピュータ資源のあらゆる部分にアクセスが可能で、実行する命令も優先度が高くなっている。

Answer: スーパーバイザモード

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ****** は、アプリケーションソフトウェアを実行するためのモードで、比較的権限が低く、アプリケーションに必要な資源だけにアクセスできる。

Answer: ユーザモード

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ****** は、OSのカーネルが使用するメモリ領域。

Answer: カーネル空間

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ***** は、アプリケーションソフトウェアが使用するメモリ領域。カーネル空間とは独立しており、互いのメモリ領域に直接アクセスすることはできない。

Answer: ユーザ空間

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ************** は、OSとファームウェアの間の通信仕様を定めた規格。

Answer: ファームウェアインタフェース

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 **** (Basic Input/Output System)は、OSの正常起動に要するハードウェアが揃っているかを確認し、ブートローダを立ち上げてコンピュータを起動するファームウェアインタフェース。

Answer: BIOS

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 **** (Unified Extensible Firmware Interface)は、近年主流となっているファームウェアインタフェース。ファームウェアをコンピュータに接続し、ハードウェアコンポーネントの初期化とOSの起動に使用される。

Answer: UEFI

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ****** （ブートストラップ）は、コンピュータにOSを読み込ませるために用いるプログラムのことで、OS自身に組み込まれている。 ****** としては、Linuxに付属しているLILO(Linux Loader)や、UNIX系OSで使われるGRUB(Grand Unified Bootloader)といったものが代表的。

Answer: ブートローダ

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

ブートローダ（ ******** ）は、コンピュータにOSを読み込ませるために用いるプログラムのことで、OS自身に組み込まれている。ブートローダとしては、Linuxに付属しているLILO(Linux Loader)や、UNIX系OSで使われるGRUB(Grand Unified Bootloader)といったものが代表的。

Answer: ブートストラップ

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

ブートローダ（ブートストラップ）は、コンピュータにOSを読み込ませるために用いるプログラムのことで、OS自身に組み込まれている。ブートローダとしては、Linuxに付属している **** (Linux Loader)や、UNIX系OSで使われるGRUB(Grand Unified Bootloader)といったものが代表的。

Answer: LILO

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

ブートローダ（ブートストラップ）は、コンピュータにOSを読み込ませるために用いるプログラムのことで、OS自身に組み込まれている。ブートローダとしては、Linuxに付属しているLILO(Linux Loader)や、UNIX系OSで使われる **** (Grand Unified Bootloader)といったものが代表的。

Answer: GRUB

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ********* は、ネットワーク上の他のコンピュータからOSを取り込んで起動する仕組み。

Answer: ネットワークブート

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ****** （デュアルブート、トリプルブート...）は、1台のコンピュータに複数のOSを組み込む機能。BIOSの設定によってブートローダの起動優先順位を入れ替えたり、 ****** 対応のブートローダによって起動時にどのOSを読み込むか選択したりする。

Answer: マルチブート

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

マルチブート（ ******* 、トリプルブート...）は、1台のコンピュータに複数のOSを組み込む機能。BIOSの設定によってブートローダの起動優先順位を入れ替えたり、マルチブート対応のブートローダによって起動時にどのOSを読み込むか選択したりする。

Answer: デュアルブート

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

マルチブート（デュアルブート、 ******* ...）は、1台のコンピュータに複数のOSを組み込む機能。BIOSの設定によってブートローダの起動優先順位を入れ替えたり、マルチブート対応のブートローダによって起動時にどのOSを読み込むか選択したりする。

Answer: トリプルブート

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 *********** は、書き換え可能なフラッシュメモリのブートローダ領域に配置されたブートローダ。

Answer: フラッシュブートローダ

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 *** は、コンピュータによって実行される仕事の単位。ユーザから見た実行単位で、単一のプログラムや連続的な一連のプログラム群を指す。1つのプログラムの実行（ *** ）はいくつかの *** ステップに分解され、さらにカーネルが処理する単位であるプロセスに分解される。

Answer: ジョブ

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ******* は、ジョブを小さな単位の処理に分けたうちの、ひとつの処理。ジョブはいくつかの ******* から構成されており、 ******* を実行する際には、カーネルの処理単位であるプロセスに分解されて実行される。

Answer: ジョブステップ

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ********* （ジョブスケジューラ）は、複数のジョブの起動や終了を制御したり、ジョブの実行・終了状態の監視などを行うソフトウェア。 ********* は、以下のプログラムから構成される。

• リーダ（ジョブ読み取り）: ジョブの入力、入力待ち行列を作成する
• イニシエータ（ジョブ開始）: 待ち行列のジョブの優先度を考慮して実行するジョブを選択し、資源を割り当てる
• ターミネータ（ジョブ終了）: 実行終了したジョブステップが使用していた資源を開放する
• ライタ（ジョブ書き出し）: 出力ジョブ待ち行列に登録されているジョブから、出力するべき情報を決定する

ジョブの実行順序を決定することをスケジューリングという。

Answer: ジョブ管理システム

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

ジョブ管理システム（ ********* ）は、複数のジョブの起動や終了を制御したり、ジョブの実行・終了状態の監視などを行うソフトウェア。ジョブ管理システムは、以下のプログラムから構成される。

• リーダ（ジョブ読み取り）: ジョブの入力、入力待ち行列を作成する
• イニシエータ（ジョブ開始）: 待ち行列のジョブの優先度を考慮して実行するジョブを選択し、資源を割り当てる
• ターミネータ（ジョブ終了）: 実行終了したジョブステップが使用していた資源を開放する
• ライタ（ジョブ書き出し）: 出力ジョブ待ち行列に登録されているジョブから、出力するべき情報を決定する

ジョブの実行順序を決定することをスケジューリングという。

Answer: ジョブスケジューラ

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

ジョブ管理システム（ジョブスケジューラ）は、複数のジョブの起動や終了を制御したり、ジョブの実行・終了状態の監視などを行うソフトウェア。ジョブ管理システムは、以下のプログラムから構成される。

•  *** （ジョブ読み取り）: ジョブの入力、入力待ち行列を作成する
• イニシエータ（ジョブ開始）: 待ち行列のジョブの優先度を考慮して実行するジョブを選択し、資源を割り当てる
• ターミネータ（ジョブ終了）: 実行終了したジョブステップが使用していた資源を開放する
• ライタ（ジョブ書き出し）: 出力ジョブ待ち行列に登録されているジョブから、出力するべき情報を決定する

ジョブの実行順序を決定することをスケジューリングという。

Answer: リーダ

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

ジョブ管理システム（ジョブスケジューラ）は、複数のジョブの起動や終了を制御したり、ジョブの実行・終了状態の監視などを行うソフトウェア。ジョブ管理システムは、以下のプログラムから構成される。

• リーダ（ジョブ読み取り）: ジョブの入力、入力待ち行列を作成する
•  ****** （ジョブ開始）: 待ち行列のジョブの優先度を考慮して実行するジョブを選択し、資源を割り当てる
• ターミネータ（ジョブ終了）: 実行終了したジョブステップが使用していた資源を開放する
• ライタ（ジョブ書き出し）: 出力ジョブ待ち行列に登録されているジョブから、出力するべき情報を決定する

ジョブの実行順序を決定することをスケジューリングという。

Answer: イニシエータ

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

ジョブ管理システム（ジョブスケジューラ）は、複数のジョブの起動や終了を制御したり、ジョブの実行・終了状態の監視などを行うソフトウェア。ジョブ管理システムは、以下のプログラムから構成される。

• リーダ（ジョブ読み取り）: ジョブの入力、入力待ち行列を作成する
• イニシエータ（ジョブ開始）: 待ち行列のジョブの優先度を考慮して実行するジョブを選択し、資源を割り当てる
•  ****** （ジョブ終了）: 実行終了したジョブステップが使用していた資源を開放する
• ライタ（ジョブ書き出し）: 出力ジョブ待ち行列に登録されているジョブから、出力するべき情報を決定する

ジョブの実行順序を決定することをスケジューリングという。

Answer: ターミネータ

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

ジョブ管理システム（ジョブスケジューラ）は、複数のジョブの起動や終了を制御したり、ジョブの実行・終了状態の監視などを行うソフトウェア。ジョブ管理システムは、以下のプログラムから構成される。

• リーダ（ジョブ読み取り）: ジョブの入力、入力待ち行列を作成する
• イニシエータ（ジョブ開始）: 待ち行列のジョブの優先度を考慮して実行するジョブを選択し、資源を割り当てる
• ターミネータ（ジョブ終了）: 実行終了したジョブステップが使用していた資源を開放する
•  *** （ジョブ書き出し）: 出力ジョブ待ち行列に登録されているジョブから、出力するべき情報を決定する

ジョブの実行順序を決定することをスケジューリングという。

Answer: ライタ

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

ジョブ管理システム（ジョブスケジューラ）は、複数のジョブの起動や終了を制御したり、ジョブの実行・終了状態の監視などを行うソフトウェア。ジョブ管理システムは、以下のプログラムから構成される。

• リーダ（ジョブ読み取り）: ジョブの入力、入力待ち行列を作成する
• イニシエータ（ジョブ開始）: 待ち行列のジョブの優先度を考慮して実行するジョブを選択し、資源を割り当てる
• ターミネータ（ジョブ終了）: 実行終了したジョブステップが使用していた資源を開放する
• ライタ（ジョブ書き出し）: 出力ジョブ待ち行列に登録されているジョブから、出力するべき情報を決定する

ジョブの実行順序を決定することを ******** という。

Answer: スケジューリング

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 *** （ジョブ制御言語: Job Control Language）は、ジョブステップを指定するための言語。 *** によってプログラムの実行順序、ジョブの実行に必要な資源などを記述する。

Answer: JCL

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

JCL（ ******* : Job Control Language）は、ジョブステップを指定するための言語。JCLによってプログラムの実行順序、ジョブの実行に必要な資源などを記述する。

Answer: ジョブ制御言語

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ********* は、オペレータからの指示を解釈してジョブスケジューラへ指示を出したり、メッセージを返す役割を担うスケジューラで、メモリ上に常駐する。

Answer: マスタスケジューラ

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ****** （スプール）は、プリンタなどの低速の入出力装置にジョブの結果を出力する場合に、一時的にデータを書き込んでおくこと、あるいはその領域。CPUを素早く解放し、出力装置がデータを受け付ける準備ができてから処理を行うことで、資源の無駄をなくす。

Answer: スプーリング

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

スプーリング（ **** ）は、プリンタなどの低速の入出力装置にジョブの結果を出力する場合に、一時的にデータを書き込んでおくこと、あるいはその領域。CPUを素早く解放し、出力装置がデータを受け付ける準備ができてから処理を行うことで、資源の無駄をなくす。

Answer: スプール

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 **** （タスク）は、コンピュータから見た仕事の単位（OSの元で実行される内部処理の単位）。ジョブ（ジョブステップ）をCPUが実行するのに適した単位に分割したもの。

Answer: プロセス

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

プロセス（ *** ）は、コンピュータから見た仕事の単位（OSの元で実行される内部処理の単位）。ジョブ（ジョブステップ）をCPUが実行するのに適した単位に分割したもの。

Answer: タスク

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ********* （タスクスケジューラ）は、複数のタスクの実行順を決定するプログラム。

Answer: タスク管理システム

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

タスク管理システム（ ********* ）は、複数のタスクの実行順を決定するプログラム。

Answer: タスクスケジューラ

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ****** は、プロセスが実行可能であるが、他の優先度の高いプロセスが実行中であるため待機している状態。プロセスは生成されるとまずとなる。そこでCPUに空きができると実行状態に移り、処理を実行する。

Answer: 実行可能状態

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 **** は、プロセスが実行されている状態。実行可能状態のプロセスのうち最も優先度が高いプロセスがこの状態になる。プロセスの実行が完了するとそのプロセスは消滅する。

Answer: 実行状態

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 **** は、入出力待ちなどにより、CPUの使用権を与えられても使用できない待ちの状態。プロセスの実行中に入出力が必要な処理などのCPU以外を使用する処理が発生すると、 **** に移る。入出力などの処理が完了すると、 **** から実行可能状態に移行する。

Answer: 待ち状態

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ***** は、コンピュータ上では処理が終了しているにも関わらず、オペレーティングシステムに残存している状態。コンピュータ資源を専有したまま停止しているため、コンピュータの動作に悪影響を及ぼす。 ***** にあるプロセスをゾンビプロセスという。

Answer: ゾンビ状態

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

ゾンビ状態は、コンピュータ上では処理が終了しているにも関わらず、オペレーティングシステムに残存している状態。コンピュータ資源を専有したまま停止しているため、コンピュータの動作に悪影響を及ぼす。ゾンビ状態にあるプロセスを ******* という。

Answer: ゾンビプロセス

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ******** （タイムスライス）は、ひとつのプロセスがCPUを利用できる時間単位。実行状態のプロセスが与えられた ******** を使い切ると、実行可能状態に遷移する。繰り返し ******** に達したプロセスは実行の優先度を下げられる。

Answer: タイムクォンタム

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

タイムクォンタム（ ******* ）は、ひとつのプロセスがCPUを利用できる時間単位。実行状態のプロセスが与えられたタイムクォンタムを使い切ると、実行可能状態に遷移する。繰り返しタイムクォンタムに達したプロセスは実行の優先度を下げられる。

Answer: タイムスライス

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ******** は、実行中のプロセスを強制的に一時中断し、他のプロセスを実行状態に遷移させる処理。優先度の高いプロセスが生成された場合や、割込みが起こった場合に発生する。

Answer: プリエンプション

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ********** は、CPUが複数のプロセスを切り替えながら実行する際に、その時点でのプロセスの実行状態（レジスタの値やプログラムカウンタなど）を保存して、別のプロセスの実行状態を復元する処理。

Answer: コンテキストスイッチ

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ***** （ノンプリエンプション方式）は、プロセスを到着順で処理する方式。FIFO(First In First Out)とも呼ばれる。

Answer: 到着順方式

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

到着順方式（ ************ ）は、プロセスを到着順で処理する方式。FIFO(First In First Out)とも呼ばれる。

Answer: ノンプリエンプション方式

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

到着順方式（ノンプリエンプション方式）は、プロセスを到着順で処理する方式。 **** (First In First Out)とも呼ばれる。

Answer: FIFO

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ****** は、プロセスの処理時間が短いものから順に処理を行う方式。

Answer: 処理時間方式

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ****** は、プロセスを優先度順で処理する方式。

Answer: 優先度順方式

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ********* は、ひとつひとつのプロセスに同じタイムクォンタムを割り当て、一定時間ごとに順番に処理を回していく方式。

Answer: ラウンドロビン方式

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ********** （プリエンプティブ方式）は、タスクに優先度を付け、優先度の高いタスクが実行可能状態になるとプリエンプションを発生させる方式。

Answer: プリエンプション方式

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

プリエンプション方式（ ********** ）は、タスクに優先度を付け、優先度の高いタスクが実行可能状態になるとプリエンプションを発生させる方式。

Answer: プリエンプティブ方式

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ************* は、複数の優先度待ち行列を持ち、高い優先度の待ち行列から順次処理していく方式。低い優先度で長時間待っているタスクは優先度を上げ、一度実行したタスクは優先度を下げるといったフィードバック調整を行う。

Answer: 多段フィードバック待ち行列

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ****************** は、割込みによってプロセスの切り替えを行うイベントドリブン方式と、優先度の高いプロセスを実行させるプリエンプション方式を組み合わせた方式。イベントは、プロセスの状態を、入出力の終了や外部からのコマンド入力などで割込みにより通知する仕組み。

Answer: イベントドリブンプリエンプション方式

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 **** ドリブンプリエンプション方式は、割込みによってプロセスの切り替えを行う **** ドリブン方式と、優先度の高いプロセスを実行させるプリエンプション方式を組み合わせた方式。 **** は、プロセスの状態を、入出力の終了や外部からのコマンド入力などで割込みにより通知する仕組み。

Answer: イベント

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ******* （タスク指名ルーチン）は、実行可能状態のプロセスを調べ、最も優先度の高いプロセスを実行状態にしたり、実行状態のプロセスを中断したりするプログラム。

Answer: ディスパッチャ

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

ディスパッチャ（ ********* ）は、実行可能状態のプロセスを調べ、最も優先度の高いプロセスを実行状態にしたり、実行状態のプロセスを中断したりするプログラム。

Answer: タスク指名ルーチン

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 **** は、プロセス中で生成された子プロセス。

Answer: スレッド

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 **** は、主記憶にプログラムを効率的に配置し、主記憶を有効に利用するための機能。

Answer: 記憶管理

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 *** は、プログラムを実行するために、補助記憶装置から主記憶装置に読み込む処理。

Answer: ロード

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ***** は、あらかじめプログラムを分けて補助記憶装置に格納しておき、必要なプログラムだけを主記憶装置にロードする方式。

Answer: オーバレイ

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ****** は、メモリの内容を補助記憶装置のスワップファイルに書き出して、他のプロセスがメモリを使えるように解放する方式。メモリからスワップに取り出すことをスワップアウト、スワップからメモリに戻すことをスワップインという。

Answer: スワッピング

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

スワッピングは、メモリの内容を補助記憶装置のスワップファイルに書き出して、他のプロセスがメモリを使えるように解放する方式。メモリからスワップに取り出すことを ******* 、スワップからメモリに戻すことをスワップインという。

Answer: スワップアウト

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

スワッピングは、メモリの内容を補助記憶装置のスワップファイルに書き出して、他のプロセスがメモリを使えるように解放する方式。メモリからスワップに取り出すことをスワップアウト、スワップからメモリに戻すことを ****** という。

Answer: スワップイン

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 **** は、主記憶装置よりも大きな領域をメモリ空間として利用できるようにする技術。補助記憶上に **** 領域を用意し、OSが自動的にデータを出し入れすることで主記憶装置を仮想的に拡張する。

Answer: 仮想記憶

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ******* は、プログラムを固定長のページという単位に分けて、ページごとに補助記憶装置の仮想記憶領域に取り出す方式。メモリから仮想記憶に取り出すことをページアウト、仮想記憶からメモリに戻すことをページインという。

Answer: ページング方式

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 *** ング方式は、プログラムを固定長の *** という単位に分けて、 *** ごとに補助記憶装置の仮想記憶領域に取り出す方式。メモリから仮想記憶に取り出すことを *** アウト、仮想記憶からメモリに戻すことを *** インという。

Answer: ページ

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

ページング方式は、プログラムを固定長のページという単位に分けて、ページごとに補助記憶装置の仮想記憶領域に取り出す方式。メモリから仮想記憶に取り出すことを ****** 、仮想記憶からメモリに戻すことをページインという。

Answer: ページアウト

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

ページング方式は、プログラムを固定長のページという単位に分けて、ページごとに補助記憶装置の仮想記憶領域に取り出す方式。メモリから仮想記憶に取り出すことをページアウト、仮想記憶からメモリに戻すことを ***** という。

Answer: ページイン

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ******** は、ページング方式において、メモリ上に必要なページがない状態。

Answer: ページフォールト

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ****** は、ページフォールトが頻繁に発生することで、ページインとページアウトが繰り返される現象。 ****** が発生すると、システムの応答速度が著しく低下する。

Answer: スラッシング

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 *********** は、ページの内容が必要となった時点で仮想記憶の内容を主記憶にロードするページング方式。

Answer: デマンドページング方式

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ********* は、将来必要とされそうな仮想記憶の内容をあらかじめ主記憶にロードしておくページング方式。

Answer: プリページング方式

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 **** (First In First Out)は、ページングのページ置き換えアルゴリズムのひとつで、最初にページインしたページを最初にページアウトする方式。

Answer: FIFO

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 *** (Least Recently Used)は、ページングのページ置き換えアルゴリズムのひとつで、最後に使用されてからの経過時間が最も長いページを最初にページアウトする方式。

Answer: LRU

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 *** (Least Frequently Used)は、ページングのページ置き換えアルゴリズムのひとつで、使用頻度が最も低いページを最初にページアウトする方式。

Answer: LFU

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ******* は、プログラムを可変長のセグメントという単位に分けて、セグメントごとに補助記憶装置の仮想記憶領域に取り出す方式。メモリから仮想記憶に取り出すことをロールアウト、仮想記憶からメモリに戻すことをロールインという。

Answer: セグメント方式

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ***** 方式は、プログラムを可変長の ***** という単位に分けて、 ***** ごとに補助記憶装置の仮想記憶領域に取り出す方式。メモリから仮想記憶に取り出すことをロールアウト、仮想記憶からメモリに戻すことをロールインという。

Answer: セグメント

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

セグメント方式は、プログラムを可変長のセグメントという単位に分けて、セグメントごとに補助記憶装置の仮想記憶領域に取り出す方式。メモリから仮想記憶に取り出すことを ****** 、仮想記憶からメモリに戻すことをロールインという。

Answer: ロールアウト

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

セグメント方式は、プログラムを可変長のセグメントという単位に分けて、セグメントごとに補助記憶装置の仮想記憶領域に取り出す方式。メモリから仮想記憶に取り出すことをロールアウト、仮想記憶からメモリに戻すことを ***** という。

Answer: ロールイン

Source: ../../note/computer/software/_/chapters/operating_system.md

====================

 ***** は、ソフトウェアを配布可能な形にしたものや、関連する機能を持つプログラムをひとつにまとめて再利用しやすくしたものを指す用語。

Answer: パッケージ

Source: ../../note/computer/software/_/chapters/package.md

====================

 **** は、単体で機能を提供されているものを組み合わせたパッケージ。例えば、インターネットは複数の通信規約の実装（プロトコル）からなっており、これらをインターネットプロトコル **** と呼ぶ。

Answer: スイート

Source: ../../note/computer/software/_/chapters/package.md

====================

 **** は、パッケージが別のパッケージを必要としていたり、必要とするパッケージのバージョンが限定されていたりといった、パッケージ間の関係性。依存するパッケージが多くなると **** も複雑化し、必要なパッケージのバージョンが異なるとプログラムが動かないといったこともある。さらに、複数のパッケージが、ひとつのパッケージの別のバージョンに依存している、といったことも起こりうる。このように **** をすべて把握して管理することが困難な場合もあるため、パッケージマネージャのような **** を解決できるツールを利用すると良い。

Answer: 依存関係

Source: ../../note/computer/software/_/chapters/package.md

