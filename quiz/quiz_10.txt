====================

 ******** は、キャッシュメモリにおけるデータの更新方法のひとつで、プロセッサがキャシュメモリに書き込みを行った場合に、すぐにはメモリにその内容を転送しない。条件を満たした場合にのみメモリに書き込まれるため、スループットは上がるが、コヒーレントが保たれないことがある。

Answer: ライトバック方式

Source: ../../note/computer/hardware/_/chapters/memory.md

====================

 ********* は、CPUとメモリのデータ転送を高速化するための技術のひとつで、データを複数のメモリバンクに順番に分割して配置しておく方法。データを読み出すときに複数のメモリバンクにほぼ同時にアクセスすることで、効率よくデータを取り出すことができる。

Answer: メモリインタリーブ

Source: ../../note/computer/hardware/_/chapters/memory.md

====================

メモリインタリーブは、CPUとメモリのデータ転送を高速化するための技術のひとつで、データを複数の ****** に順番に分割して配置しておく方法。データを読み出すときに複数の ****** にほぼ同時にアクセスすることで、効率よくデータを取り出すことができる。

Answer: メモリバンク

Source: ../../note/computer/hardware/_/chapters/memory.md

====================

 *********** は、記憶領域を管理するアルゴリズムのひとつで、記憶領域の空き領域をアドレスの下位から順番に検索して最初に見つかった空き領域を割り当てる。

Answer: ファーストフィット方式

Source: ../../note/computer/hardware/_/chapters/memory.md

====================

 ********* は、記憶領域を管理するアルゴリズムのひとつで、空き領域のうち要求されたサイズを満たす最小のものを割り当てる。

Answer: ベストフィット方式

Source: ../../note/computer/hardware/_/chapters/memory.md

====================

 ***** は、コンピュータを動作させるためのハードウェアで、処理装置にあたる。 ***** は機械語の命令を実行するためのハードウェアであり、プログラムが ***** に対応していないと実行することができない。また、 ***** の性能はコンピュータの処理性能に直結するため、 ***** がプログラムの実行要件を満たしていない場合はプログラムが利用できない場合がある。

Answer: プロセッサ

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 *** （中央演算処理装置、Central Processing Unit）は、一般的なコンピュータに含まれているプロセッサ。

Answer: CPU

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

CPU（ ******** 、Central Processing Unit）は、一般的なコンピュータに含まれているプロセッサ。

Answer: 中央演算処理装置

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 *** (Digital Signal Processor)は、A/D変換などのデジタル信号処理に特化したプロセッサ。

Answer: DSP

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 *** (Floating Point Unit)は、浮動小数点演算に特化したプロセッサ。

Answer: FPU

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 *** (Graphics Processing Unit)は、画像処理のための行列演算に特化したプロセッサ。並列的な演算を得意としているため、ディープラーニングなどにも利用されている。

Answer: GPU

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 *********** （結線論理）は、プロセッサにおける命令の実行方式のひとつで、ハードウェアによる物理的な結線により命令を実行する。

マイクロプログラム方式に比べて高速である一方、複雑な命令の実行や拡張には不利。

Answer: ワイヤードロジック方式

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

ワイヤードロジック方式（ **** ）は、プロセッサにおける命令の実行方式のひとつで、ハードウェアによる物理的な結線により命令を実行する。

マイクロプログラム方式に比べて高速である一方、複雑な命令の実行や拡張には不利。

Answer: 結線論理

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 *********** は、プロセッサにおける命令の実行方式のひとつで、CPU内のマイクロプログラム（マイクロコード）を使用して複雑な命令を実装する。マイクロプログラムは制御記憶(CS: Control Storage)と呼ばれる記憶装置に格納される。

ワイヤードロジック方式に比べて低速であるが、命令の追加や拡張が容易である。

Answer: マイクロプログラム方式

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 ********* 方式は、プロセッサにおける命令の実行方式のひとつで、CPU内の ********* （マイクロコード）を使用して複雑な命令を実装する。 ********* は制御記憶(CS: Control Storage)と呼ばれる記憶装置に格納される。

ワイヤードロジック方式に比べて低速であるが、命令の追加や拡張が容易である。

Answer: マイクロプログラム

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

マイクロプログラム方式は、プロセッサにおける命令の実行方式のひとつで、CPU内のマイクロプログラム（ ******* ）を使用して複雑な命令を実装する。マイクロプログラムは制御記憶(CS: Control Storage)と呼ばれる記憶装置に格納される。

ワイヤードロジック方式に比べて低速であるが、命令の追加や拡張が容易である。

Answer: マイクロコード

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

マイクロプログラム方式は、プロセッサにおける命令の実行方式のひとつで、CPU内のマイクロプログラム（マイクロコード）を使用して複雑な命令を実装する。マイクロプログラムは **** (CS: Control Storage)と呼ばれる記憶装置に格納される。

ワイヤードロジック方式に比べて低速であるが、命令の追加や拡張が容易である。

Answer: 制御記憶

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 **** (Reduced Instruction Set Computer)は、ワイヤードロジック方式を採用したCPUアーキテクチャ。用意されている命令の数が少ないが、その分1回の命令の処理時間が短い。また、命令の処理時間は固定長。

Answer: RISC

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 **** (Complex Instruction Set Computer)は、マイクロプログラム方式を採用したCPUアーキテクチャ。複雑な処理が短い命令で記述できるため、プログラムが短くて済む。また、命令の処理時間は命令ごとに異なる。

Answer: CISC

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 **** は、CPUに内蔵されている記憶装置で、コンピュータ内部の記憶装置の中でも最も高速で操作する。ただし、記憶できる容量は少ない。

Answer: レジスタ

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 ****** は、取り出した命令を一時的に格納しておくためのレジスタ。

Answer: 命令レジスタ

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 ********* は、次に実行する命令が格納されているメモリのアドレスを格納しておくためのレジスタ。

Answer: プログラムカウンタ

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 ******* は、プログラムをメモリ上にロードしたときの先頭アドレスを格納しておくためのレジスタ。

Answer: ベースレジスタ

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 ********** は、連続したデータの取り出しに用いるためのレジスタで、先頭からの相対位置を格納している。配列などのデータ構造を扱う際に利用される。

Answer: インデックスレジスタ

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 ******* は、演算の結果を一時的に格納しておくためのレジスタ。

Answer: アキュムレータ

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 ****** は、役割を限定せずに状況に応じて様々な使い方ができるレジスタ。

Answer: 汎用レジスタ

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 ******* は、プロセッサが1つの命令を取り出してから実行するまでの流れのことで、プロセッサは ******* を繰り返すことでプログラムを実行している。

 ******* は大きく分けて命令サイクルと実行サイクルに分けることができる。さらに、サイクルの中で行われる処理をステージと呼ばれるいくつかの段階に分けて考える。

Answer: マシンサイクル

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

マシンサイクルは、プロセッサが1つの命令を取り出してから実行するまでの流れのことで、プロセッサはマシンサイクルを繰り返すことでプログラムを実行している。

マシンサイクルは大きく分けて命令サイクルと実行サイクルに分けることができる。さらに、サイクルの中で行われる処理を **** と呼ばれるいくつかの段階に分けて考える。

Answer: ステージ

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 ****** （Iサイクル: Instruction fetch cycle）は、マシンサイクルのうち、実行する命令を主記憶装置から取り出す段階。 ****** は大きく2つのステージに分けることができる。

• フェッチ : プログラムカウンタの指すアドレスをもとに、主記憶装置に格納された命令1つを命令レジスタに取り出す
• プログラムカウンタの更新 : 次の命令の実行に備えて、プログラムカウンタの値をカウントアップする

Answer: 命令サイクル

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

命令サイクル（ ***** : Instruction fetch cycle）は、マシンサイクルのうち、実行する命令を主記憶装置から取り出す段階。命令サイクルは大きく2つのステージに分けることができる。

• フェッチ : プログラムカウンタの指すアドレスをもとに、主記憶装置に格納された命令1つを命令レジスタに取り出す
• プログラムカウンタの更新 : 次の命令の実行に備えて、プログラムカウンタの値をカウントアップする

Answer: Iサイクル

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

命令サイクル（Iサイクル: Instruction fetch cycle）は、マシンサイクルのうち、実行する命令を主記憶装置から取り出す段階。命令サイクルは大きく2つのステージに分けることができる。

•  ****  : プログラムカウンタの指すアドレスをもとに、主記憶装置に格納された命令1つを命令レジスタに取り出す
• プログラムカウンタの更新 : 次の命令の実行に備えて、プログラムカウンタの値をカウントアップする

Answer: フェッチ

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 ****** （Eサイクル、Execution cycle）は、マシンサイクルのうち、命令を実行する段階。 ****** は大きく4つのステージに分けることができる。

• デコード : 取り出した命令を解読する
• 実行アドレスの計算 : オペランド部分のアドレスを計算して、メモリ内のデータの場所を求める
• オペランドの読み出し : 計算した実行アドレスから対象となるデータを汎用レジスタに読み出す
• 命令の実行 : 汎用レジスタからデータを取り出して、演算装置で演算を行い、結果を汎用レジスタまたは主記憶装置に書き出す

Answer: 実行サイクル

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

実行サイクル（ ***** 、Execution cycle）は、マシンサイクルのうち、命令を実行する段階。実行サイクルは大きく4つのステージに分けることができる。

• デコード : 取り出した命令を解読する
• 実行アドレスの計算 : オペランド部分のアドレスを計算して、メモリ内のデータの場所を求める
• オペランドの読み出し : 計算した実行アドレスから対象となるデータを汎用レジスタに読み出す
• 命令の実行 : 汎用レジスタからデータを取り出して、演算装置で演算を行い、結果を汎用レジスタまたは主記憶装置に書き出す

Answer: Eサイクル

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

実行サイクル（Eサイクル、Execution cycle）は、マシンサイクルのうち、命令を実行する段階。実行サイクルは大きく4つのステージに分けることができる。

•  ****  : 取り出した命令を解読する
• 実行アドレスの計算 : オペランド部分のアドレスを計算して、メモリ内のデータの場所を求める
• オペランドの読み出し : 計算した実行アドレスから対象となるデータを汎用レジスタに読み出す
• 命令の実行 : 汎用レジスタからデータを取り出して、演算装置で演算を行い、結果を汎用レジスタまたは主記憶装置に書き出す

Answer: デコード

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

1つの命令は、オペレータ部とオペランド部から構成されている。

オペランド部は命令の種類によって数が異なり、オペランド部を持たない命令を ******* 、オペランド部を1つ持つ命令を1アドレス方式、オペランド部を2つ持つ命令を2アドレス方式、オペランド部を3つ持つ命令を3アドレス方式という。

Answer: 0アドレス方式

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

1つの命令は、オペレータ部とオペランド部から構成されている。

オペランド部は命令の種類によって数が異なり、オペランド部を持たない命令を0アドレス方式、オペランド部を1つ持つ命令を ******* 、オペランド部を2つ持つ命令を2アドレス方式、オペランド部を3つ持つ命令を3アドレス方式という。

Answer: 1アドレス方式

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

1つの命令は、オペレータ部とオペランド部から構成されている。

オペランド部は命令の種類によって数が異なり、オペランド部を持たない命令を0アドレス方式、オペランド部を1つ持つ命令を1アドレス方式、オペランド部を2つ持つ命令を ******* 、オペランド部を3つ持つ命令を3アドレス方式という。

Answer: 2アドレス方式

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

1つの命令は、オペレータ部とオペランド部から構成されている。

オペランド部は命令の種類によって数が異なり、オペランド部を持たない命令を0アドレス方式、オペランド部を1つ持つ命令を1アドレス方式、オペランド部を2つ持つ命令を2アドレス方式、オペランド部を3つ持つ命令を ******* という。

Answer: 3アドレス方式

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 ****** は、演算の種類を指定するオペコードが格納される部分。

Answer: オペレータ部

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 ****** は、命令の実行対象となるデータのアドレス情報が格納される部分。 ****** はアドレス修飾部とアドレス部からなる。

• アドレス修飾部 : アドレスの指定方式やアドレス修飾を行うレジスタの指定
• アドレス部 : 主記憶装置のアドレスや汎用レジスタの番号などの指定

アドレス部の指定方式としては次のような種類がある。

• 即値アドレス方式 :  ****** の内容をそのままデータとして扱う
• 直接アドレス方式 :  ****** の内容が主記憶装置上のデータのアドレスを示している
• 間接アドレス方式 :  ****** の内容が主記憶装置上でデータへのポインタを格納したアドレスを示している
• 指標アドレス方式 :  ****** の内容がある基準からの相対位置を示しており、第3オペランドで基準となるアドレスが格納されたレジスタを指定する

Answer: オペランド部

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

オペランド部は、命令の実行対象となるデータのアドレス情報が格納される部分。オペランド部は ******* とアドレス部からなる。

•  *******  : アドレスの指定方式やアドレス修飾を行うレジスタの指定
• アドレス部 : 主記憶装置のアドレスや汎用レジスタの番号などの指定

アドレス部の指定方式としては次のような種類がある。

• 即値アドレス方式 : オペランド部の内容をそのままデータとして扱う
• 直接アドレス方式 : オペランド部の内容が主記憶装置上のデータのアドレスを示している
• 間接アドレス方式 : オペランド部の内容が主記憶装置上でデータへのポインタを格納したアドレスを示している
• 指標アドレス方式 : オペランド部の内容がある基準からの相対位置を示しており、第3オペランドで基準となるアドレスが格納されたレジスタを指定する

Answer: アドレス修飾部

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

オペランド部は、命令の実行対象となるデータのアドレス情報が格納される部分。オペランド部はアドレス修飾部と ***** からなる。

• アドレス修飾部 : アドレスの指定方式やアドレス修飾を行うレジスタの指定
•  *****  : 主記憶装置のアドレスや汎用レジスタの番号などの指定

 ***** の指定方式としては次のような種類がある。

• 即値アドレス方式 : オペランド部の内容をそのままデータとして扱う
• 直接アドレス方式 : オペランド部の内容が主記憶装置上のデータのアドレスを示している
• 間接アドレス方式 : オペランド部の内容が主記憶装置上でデータへのポインタを格納したアドレスを示している
• 指標アドレス方式 : オペランド部の内容がある基準からの相対位置を示しており、第3オペランドで基準となるアドレスが格納されたレジスタを指定する

Answer: アドレス部

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

オペランド部は、命令の実行対象となるデータのアドレス情報が格納される部分。オペランド部はアドレス修飾部とアドレス部からなる。

• アドレス修飾部 : アドレスの指定方式やアドレス修飾を行うレジスタの指定
• アドレス部 : 主記憶装置のアドレスや汎用レジスタの番号などの指定

アドレス部の指定方式としては次のような種類がある。

•  ********  : オペランド部の内容をそのままデータとして扱う
• 直接アドレス方式 : オペランド部の内容が主記憶装置上のデータのアドレスを示している
• 間接アドレス方式 : オペランド部の内容が主記憶装置上でデータへのポインタを格納したアドレスを示している
• 指標アドレス方式 : オペランド部の内容がある基準からの相対位置を示しており、第3オペランドで基準となるアドレスが格納されたレジスタを指定する

Answer: 即値アドレス方式

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

オペランド部は、命令の実行対象となるデータのアドレス情報が格納される部分。オペランド部はアドレス修飾部とアドレス部からなる。

• アドレス修飾部 : アドレスの指定方式やアドレス修飾を行うレジスタの指定
• アドレス部 : 主記憶装置のアドレスや汎用レジスタの番号などの指定

アドレス部の指定方式としては次のような種類がある。

• 即値アドレス方式 : オペランド部の内容をそのままデータとして扱う
•  ********  : オペランド部の内容が主記憶装置上のデータのアドレスを示している
• 間接アドレス方式 : オペランド部の内容が主記憶装置上でデータへのポインタを格納したアドレスを示している
• 指標アドレス方式 : オペランド部の内容がある基準からの相対位置を示しており、第3オペランドで基準となるアドレスが格納されたレジスタを指定する

Answer: 直接アドレス方式

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

オペランド部は、命令の実行対象となるデータのアドレス情報が格納される部分。オペランド部はアドレス修飾部とアドレス部からなる。

• アドレス修飾部 : アドレスの指定方式やアドレス修飾を行うレジスタの指定
• アドレス部 : 主記憶装置のアドレスや汎用レジスタの番号などの指定

アドレス部の指定方式としては次のような種類がある。

• 即値アドレス方式 : オペランド部の内容をそのままデータとして扱う
• 直接アドレス方式 : オペランド部の内容が主記憶装置上のデータのアドレスを示している
•  ********  : オペランド部の内容が主記憶装置上でデータへのポインタを格納したアドレスを示している
• 指標アドレス方式 : オペランド部の内容がある基準からの相対位置を示しており、第3オペランドで基準となるアドレスが格納されたレジスタを指定する

Answer: 間接アドレス方式

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

オペランド部は、命令の実行対象となるデータのアドレス情報が格納される部分。オペランド部はアドレス修飾部とアドレス部からなる。

• アドレス修飾部 : アドレスの指定方式やアドレス修飾を行うレジスタの指定
• アドレス部 : 主記憶装置のアドレスや汎用レジスタの番号などの指定

アドレス部の指定方式としては次のような種類がある。

• 即値アドレス方式 : オペランド部の内容をそのままデータとして扱う
• 直接アドレス方式 : オペランド部の内容が主記憶装置上のデータのアドレスを示している
• 間接アドレス方式 : オペランド部の内容が主記憶装置上でデータへのポインタを格納したアドレスを示している
•  ********  : オペランド部の内容がある基準からの相対位置を示しており、第3オペランドで基準となるアドレスが格納されたレジスタを指定する

Answer: 指標アドレス方式

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 **** は、コンピュータのマザーボード上にある複数の装置をタイミングを合わせて動作させるための信号。 **** の単位時間当たりの発生回数のことを **** 周波数といい、基本的にはこの値が大きいほどプロセッサは高速に動作する。

Answer: クロック

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

クロックは、コンピュータのマザーボード上にある複数の装置をタイミングを合わせて動作させるための信号。クロックの単位時間当たりの発生回数のことを ******* といい、基本的にはこの値が大きいほどプロセッサは高速に動作する。

Answer: クロック周波数

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 *** (Cycles Per Instruction)は、1命令の実行に必要なクロック数を表す単位。この値が小さいほどプロセッサは高速に動作する。

Answer: CPI

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 **** (Million Instructions Per Second)は、1秒間に実行可能な命令数の単位。この値が大きいほどプロセッサは高速に動作する。

Answer: MIPS

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 ***** (Floating-point Operations Per Secnod)は、1秒間に実行可能な浮動小数点演算の命令数の単位。

Answer: FLOPS

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 ****** は、CPUの処理性能を評価するための尺度のひとつ。各命令ごとの実行時間を使用頻度に応じて重み付けし、平均命令実行時間を算出したもの。

事務処理用のコマーシャルミックスと、科学計算用のギブソンミックスがある。

Answer: 命令ミックス

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

命令ミックスは、CPUの処理性能を評価するための尺度のひとつ。各命令ごとの実行時間を使用頻度に応じて重み付けし、平均命令実行時間を算出したもの。

事務処理用の ********** と、科学計算用のギブソンミックスがある。

Answer: コマーシャルミックス

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

命令ミックスは、CPUの処理性能を評価するための尺度のひとつ。各命令ごとの実行時間を使用頻度に応じて重み付けし、平均命令実行時間を算出したもの。

事務処理用のコマーシャルミックスと、科学計算用の ******** がある。

Answer: ギブソンミックス

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 ****** は、命令ステージを独立して動作させることによって、複数の命令を並行して実行する方式。 ****** において最も効果を発揮するのは、各ステージの処理時間が同じ場合。そのため、 ****** に向いているはRISCアーキテクチャである。

分岐命令などによって順番が変化すると、 ****** ハザードが発生する。 ****** ハザードとは、複数の命令を実行する場合に、命令の処理を中断しなければいけない状況のこと。

• 制御ハザード : 分岐処理などで処理の順番が変わる
• データハザード : 複数の処理で同じデータを扱うことにより不具合が生じる
• 構造ハザード : 同じハードウェアを同時に使用することによる競合が原因

Answer: パイプライン

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

パイプラインは、命令ステージを独立して動作させることによって、複数の命令を並行して実行する方式。パイプラインにおいて最も効果を発揮するのは、各ステージの処理時間が同じ場合。そのため、パイプラインに向いているはRISCアーキテクチャである。

分岐命令などによって順番が変化すると、 ********** が発生する。 ********** とは、複数の命令を実行する場合に、命令の処理を中断しなければいけない状況のこと。

• 制御ハザード : 分岐処理などで処理の順番が変わる
• データハザード : 複数の処理で同じデータを扱うことにより不具合が生じる
• 構造ハザード : 同じハードウェアを同時に使用することによる競合が原因

Answer: パイプラインハザード

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

パイプラインは、命令ステージを独立して動作させることによって、複数の命令を並行して実行する方式。パイプラインにおいて最も効果を発揮するのは、各ステージの処理時間が同じ場合。そのため、パイプラインに向いているはRISCアーキテクチャである。

分岐命令などによって順番が変化すると、パイプラインハザードが発生する。パイプラインハザードとは、複数の命令を実行する場合に、命令の処理を中断しなければいけない状況のこと。

•  ******  : 分岐処理などで処理の順番が変わる
• データハザード : 複数の処理で同じデータを扱うことにより不具合が生じる
• 構造ハザード : 同じハードウェアを同時に使用することによる競合が原因

Answer: 制御ハザード

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

パイプラインは、命令ステージを独立して動作させることによって、複数の命令を並行して実行する方式。パイプラインにおいて最も効果を発揮するのは、各ステージの処理時間が同じ場合。そのため、パイプラインに向いているはRISCアーキテクチャである。

分岐命令などによって順番が変化すると、パイプラインハザードが発生する。パイプラインハザードとは、複数の命令を実行する場合に、命令の処理を中断しなければいけない状況のこと。

• 制御ハザード : 分岐処理などで処理の順番が変わる
•  *******  : 複数の処理で同じデータを扱うことにより不具合が生じる
• 構造ハザード : 同じハードウェアを同時に使用することによる競合が原因

Answer: データハザード

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

パイプラインは、命令ステージを独立して動作させることによって、複数の命令を並行して実行する方式。パイプラインにおいて最も効果を発揮するのは、各ステージの処理時間が同じ場合。そのため、パイプラインに向いているはRISCアーキテクチャである。

分岐命令などによって順番が変化すると、パイプラインハザードが発生する。パイプラインハザードとは、複数の命令を実行する場合に、命令の処理を中断しなければいけない状況のこと。

• 制御ハザード : 分岐処理などで処理の順番が変わる
• データハザード : 複数の処理で同じデータを扱うことにより不具合が生じる
•  ******  : 同じハードウェアを同時に使用することによる競合が原因

Answer: 構造ハザード

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 ********* は、ステップを更に細分化することで一度に実行できる命令数を増やす方法。

Answer: スーパパイプライン

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 ****** は、パイプラインのステージを複数同時に実行させることで効率化を実現する方法。

Answer: スーパスカラ

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 **** （超長命令語: Very Long Instruction Word）は、命令語を長くすることで複数の機能を一度に実行できるようにしたもの。パイプラインと組み合わせることもできる。

Answer: VLIW

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

VLIW（ ***** : Very Long Instruction Word）は、命令語を長くすることで複数の機能を一度に実行できるようにしたもの。パイプラインと組み合わせることもできる。

Answer: 超長命令語

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 ******** は、複数のプロセッサを同時に稼働させることで高速化を図る方法。

Answer: マルチプロセッサ

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 *********** は、複数のプロセッサが主記憶を共有する形式。外見上1つに見えるプロセッサ（コア）を封入したマルチコアプロセッサという形態も *********** の一種。

Answer: 密結合マルチプロセッサ

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

密結合マルチプロセッサは、複数のプロセッサが主記憶を共有する形式。外見上1つに見えるプロセッサ（コア）を封入した ********** という形態も密結合マルチプロセッサの一種。

Answer: マルチコアプロセッサ

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 *********** は、複数のプロセッサにそれぞれ別の主記憶を割り当てる形式。複数の独立したコンピュータシステムを用いるのと同じなので、高速な通信システムによりデータのやり取りを行う。クラスタシステムなどは *********** の一種。

Answer: 疎結合マルチプロセッサ

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

疎結合マルチプロセッサは、複数のプロセッサにそれぞれ別の主記憶を割り当てる形式。複数の独立したコンピュータシステムを用いるのと同じなので、高速な通信システムによりデータのやり取りを行う。 ******** などは疎結合マルチプロセッサの一種。

Answer: クラスタシステム

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 **** (Multiple Instruction stream, Single Data stream)は、マルチプロセッサのコンピュータシステムにおいて、複数のプロセッサで同じデータに対して異なる処理を実行する方式。

Answer: MISD

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 **** (Multiple Instruction stream, Multiple Data stream)は、マルチプロセッサのコンピュータシステムにおいて、プロセッサごとに異なる命令を実行する方式。

Answer: MIMD

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 ********** は、動作していない回路ブロックへのクロック供給を停止する方法。

Answer: クロックゲーティング

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 ********* は、動作していない回路ブロックへの電力供給を遮断する方法。

Answer: パワーゲーティング

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 *** は、実行中のプログラムを中断して別の処理を行う処理。

Answer: 割込み

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 ***** （ソフトウェア割込み）は、実行中のプログラムの内部からの割込み。

• プログラム割込み : プログラム内で0除算やオーバフローが起こったときに発生
• SVC割込み : SVC(Super Visor Call)とは、カーネルを呼び出すための命令。プログラムがOSに処理を依頼するときに行われる
• ページフォールト : 仮想記憶管理において、存在しないページにアクセスするときに行われる

Answer: 内部割込み

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

内部割込み（ ********* ）は、実行中のプログラムの内部からの割込み。

• プログラム割込み : プログラム内で0除算やオーバフローが起こったときに発生
• SVC割込み : SVC(Super Visor Call)とは、カーネルを呼び出すための命令。プログラムがOSに処理を依頼するときに行われる
• ページフォールト : 仮想記憶管理において、存在しないページにアクセスするときに行われる

Answer: ソフトウェア割込み

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

内部割込み（ソフトウェア割込み）は、実行中のプログラムの内部からの割込み。

•  ********  : プログラム内で0除算やオーバフローが起こったときに発生
• SVC割込み : SVC(Super Visor Call)とは、カーネルを呼び出すための命令。プログラムがOSに処理を依頼するときに行われる
• ページフォールト : 仮想記憶管理において、存在しないページにアクセスするときに行われる

Answer: プログラム割込み

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

内部割込み（ソフトウェア割込み）は、実行中のプログラムの内部からの割込み。

• プログラム割込み : プログラム内で0除算やオーバフローが起こったときに発生
•  ******  : SVC(Super Visor Call)とは、カーネルを呼び出すための命令。プログラムがOSに処理を依頼するときに行われる
• ページフォールト : 仮想記憶管理において、存在しないページにアクセスするときに行われる

Answer: SVC割込み

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

内部割込み（ソフトウェア割込み）は、実行中のプログラムの内部からの割込み。

• プログラム割込み : プログラム内で0除算やオーバフローが起こったときに発生
•  *** 割込み :  *** (Super Visor Call)とは、カーネルを呼び出すための命令。プログラムがOSに処理を依頼するときに行われる
• ページフォールト : 仮想記憶管理において、存在しないページにアクセスするときに行われる

Answer: SVC

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

内部割込み（ソフトウェア割込み）は、実行中のプログラムの内部からの割込み。

• プログラム割込み : プログラム内で0除算やオーバフローが起こったときに発生
• SVC割込み : SVC(Super Visor Call)とは、カーネルを呼び出すための命令。プログラムがOSに処理を依頼するときに行われる
•  ********  : 仮想記憶管理において、存在しないページにアクセスするときに行われる

Answer: ページフォールト

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 ***** （ハードウェア割込み）は、実行中のプログラム以外の、ハードウェア関連の割込み。

• タイマ割込み : タイマから行われる
• 機械チェック割込み : ハードウェアの異常が検出されたときに行われる
• 入出力割込み : キーボードなどの入出力装置から行われる
• コンソール割込み : コンソールからスイッチが行われたときに発生する

Answer: 外部割込み

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

外部割込み（ ********* ）は、実行中のプログラム以外の、ハードウェア関連の割込み。

• タイマ割込み : タイマから行われる
• 機械チェック割込み : ハードウェアの異常が検出されたときに行われる
• 入出力割込み : キーボードなどの入出力装置から行われる
• コンソール割込み : コンソールからスイッチが行われたときに発生する

Answer: ハードウェア割込み

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

外部割込み（ハードウェア割込み）は、実行中のプログラム以外の、ハードウェア関連の割込み。

•  ******  : タイマから行われる
• 機械チェック割込み : ハードウェアの異常が検出されたときに行われる
• 入出力割込み : キーボードなどの入出力装置から行われる
• コンソール割込み : コンソールからスイッチが行われたときに発生する

Answer: タイマ割込み

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

外部割込み（ハードウェア割込み）は、実行中のプログラム以外の、ハードウェア関連の割込み。

• タイマ割込み : タイマから行われる
•  *********  : ハードウェアの異常が検出されたときに行われる
• 入出力割込み : キーボードなどの入出力装置から行われる
• コンソール割込み : コンソールからスイッチが行われたときに発生する

Answer: 機械チェック割込み

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

外部割込み（ハードウェア割込み）は、実行中のプログラム以外の、ハードウェア関連の割込み。

• タイマ割込み : タイマから行われる
• 機械チェック割込み : ハードウェアの異常が検出されたときに行われる
•  ******  : キーボードなどの入出力装置から行われる
• コンソール割込み : コンソールからスイッチが行われたときに発生する

Answer: 入出力割込み

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

外部割込み（ハードウェア割込み）は、実行中のプログラム以外の、ハードウェア関連の割込み。

• タイマ割込み : タイマから行われる
• 機械チェック割込み : ハードウェアの異常が検出されたときに行われる
• 入出力割込み : キーボードなどの入出力装置から行われる
•  ********  : コンソールからスイッチが行われたときに発生する

Answer: コンソール割込み

Source: ../../note/computer/hardware/_/chapters/processor.md

====================

 **** は、ユーザがシェルに対して与える命令。様々なオプションを付与するなどして、1行に入力するには長い場合は、 \ を入力して改行することができる。

Answer: コマンド

Source: ../../note/computer/linux/_/chapters/basic_command.md

====================

 ****** は、様々な機能をまとめたコマンドに対して、具体的な操作の種類を指定する命令。第一コマンドに続けて指定する。以下の例では、 systemctl コマンドの ****** として start を指定している。

$ systemctl start httpd

Answer: サブコマンド

Source: ../../note/computer/linux/_/chapters/basic_command.md

====================

 ***** （引数、フラグ、パラメータ）は、コマンドの操作対象や処理内容の詳細を指定する部分。 ***** の形式はコマンドによって異なるが、 - から始まるショート ***** や、 -- から始まるロング ***** などが一般的。

Answer: オプション

Source: ../../note/computer/linux/_/chapters/basic_command.md

====================

オプション（ ** 、フラグ、パラメータ）は、コマンドの操作対象や処理内容の詳細を指定する部分。オプションの形式はコマンドによって異なるが、 - から始まるショートオプションや、 -- から始まるロングオプションなどが一般的。

Answer: 引数

Source: ../../note/computer/linux/_/chapters/basic_command.md

====================

オプション（引数、 *** 、パラメータ）は、コマンドの操作対象や処理内容の詳細を指定する部分。オプションの形式はコマンドによって異なるが、 - から始まるショートオプションや、 -- から始まるロングオプションなどが一般的。

Answer: フラグ

Source: ../../note/computer/linux/_/chapters/basic_command.md

====================

オプション（引数、フラグ、 ***** ）は、コマンドの操作対象や処理内容の詳細を指定する部分。オプションの形式はコマンドによって異なるが、 - から始まるショートオプションや、 -- から始まるロングオプションなどが一般的。

Answer: パラメータ

Source: ../../note/computer/linux/_/chapters/basic_command.md

====================

オプション（引数、フラグ、パラメータ）は、コマンドの操作対象や処理内容の詳細を指定する部分。オプションの形式はコマンドによって異なるが、 - から始まる ********* や、 -- から始まるロングオプションなどが一般的。

Answer: ショートオプション

Source: ../../note/computer/linux/_/chapters/basic_command.md

====================

オプション（引数、フラグ、パラメータ）は、コマンドの操作対象や処理内容の詳細を指定する部分。オプションの形式はコマンドによって異なるが、 - から始まるショートオプションや、 -- から始まる ******** などが一般的。

Answer: ロングオプション

Source: ../../note/computer/linux/_/chapters/basic_command.md

====================

 *** は、Linuxのマニュアルページを表示するために使用されるコマンド。マニュアルページには、Linuxシステムやソフトウェアの機能、オプション、使用例などが記載されている。  ***  コマンドを使うことで、コマンドやファイル、システムの概要を調べることができる。

 ***  コマンドの書式は以下の通り。

 ***  [OPTION]... [COMMAND/FILE]

例えば、 ls コマンドのマニュアルページを表示したい場合は、次のように実行する。

$  ***  ls

マニュアルページを開いている間は、矢印キーや Enter/BackSpace 、 j/k でページ内を移動することができ、 q キーでマニュアルを閉じてインタラクティブシェルに復帰できる。また、操作がわからなくなった場合には h キーを入力することでヘルプを参照することができる。これらの操作が有効なのは、ページャとしてデフォルトの less を用いている場合に限られる。

OPTION に指定することができる主要なオプションは以下の通り。

| オプション      | 概要                                                                                     | | --------------- | :--------------------------------------------------------------------------------------- | | -f -k -i  | 指定したキーワードに該当するコマンドを検索し、見つかったマニュアルページの一覧を出力する | | -a            | すべてのマニュアルページを表示する                                                       | | -P --pager  | マニュアルページの閲覧に用いるページャを指定する（デフォルトでは less ）               |

また、マニュアルは種類ごとに以下のようなセクション番号が割り振られており、番号を指定してマニュアルを調べることもできる。

| セクション番号 | 内容                                   | | -------------- | :------------------------------------- | | 1            | Linuxコマンド                          | | 2            | システムコール（カーネル関数）         | | 3            | ライブラリコール（Cライブラリの関数）  | | 4            | スペシャルファイル（デバイスファイル） | | 5            | ファイルのフォーマット                 | | 6            | ゲームやデモ                           | | 7            | マクロ                                 | | 8            | その他                                 | | 9            | システムコマンドとデーモン             |

Answer: man

Source: ../../note/computer/linux/_/chapters/basic_command.md

====================

 ******** は、コマンドの使い方やオプションなどの情報を表示するためのオプションで、多くのコマンドがこのオプションを備えている。一般的には ******** は -h 、 --help 、 -? といった形式で提供される。

 ******** を使用することで、コマンドの詳細な使用方法やオプションの意味を知ることができる。 ******** を使用する場合、次のようにコマンドを入力する。

$ [COMMAND] --help

例えば、 ls コマンドのヘルプを表示するには、次のように入力する。

$ ls --help

Answer: ヘルプオプション

Source: ../../note/computer/linux/_/chapters/basic_command.md

====================

 **** は、Linuxにおいてシェルからログアウトするためのコマンド。このコマンドの実行により現在使用しているシェルプロセスを終了する。

Answer: exit

Source: ../../note/computer/linux/_/chapters/basic_command.md

====================

 ******** は、Linuxシステムをシャットダウンするためのコマンド。システムをシャットダウンする前にユーザに通知を行い、デフォルトではシャットダウンまで1分間の待ち時間が設定されている。

また、poweroffもシャットダウンのためのコマンド。ただし、  ********  とは異なり、システムを直ちに停止するため、アプリケーションが意図せず停止されてしまう恐れがある。

Answer: shutdown

Source: ../../note/computer/linux/_/chapters/basic_command.md

====================

shutdownは、Linuxシステムをシャットダウンするためのコマンド。システムをシャットダウンする前にユーザに通知を行い、デフォルトではシャットダウンまで1分間の待ち時間が設定されている。

また、 ******** もシャットダウンのためのコマンド。ただし、 shutdown とは異なり、システムを直ちに停止するため、アプリケーションが意図せず停止されてしまう恐れがある。

Answer: poweroff

Source: ../../note/computer/linux/_/chapters/basic_command.md

====================

 ****** は、Linuxシステムを再起動するためのコマンド。  ******  を実行すると、システムはシャットダウンして再起動する。 shutdown コマンドのように再起動時刻を指定して実行することもできる。例えば、5分後にシステムを再起動したい場合、以下のコマンドを実行する。

$  ******  +5

Answer: reboot

Source: ../../note/computer/linux/_/chapters/basic_command.md

====================

 ******* は、Linuxシステムをスリープモードにするためのコマンド。  *******  を実行すると、コンピュータの電源はOFFにならず、CPUやメモリなどの一部の機能が停止して、省エネモードになる。また、このコマンドから復帰すると、停止前の状態から作業を再開することができる。

Answer: suspend

Source: ../../note/computer/linux/_/chapters/basic_command.md

