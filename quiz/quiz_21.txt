====================

プロセスグループは、プロジェクトマネジメントにおける活動やタスクを特定のカテゴリに分類するためのグループ。PMBOKにおいて、プロジェクトのライフサイクルを管理するために5つのプロセスグループが定義されている。

•  ******** : プロジェクトの認可を得て、新しいフェーズを明確に定める
• 計画プロセス群: プロジェクトのスコープを定義し、目標を洗い出し、一連の行動を規定する
• 実行プロセス群: プロジェクトの作業を実行する
• 監視コントロール・プロセス群: プロジェクトの進捗やパフォーマンスを追跡し、統制し、変更を開始する
• 終結プロセス群: プロジェクトを公式に完結し、すべてのアクティビティを終了する

Answer: 立上げプロセス群

Source: ../../note/development/management/_/chapters/management.md

====================

プロセスグループは、プロジェクトマネジメントにおける活動やタスクを特定のカテゴリに分類するためのグループ。PMBOKにおいて、プロジェクトのライフサイクルを管理するために5つのプロセスグループが定義されている。

• 立上げプロセス群: プロジェクトの認可を得て、新しいフェーズを明確に定める
•  ******* : プロジェクトのスコープを定義し、目標を洗い出し、一連の行動を規定する
• 実行プロセス群: プロジェクトの作業を実行する
• 監視コントロール・プロセス群: プロジェクトの進捗やパフォーマンスを追跡し、統制し、変更を開始する
• 終結プロセス群: プロジェクトを公式に完結し、すべてのアクティビティを終了する

Answer: 計画プロセス群

Source: ../../note/development/management/_/chapters/management.md

====================

プロセスグループは、プロジェクトマネジメントにおける活動やタスクを特定のカテゴリに分類するためのグループ。PMBOKにおいて、プロジェクトのライフサイクルを管理するために5つのプロセスグループが定義されている。

• 立上げプロセス群: プロジェクトの認可を得て、新しいフェーズを明確に定める
• 計画プロセス群: プロジェクトのスコープを定義し、目標を洗い出し、一連の行動を規定する
•  ******* : プロジェクトの作業を実行する
• 監視コントロール・プロセス群: プロジェクトの進捗やパフォーマンスを追跡し、統制し、変更を開始する
• 終結プロセス群: プロジェクトを公式に完結し、すべてのアクティビティを終了する

Answer: 実行プロセス群

Source: ../../note/development/management/_/chapters/management.md

====================

プロセスグループは、プロジェクトマネジメントにおける活動やタスクを特定のカテゴリに分類するためのグループ。PMBOKにおいて、プロジェクトのライフサイクルを管理するために5つのプロセスグループが定義されている。

• 立上げプロセス群: プロジェクトの認可を得て、新しいフェーズを明確に定める
• 計画プロセス群: プロジェクトのスコープを定義し、目標を洗い出し、一連の行動を規定する
• 実行プロセス群: プロジェクトの作業を実行する
•  ************** : プロジェクトの進捗やパフォーマンスを追跡し、統制し、変更を開始する
• 終結プロセス群: プロジェクトを公式に完結し、すべてのアクティビティを終了する

Answer: 監視コントロール・プロセス群

Source: ../../note/development/management/_/chapters/management.md

====================

プロセスグループは、プロジェクトマネジメントにおける活動やタスクを特定のカテゴリに分類するためのグループ。PMBOKにおいて、プロジェクトのライフサイクルを管理するために5つのプロセスグループが定義されている。

• 立上げプロセス群: プロジェクトの認可を得て、新しいフェーズを明確に定める
• 計画プロセス群: プロジェクトのスコープを定義し、目標を洗い出し、一連の行動を規定する
• 実行プロセス群: プロジェクトの作業を実行する
• 監視コントロール・プロセス群: プロジェクトの進捗やパフォーマンスを追跡し、統制し、変更を開始する
•  ******* : プロジェクトを公式に完結し、すべてのアクティビティを終了する

Answer: 終結プロセス群

Source: ../../note/development/management/_/chapters/management.md

====================

 ***** は、プロジェクトマネジメントの分野において、特定の知識やスキルが必要とされる領域。PMBOKにおいて10の ***** が定義されている。

• プロジェクト統合マネジメント
• プロジェクトステークホルダマネジメント
• プロジェクトスコープマネジメント
• プロジェクト資源マネジメント
• プロジェクトスケジュールマネジメント
• プロジェクトコストマネジメント
• プロジェクトリスクマネジメント
• プロジェクト品質マネジメント
• プロジェクト調達マネジメント
• プロジェクトコミュニケーションマネジメント

Answer: 知識エリア

Source: ../../note/development/management/_/chapters/management.md

====================

 ************* は、プロジェクトのフェーズの集合。プロジェクトの規模や複雑さは様々であるが、ライフサイクルはプロジェクト開始、組織編成と準備、作業実施、プロジェクト終結の4段階で表現することができる。また、 ************* における典型的なコストと要員数は、プロジェクト開始時は少なく、作業を実行するにつれて頂点に達し、プロジェクトが終了に近づくと急激に落ち込む、という推移になる。ステークホルダの影響力、リスク、不確実性はプロジェクトの開始時に最大であり、プロジェクトが進むにつれて徐々に低下する。変更コストはプロジェクトが終了に近づくにつれて大幅に増加していく。

Answer: プロジェクトライフサイクル

Source: ../../note/development/management/_/chapters/management.md

====================

 ******** （Plan-Do-Check-Actサイクル）は、絶えず改善を行うための管理手法であり、品質管理やプロセス改善に広く使用される。 ******** は繰り返し行われ、絶えず改善を進めることで効果的な品質管理やプロセス改善を実現する。

• Plan（計画）: 問題の特定や目標の設定など、改善のための計画を立てる。具体的な目標や手段、予算、スケジュールなどを決定する。
• Do（実行）: 計画をもとに、実際にアクションを起こす。計画に基づいてタスクを実施し、目標を達成するための活動を進める。
• Check（評価）: 実施した活動や結果を評価し、目標達成度や問題点を把握する。データの収集や分析を行い、計画との比較を行う。
• Act（改善）: 評価結果をもとに、問題の解決策や改善策を立案し、実行する。改善策の実施によって問題が解決され、プロセスや品質が向上する。

Answer: PDCAサイクル

Source: ../../note/development/management/_/chapters/management.md

====================

 ***** （ユニットテスト）は、ソフトウェア開発において最小単位のコード（関数やクラスなど）を個別にテストする手法。個々のコンポーネントが正確に動作し、期待通りの結果を返すかどうかを検証する。このテストは自動化されている場合が多く、依存関係を最小限に抑えて細かい粒度で実施される。

Answer: 単体テスト

Source: ../../note/development/management/_/chapters/test.md

====================

単体テスト（ ******* ）は、ソフトウェア開発において最小単位のコード（関数やクラスなど）を個別にテストする手法。個々のコンポーネントが正確に動作し、期待通りの結果を返すかどうかを検証する。このテストは自動化されている場合が多く、依存関係を最小限に抑えて細かい粒度で実施される。

Answer: ユニットテスト

Source: ../../note/development/management/_/chapters/test.md

====================

 ***** は、ソフトウェア開発において複数のコンポーネントやモジュールを組み合わせてテストする手法。個々のコンポーネントが単独で正常に動作することを確認した後に、それらを組み合わせて連携や相互作用をテストする。複数のコンポーネントを実際の環境に近い状態で組み合わせてテストを行い、データや制御の流れが正しく動作することを確認する。

Answer: 結合テスト

Source: ../../note/development/management/_/chapters/test.md

====================

 ***** （システムテスト）は、ソフトウェア開発においてシステム全体をテストするための手法。ソフトウェアが要求仕様を満たし、全体的な機能や性能が期待通りに動作するかを確認スルために行われる。システムが他のシステムや外部環境と連携して動作する場合のテストも含まれ、ユーザの視点から実際のシナリオを想定したテストが実施される。

Answer: 総合テスト

Source: ../../note/development/management/_/chapters/test.md

====================

総合テスト（ ******* ）は、ソフトウェア開発においてシステム全体をテストするための手法。ソフトウェアが要求仕様を満たし、全体的な機能や性能が期待通りに動作するかを確認スルために行われる。システムが他のシステムや外部環境と連携して動作する場合のテストも含まれ、ユーザの視点から実際のシナリオを想定したテストが実施される。

Answer: システムテスト

Source: ../../note/development/management/_/chapters/test.md

====================

 ********** は、ソフトウェア開発において変更や修正が既存の機能や動作に与える影響を確認するためのテスト手法。新しいバージョンのソフトウェアが以前のバージョンと同様に正常に動作することを保証するために行われる。既存のテストケースやシナリオを使用して、変更や修正が既存の機能に与える影響をテストする。ソフトウェアの変更が他の機能やコンポーネントとの相互作用に影響を与える可能性がある場合に特に重要。

Answer: リグレッションテスト

Source: ../../note/development/management/_/chapters/test.md

====================

 *********** は、ソフトウェアの内部構造や実装の詳細を知った上でテストを行う手法。ソースコードや内部のロジック、データフローなどを理解し、テストケースを設計する。ソフトウェアの品質向上やバグの発見、プログラムの正確性の検証などを目的として実施される。

Answer: ホワイトボックステスト

Source: ../../note/development/management/_/chapters/test.md

====================

 *********** は、ソフトウェアの内部構造や実装の詳細を知らずにテストを行う手法。テストケースは、ソフトウェアが要求仕様や利用者の期待に合致しているかを確認するように設計される。

Answer: ブラックボックステスト

Source: ../../note/development/management/_/chapters/test.md

====================

 ****** は、ソフトウェアの性能や効率を向上させるためのプロセス。システムのパフォーマンスを最適化し、リソースの効率的な利用を促進することを目的に実施される。これは、ハードウェアやソフトウェア、ネットワーク、データベースなど、様々な要素に対して行われる。リソースの使用状況をモニタリングツールなどで監視して、ボトルネックが発生している場所を特定し、アルゴリズムの最適化やリソース（CPU、メモリなど）の最適化などを行う。

Answer: チューニング

Source: ../../note/development/management/_/chapters/test.md

====================

 ************* は、システムの構造やコンポーネント、それらの構造や相互関係を定義する設計。ソフトウェア開発の初期段階で、ソフトウェアの全体像を設計するために使用される。 ************* の目的は、ソフトウェアの品質、保守性、拡張性を向上させることで、適切な ************* を設計することで、ソフトウェアの変更や拡張が用意になったり、バグの発生率を抑えたりすることができる。 ************* には、いくつかの汎用的に用いられている手法（パターン）が存在する。

 ************* は、構造、アーキテクチャ特性、アーキテクチャ決定、設計指針の組み合わせで構成される。

Answer: ソフトウェアアーキテクチャ

Source: ../../note/development/software_architecture/_/chapters/software_architecture.md

====================

 *********** （スタイル）は、システム開発における特定の設計パターンやアーキテクチャの形式を表す概念。 *********** には、レイヤードアーキテクチャやマイクロカーネルアーキテクチャなどがある。

Answer: アーキテクチャスタイル

Source: ../../note/development/software_architecture/_/chapters/software_architecture.md

====================

アーキテクチャ **** （ **** ）は、システム開発における特定の設計パターンやアーキテクチャの形式を表す概念。アーキテクチャ **** には、レイヤードアーキテクチャやマイクロカーネルアーキテクチャなどがある。

Answer: スタイル

Source: ../../note/development/software_architecture/_/chapters/software_architecture.md

====================

 ** は、システムを実装するアーキテクチャスタイルの種類。

Answer: 構造

Source: ../../note/development/software_architecture/_/chapters/software_architecture.md

====================

 ********* は、システムの成功基準を定めるもので、通常システムの機能とは直接関係しない。 ********* には、可用性や信頼性、テスト容易性、スケーラビリティ、セキュリティ、アジリティ、耐障害性、弾力性、回復性、パフォーマンス、デプロイ容易性、学習容易性などの要素がある。

Answer: アーキテクチャ特性

Source: ../../note/development/software_architecture/_/chapters/software_architecture.md

====================

 ********* は、システムをどのように構築すべきかのルールを定めるもの。例えば、レイヤードアーキテクチャ上のどのレイヤがデータベースにアクセスできるか、といったルールは ********* にあたる。 ********* はシステムの制約であり、何が許されて何が許されないかに関する開発チームの指針となる。

 ********* は特例によって破られる場合があり、これはアーキテクチャ審査委員会(ARB: Architecture Review Board)やチーフアーキテクトが使用する特例モデルによって定められる場合が多い。

Answer: アーキテクチャ決定

Source: ../../note/development/software_architecture/_/chapters/software_architecture.md

====================

アーキテクチャ決定は、システムをどのように構築すべきかのルールを定めるもの。例えば、レイヤードアーキテクチャ上のどのレイヤがデータベースにアクセスできるか、といったルールはアーキテクチャ決定にあたる。アーキテクチャ決定はシステムの制約であり、何が許されて何が許されないかに関する開発チームの指針となる。

アーキテクチャ決定は ** によって破られる場合があり、これはアーキテクチャ審査委員会(ARB: Architecture Review Board)やチーフアーキテクトが使用する ** モデルによって定められる場合が多い。

Answer: 特例

Source: ../../note/development/software_architecture/_/chapters/software_architecture.md

====================

 **** は、アーキテクチャ決定のような堅苦しいルールではなく、システム開発におけるガイドラインのようなもの。例えば、マイクロサービスアーキテクチャを採用したシステム開発において、サービス同士は非同期メッセージングを利用してパフォーマンスを向上させると良い、といった **** は、必ずしも守られていなければいけないというわけではなく、あくまで推奨されるアプローチに関するガイドである。

Answer: 設計指針

Source: ../../note/development/software_architecture/_/chapters/software_architecture.md

====================

 ************* は、システムを構成する全てのコンポーネントが緊密に結合し、相互に依存しながら、単一の統一されたユニットを形成するソフトウェアアーキテクチャ。特に小規模なプロジェクトに有効なアプローチであり、シンプルで開発が行いやすいというメリットがある。一方で、大規模なプロジェクトではコンポーネントが複雑に絡み合って保守や拡張が困難になり、1つのコンポーネントを変更するだけでも構造全体に影響する可能性があるといったデメリットもある。

将来的に成長して拡張が必要になるシステムについては、より機敏で適用性が高くスケーラブルなソフトウェアアーキテクチャが適している。

Answer: モノリシックアーキテクチャ

Source: ../../note/development/software_architecture/_/chapters/software_architecture.md

====================

 ************ は、システムをいくつかの層（レイヤ）に分割し、各層に特定の役割を持たせるソフトウェアアーキテクチャ。このアーキテクチャでは、上下のレイヤに跨る依存関係の方向性を一方向にすることで、システムの複雑化を防ぐ場合が多い。

一般的によく利用される3層 ************ では、次の3つのレイヤを用いてシステムを構築する。

| 名称                 | 役割                                                                                                                                     | | -------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- | | プレゼンテーション層 | ユーザがシステムとのやり取りを行うためのインタフェースを担う。アプリケーションのUIやAPIのリクエスト/レスポンスモデルなどがこれにあたる。 | | ビジネスロジック層   | システムで業務を表現する処理やモデル。                                                                                                   | | データアクセス層     | データアクセスに対する技術的な手段を提供する。主にデータベースや外部サービスを直接的に利用する部分。                                     |

 ************ では、複数のレイヤで同様の機能が実装されてしまい変更に弱くなる、レイヤ間の結合が強くなるとテストが行いにくくなる、といった問題もある。

Answer: レイヤードアーキテクチャ

Source: ../../note/development/software_architecture/_/chapters/software_architecture.md

====================

 ************* （ポートアンドアダプタ）は、システムをコア機能、データベース、ユーザインタフェースなどの疎結合なコンポーネントに分割することを目的としたソフトウェアアーキテクチャ。このアーキテクチャでは、GoFデザインパターンのAdapterを利用しており、コア機能にはポートを介してのみアクセスすることができる。

基本的な考え方はレイヤードアーキテクチャを継承しており、コア機能と外部要素との結合を疎にすることを目的として設計されている。

Answer: ヘキサゴナルアーキテクチャ

Source: ../../note/development/software_architecture/_/chapters/software_architecture.md

====================

ヘキサゴナルアーキテクチャ（ ********** ）は、システムをコア機能、データベース、ユーザインタフェースなどの疎結合なコンポーネントに分割することを目的としたソフトウェアアーキテクチャ。このアーキテクチャでは、GoFデザインパターンのAdapterを利用しており、コア機能にはポートを介してのみアクセスすることができる。

基本的な考え方はレイヤードアーキテクチャを継承しており、コア機能と外部要素との結合を疎にすることを目的として設計されている。

Answer: ポートアンドアダプタ

Source: ../../note/development/software_architecture/_/chapters/software_architecture.md

====================

 *** は、ヘキサゴナルアーキテクチャにおいて、コア機能と外部要素が通信するためのインタフェース。

ユーザがコア機能にアクセスするための *** （GUIやテストコードなど）をプライマリ *** 、コア機能から外部要素にアクセスするための *** （データベースやストレージなど）をセカンダリ *** と呼ぶ。

Answer: ポート

Source: ../../note/development/software_architecture/_/chapters/software_architecture.md

====================

ポートは、ヘキサゴナルアーキテクチャにおいて、コア機能と外部要素が通信するためのインタフェース。

ユーザがコア機能にアクセスするためのポート（GUIやテストコードなど）を ******** 、コア機能から外部要素にアクセスするためのポート（データベースやストレージなど）をセカンダリポートと呼ぶ。

Answer: プライマリポート

Source: ../../note/development/software_architecture/_/chapters/software_architecture.md

====================

ポートは、ヘキサゴナルアーキテクチャにおいて、コア機能と外部要素が通信するためのインタフェース。

ユーザがコア機能にアクセスするためのポート（GUIやテストコードなど）をプライマリポート、コア機能から外部要素にアクセスするためのポート（データベースやストレージなど）を ******** と呼ぶ。

Answer: セカンダリポート

Source: ../../note/development/software_architecture/_/chapters/software_architecture.md

====================

 *********** は、レイヤードアーキテクチャのような階層構造を円で表現し、すべての依存関係が円の中心に対して向かうようにシステムを構築するソフトウェアアーキテクチャ。層の増減は可能であるが、常に中心にドメインモデルの層が配置され、この層は他の層への依存関係を持たない。

基本的な考え方はヘキサゴナルアーキテクチャを継承しており、コア機能の内部のレイヤを細かく分類して具体的な役割を説明している。

Answer: オニオンアーキテクチャ

Source: ../../note/development/software_architecture/_/chapters/software_architecture.md

====================

 *********** は、オニオンアーキテクチャのように階層構造を円で表現し、明示的なAdapterのレイヤを用意したソフトウェアアーキテクチャ。

基本的な考え方はオニオンアーキテクチャを継承しており、Adapterの層を明確にしたり、依存関係を整えたりしている。

Answer: クリーンアーキテクチャ

Source: ../../note/development/software_architecture/_/chapters/software_architecture.md

====================

 ************** は、Terraform環境で用いるプロバイダ情報を取得してセットアップするコマンド。

Answer: terrafrom init

Source: ../../note/development/terraform/_/chapters/cli.md

====================

 ************** は、Terraformのルートモジュールを読み込んで、実行後にどのようなリソースの作成や削除が発生するかを表示するコマンド。

Answer: terraform plan

Source: ../../note/development/terraform/_/chapters/cli.md

====================

 *************** は、Terraformのルートモジュールを読み込んで、リソースの作成や削除を実行するコマンド。

Answer: terraform apply

Source: ../../note/development/terraform/_/chapters/cli.md

====================

 ***************** は、Terraformのルートモジュールを読み込んで、生成されたリソースを破棄するコマンド。

Answer: terraform destory

Source: ../../note/development/terraform/_/chapters/cli.md

====================

 ******** は、Terraformにおいて、特定の名前に対して値を割り当てるために用いられる構文。

resource_id = "abc123"

等号の前の識別子は名前、後の式は値として扱われる。

Answer: Argument

Source: ../../note/development/terraform/_/chapters/configuration_language.md

====================

 ***** は、Terraformにおいて、他のコンテンツを包み込むコンテナを宣言する構文。 ***** には、そのを表すタイプと、0個以上のラベルが定義される。また、 ***** はネストすることもできる。

resource "aws_instance" "example" {
    ami = "abc123"

    network_interface {
        # ...
    }
}

Terraformにはいくつかの決められた ***** タイプがあり、これらを組み合わせて様々な機能を実装することができる。

Answer: Block

Source: ../../note/development/terraform/_/chapters/configuration_language.md

====================

 ***** は、Terraformにおいて、ひとつのディレクトリに含まれるTerraform構成ファイルの集まり。Terraformの構成ファイルは、設定言語を用いて記述し、拡張子を .tf として作成する。

Terraformでは、 ***** 内の構成ファイルの読み込み順を意識する必要はなく、 ***** 全体が単一のドキュメントとして扱われるようになっている。また、 ***** 内にディレクトリを含めた場合、それは無視されて完全に別の ***** として扱われる。これを含めたい場合は明示的に ***** 呼び出しを使用する必要がある。

Answer: モジュール

Source: ../../note/development/terraform/_/chapters/configuration_language.md

====================

 ******** は、Terraformにおいて、処理の実行時に基準となるモジュール。Terraformの処理は、常にひとつのモジュールを基準にして実行され、CLIではデフォルトでカレントディレクトリを ******** としている。

Answer: ルートモジュール

Source: ../../note/development/terraform/_/chapters/configuration_language.md

====================

 ******** は、Terraformにおいて、仮想ネットワークやコンピューティングインスタンスなどの1つ以上のインフラストラクチャオブジェクトを記述するためのBlock。このブロックには2つのラベルが必要で、1つ目はリソースの種類を表す文字列、2つ目はリソースを一意に識別するための名前として扱われる。リソースの種類を表すラベルには、クラウドプロバイダごとに提供されている識別子、もしくはカスタムリソースの種類を指定する。また、このブロックに含めることのできるArgumentは、そのリソースに固有のものとなる。

Answer: resource

Source: ../../note/development/terraform/_/chapters/configuration_language.md

====================

 *** (Infrastructure as Code)は、システムのインフラストラクチャをコードとして管理し、プロビジョニング（構築）、設定、デプロイメントを自動化するためのツール。代表的な *** ツールとしては、Terraformなどがある。

このようなツールを利用することで、インフラストラクチャの設定をバージョン管理することができる、再利用性を高められる、一貫性や正確性を保てる、といったメリットがある。

Answer: IaC

Source: ../../note/development/terraform/_/chapters/terraform.md

====================

 ********* は、AWSやGCP、Azureなどの様々なクラウドプロバイダに対応したオープンソースのIaCツール。 ********* では、 ********* が提供するAPIを通じてインフラリソースを作成・管理する。

 ********* は、インフラストラクチャオブジェクトを表すリソースを宣言する設定言語や、それらをもとに自動でリソースをプロビジョニングするCLI、 ********* を共同管理するために役立つ *********  Cloudなどのツール群から構成される。

Answer: Terraform

Source: ../../note/development/terraform/_/chapters/terraform.md

====================

 ******* (Media Access Control)は、データリンクに接続しているノードを識別する際に利用される識別子で、48ビットの長さを持つ。ネットワーク機器が出荷される時点で割り当てられた固有のアドレスとなっている。

一般的なNICでは、 ******* はROMに焼き込まれており、同じ ******* を持つNICは世界中にひとつしかない。 ******* には、NICの製造メーカを特定するベンダ識別子と、メーカが決定するビット列である製造番号が含まれている。ベンダ識別子はIEEEが割り当てる番号で、従来はOUI(Organizationally Unique Identifier)と呼ばれていたが、MA-L(MAC Address Block Large)に改称された。

Answer: MACアドレス

Source: ../../note/network/_/chapters/address_on_network.md

====================

MACアドレス(Media Access Control)は、データリンクに接続しているノードを識別する際に利用される識別子で、48ビットの長さを持つ。ネットワーク機器が出荷される時点で割り当てられた固有のアドレスとなっている。

一般的なNICでは、MACアドレスはROMに焼き込まれており、同じMACアドレスを持つNICは世界中にひとつしかない。MACアドレスには、NICの製造メーカを特定する ****** と、メーカが決定するビット列である製造番号が含まれている。 ****** はIEEEが割り当てる番号で、従来はOUI(Organizationally Unique Identifier)と呼ばれていたが、MA-L(MAC Address Block Large)に改称された。

Answer: ベンダ識別子

Source: ../../note/network/_/chapters/address_on_network.md

====================

MACアドレス(Media Access Control)は、データリンクに接続しているノードを識別する際に利用される識別子で、48ビットの長さを持つ。ネットワーク機器が出荷される時点で割り当てられた固有のアドレスとなっている。

一般的なNICでは、MACアドレスはROMに焼き込まれており、同じMACアドレスを持つNICは世界中にひとつしかない。MACアドレスには、NICの製造メーカを特定するベンダ識別子と、メーカが決定するビット列である **** が含まれている。ベンダ識別子はIEEEが割り当てる番号で、従来はOUI(Organizationally Unique Identifier)と呼ばれていたが、MA-L(MAC Address Block Large)に改称された。

Answer: 製造番号

Source: ../../note/network/_/chapters/address_on_network.md

====================

MACアドレス(Media Access Control)は、データリンクに接続しているノードを識別する際に利用される識別子で、48ビットの長さを持つ。ネットワーク機器が出荷される時点で割り当てられた固有のアドレスとなっている。

一般的なNICでは、MACアドレスはROMに焼き込まれており、同じMACアドレスを持つNICは世界中にひとつしかない。MACアドレスには、NICの製造メーカを特定するベンダ識別子と、メーカが決定するビット列である製造番号が含まれている。ベンダ識別子はIEEEが割り当てる番号で、従来は *** (Organizationally Unique Identifier)と呼ばれていたが、MA-L(MAC Address Block Large)に改称された。

Answer: OUI

Source: ../../note/network/_/chapters/address_on_network.md

====================

MACアドレス(Media Access Control)は、データリンクに接続しているノードを識別する際に利用される識別子で、48ビットの長さを持つ。ネットワーク機器が出荷される時点で割り当てられた固有のアドレスとなっている。

一般的なNICでは、MACアドレスはROMに焼き込まれており、同じMACアドレスを持つNICは世界中にひとつしかない。MACアドレスには、NICの製造メーカを特定するベンダ識別子と、メーカが決定するビット列である製造番号が含まれている。ベンダ識別子はIEEEが割り当てる番号で、従来はOUI(Organizationally Unique Identifier)と呼ばれていたが、 **** (MAC Address Block Large)に改称された。

Answer: MA-L

Source: ../../note/network/_/chapters/address_on_network.md

====================

 ****** は、個々のホストを特定するための識別子で、32ビットで表される。人間がわかりやすいように8ビットずつに区切り境目にドットを入れたドット・デシマル・ノーテーションや、10進数に置き換えた記法がよく用いられる。

Answer: IPアドレス

Source: ../../note/network/_/chapters/address_on_network.md

====================

IPアドレスは、個々のホストを特定するための識別子で、32ビットで表される。人間がわかりやすいように8ビットずつに区切り境目にドットを入れた **************** や、10進数に置き換えた記法がよく用いられる。

Answer: ドット・デシマル・ノーテーション

Source: ../../note/network/_/chapters/address_on_network.md

====================

 ******* は、IPアドレス中でデータリンクのセグメントごとに割り当てられた固有の値。世界中のネットワークからどのネットワークセグメントであるかを特定するために用いられる。

Answer: ネットワーク部

Source: ../../note/network/_/chapters/address_on_network.md

====================

 **** は、データリンクが属するセグメント内で、各機器に割り当てられた固有の値。セグメント内のホストを特定するために用いられる。

Answer: ホスト部

Source: ../../note/network/_/chapters/address_on_network.md

====================

 ********** は、IPアドレスのホスト部をすべて0にしたアドレスで、そのセグメントのネットワーク自体を表す。

Answer: ネットワークアドレス

Source: ../../note/network/_/chapters/address_on_network.md

====================

 ************ は、ホスト部をすべて1とし、そのネットワークに属しているすべてのホストにパケットを送信するためのアドレス。そのコンピュータ自身が属しているセグメント内へのブロードキャストをローカルブロードキャスト、異なるIPネットワークへのブロードキャストをダイレクトブロードキャストという。

Answer: ブロードキャストアドレス

Source: ../../note/network/_/chapters/address_on_network.md

====================

ブロードキャストアドレスは、ホスト部をすべて1とし、そのネットワークに属しているすべてのホストにパケットを送信するためのアドレス。そのコンピュータ自身が属しているセグメント内へのブロードキャストを ************ 、異なるIPネットワークへのブロードキャストをダイレクトブロードキャストという。

Answer: ローカルブロードキャスト

Source: ../../note/network/_/chapters/address_on_network.md

====================

ブロードキャストアドレスは、ホスト部をすべて1とし、そのネットワークに属しているすべてのホストにパケットを送信するためのアドレス。そのコンピュータ自身が属しているセグメント内へのブロードキャストをローカルブロードキャスト、異なるIPネットワークへのブロードキャストを ************* という。

Answer: ダイレクトブロードキャスト

Source: ../../note/network/_/chapters/address_on_network.md

====================

 *** は、IPアドレスのネットワーク部とホスト部を識別するために用いられていた概念。IPアドレスを *** A〜 *** Dの4つのグループに分類し、IPアドレスの先頭8ビットによってどの *** に属するかを判断する。同一ネットワーク内の接続可能台数はホスト部が表せる範囲となるので、例えば *** Cのネットワークでは $2^8 - 2 = 254$ 台となる。

 *** 単位でのIPアドレスの割当は、利用されないアドレスが発生しやすく、限られたアドレス空間を有効に利用できないため、CIDR方式を用いるのが一般的。

Answer: クラス

Source: ../../note/network/_/chapters/address_on_network.md

====================

 ******** は、クラスで区切られたネットワーク空間をさらに細かいネットワークに分割したもの。クラスを用いた方法よりも柔軟に接続可能なホストの台数を制御できる。

Answer: サブネットワーク

Source: ../../note/network/_/chapters/address_on_network.md

====================

 ******** は、IPアドレスのネットワーク部とホスト部を識別するために用いるアドレス。ネットワーク部がすべて1、ホスト部がすべて0のアドレスとなっており、IPアドレスに対してマスクする（論理積を取る）ことでそれぞれの部分を抽出することができる。

先頭から何ビットがネットワーク部であるか（ ******** が1であるビット数）は、 172.10.0.1/32 のようにIPアドレスの末尾に付けて表現される。

Answer: サブネットマスク

Source: ../../note/network/_/chapters/address_on_network.md

====================

 **** (Classless InterDomain Routing)は、サブネットマスクによってネットワーク部の長さ（プレフィックス長）を識別する方式。これにより、ネットワークアドレスの長さを固定せずに分割して扱えるため、各組織に余分なIPアドレス空間を割り当てることを防げる。

Answer: CIDR

Source: ../../note/network/_/chapters/address_on_network.md

====================

CIDR(Classless InterDomain Routing)は、サブネットマスクによってネットワーク部の長さ（ ******** ）を識別する方式。これにより、ネットワークアドレスの長さを固定せずに分割して扱えるため、各組織に余分なIPアドレス空間を割り当てることを防げる。

Answer: プレフィックス長

Source: ../../note/network/_/chapters/address_on_network.md

====================

 **** (Variable Length Subnet Mask)は、同一ネットワーク内で様々な長さのサブネットマスクを使用する技術。

Answer: VLSM

Source: ../../note/network/_/chapters/address_on_network.md

====================

 *********** は、インターネットに接続された機器に割り当てられているIPアドレス。 *********** の割り当ては、ICANN(Internet Corporation for Assigned Names and Numbers)で一元管理されており、日本国内ではJPNIC(Japan Network Information Center)が *********** の割り当てを行っている。

Answer: グローバルIPアドレス

Source: ../../note/network/_/chapters/address_on_network.md

====================

グローバルIPアドレスは、インターネットに接続された機器に割り当てられているIPアドレス。グローバルIPアドレスの割り当ては、 ***** (Internet Corporation for Assigned Names and Numbers)で一元管理されており、日本国内ではJPNIC(Japan Network Information Center)がグローバルIPアドレスの割り当てを行っている。

Answer: ICANN

Source: ../../note/network/_/chapters/address_on_network.md

====================

グローバルIPアドレスは、インターネットに接続された機器に割り当てられているIPアドレス。グローバルIPアドレスの割り当ては、ICANN(Internet Corporation for Assigned Names and Numbers)で一元管理されており、日本国内では ***** (Japan Network Information Center)がグローバルIPアドレスの割り当てを行っている。

Answer: JPNIC

Source: ../../note/network/_/chapters/address_on_network.md

====================

 ************ は、インターネットに直接接続されない、組織内などで固有のIPアドレス。インターネットに接続する際は、インターネットとの接点となるルータや公開サーバにだけグローバルIPアドレスを割り当てて、プロキシサーバや、NATなどのネットワーク変換機能を用いるのが一般的。

Answer: プライベートIPアドレス

Source: ../../note/network/_/chapters/address_on_network.md

====================

 ***** は、IPアドレスを管理している組織や管理者の連絡先情報。インターネットの通信経路の途中で異常が発生している装置を突き止める目的などで設定する。

Answer: WHOIS

Source: ../../note/network/_/chapters/address_on_network.md

====================

 ********** は、同じコンピュータ内部のプログラム間で通信したい場合などに利用される、その機器自身を表すIPアドレス。どの機器にも固定で 127.0.0.1 が割り当てられており、 localhost というホスト名がエイリアスとして利用される。

Answer: ループバックアドレス

Source: ../../note/network/_/chapters/address_on_network.md

====================

 ***** は、同一のコンピュータ内で通信を行っているプログラムを識別するときに利用される識別子。アプリケーション層で処理するプログラムをトランスポート層で指定するために用いられる。

Answer: ポート番号

Source: ../../note/network/_/chapters/address_on_network.md

====================

 *********** (Well-known Port Number)は、一般的によく用いられるプログラムのポート番号のことで、 $0 \sim 1023$ の番号が割り当てられたもの。また、 *********** 以外にも、 $1024 \sim 49151$ は正式に登録されているポート番号となっている。

Answer: ウェルノウンポート番号

Source: ../../note/network/_/chapters/address_on_network.md

====================

 *********** は、 $1024 \sim 655354$ のポート番号のことで、OSが動的に管理するポート番号。サーバはポート番号が決まっている必要があるが、サービスを受ける側のポート番号は必ずしも決まっている必要はなく、 *********** を自由に割り当てることができる。

Answer: エフェメラルポート番号

Source: ../../note/network/_/chapters/address_on_network.md

====================

 ****** は、TCPのコネクションを1つ利用して、通信相手のコンピュータにコマンドを文字列として送信し実行するプロトコル。相手のコンピュータ内部で動作しているシェルに接続しているような状態となる。

 ****** では、ユーザが入力した文字以外にもオプションをやり取りすることができる。NVT(Network Virtual Terminal)を実現するための画面制御情報はこのオプション機能を利用して送信される。

また ****** には、改行キーが入力されるごとに1行分のデータをまとめて送る行モードと、入力された文字を1文字ごとに送る透過モードがある。

 ****** プロトコルを利用するクライアントプログラムを ****** クライアントといい、 ****** クライアントは基本的に23番ポートに接続することでtelnetdとやり取りをする。しかし、それ以外のポートに接続することで、キーボードから各プロトコルのコマンドを直接入力することもできる。これを利用して、TCP/IPアプリケーション開発時のデバッグに利用されることもある。

Answer: TELNET

Source: ../../note/network/_/chapters/application_layer.md

====================

TELNETは、TCPのコネクションを1つ利用して、通信相手のコンピュータにコマンドを文字列として送信し実行するプロトコル。相手のコンピュータ内部で動作しているシェルに接続しているような状態となる。

TELNETでは、ユーザが入力した文字以外にもオプションをやり取りすることができる。 *** (Network Virtual Terminal)を実現するための画面制御情報はこのオプション機能を利用して送信される。

またTELNETには、改行キーが入力されるごとに1行分のデータをまとめて送る行モードと、入力された文字を1文字ごとに送る透過モードがある。

TELNETプロトコルを利用するクライアントプログラムをTELNETクライアントといい、TELNETクライアントは基本的に23番ポートに接続することでtelnetdとやり取りをする。しかし、それ以外のポートに接続することで、キーボードから各プロトコルのコマンドを直接入力することもできる。これを利用して、TCP/IPアプリケーション開発時のデバッグに利用されることもある。

Answer: NVT

Source: ../../note/network/_/chapters/application_layer.md

====================

TELNETは、TCPのコネクションを1つ利用して、通信相手のコンピュータにコマンドを文字列として送信し実行するプロトコル。相手のコンピュータ内部で動作しているシェルに接続しているような状態となる。

TELNETでは、ユーザが入力した文字以外にもオプションをやり取りすることができる。NVT(Network Virtual Terminal)を実現するための画面制御情報はこのオプション機能を利用して送信される。

またTELNETには、改行キーが入力されるごとに1行分のデータをまとめて送る **** と、入力された文字を1文字ごとに送る透過モードがある。

TELNETプロトコルを利用するクライアントプログラムをTELNETクライアントといい、TELNETクライアントは基本的に23番ポートに接続することでtelnetdとやり取りをする。しかし、それ以外のポートに接続することで、キーボードから各プロトコルのコマンドを直接入力することもできる。これを利用して、TCP/IPアプリケーション開発時のデバッグに利用されることもある。

Answer: 行モード

Source: ../../note/network/_/chapters/application_layer.md

====================

TELNETは、TCPのコネクションを1つ利用して、通信相手のコンピュータにコマンドを文字列として送信し実行するプロトコル。相手のコンピュータ内部で動作しているシェルに接続しているような状態となる。

TELNETでは、ユーザが入力した文字以外にもオプションをやり取りすることができる。NVT(Network Virtual Terminal)を実現するための画面制御情報はこのオプション機能を利用して送信される。

またTELNETには、改行キーが入力されるごとに1行分のデータをまとめて送る行モードと、入力された文字を1文字ごとに送る ***** がある。

TELNETプロトコルを利用するクライアントプログラムをTELNETクライアントといい、TELNETクライアントは基本的に23番ポートに接続することでtelnetdとやり取りをする。しかし、それ以外のポートに接続することで、キーボードから各プロトコルのコマンドを直接入力することもできる。これを利用して、TCP/IPアプリケーション開発時のデバッグに利用されることもある。

Answer: 透過モード

Source: ../../note/network/_/chapters/application_layer.md

====================

TELNETは、TCPのコネクションを1つ利用して、通信相手のコンピュータにコマンドを文字列として送信し実行するプロトコル。相手のコンピュータ内部で動作しているシェルに接続しているような状態となる。

TELNETでは、ユーザが入力した文字以外にもオプションをやり取りすることができる。NVT(Network Virtual Terminal)を実現するための画面制御情報はこのオプション機能を利用して送信される。

またTELNETには、改行キーが入力されるごとに1行分のデータをまとめて送る行モードと、入力された文字を1文字ごとに送る透過モードがある。

TELNETプロトコルを利用するクライアントプログラムを ************ といい、 ************ は基本的に23番ポートに接続することでtelnetdとやり取りをする。しかし、それ以外のポートに接続することで、キーボードから各プロトコルのコマンドを直接入力することもできる。これを利用して、TCP/IPアプリケーション開発時のデバッグに利用されることもある。

Answer: TELNETクライアント

Source: ../../note/network/_/chapters/application_layer.md

====================

 *** (Secure SHell)は、公開鍵暗号方式によって暗号化された遠隔ログインシステムで、一般的に22番ポートが利用される。 *** の基本的な機能は以下の通り。

• 通信内容の暗号化
• ファイルの転送
• ポートフォワード機能

ポートフォワード機能は、特定のポートに届けられたメッセージを、特定のIPアドレス、ポート番号に転送する仕組み。

 *** の認証には、パスワード認証の他にも公開鍵認証やワンタイムパスワード認証が利用できる。

Answer: SSH

Source: ../../note/network/_/chapters/application_layer.md

====================

SSH(Secure SHell)は、公開鍵暗号方式によって暗号化された遠隔ログインシステムで、一般的に22番ポートが利用される。SSHの基本的な機能は以下の通り。

• 通信内容の暗号化
• ファイルの転送
• ポートフォワード機能

ポートフォワード機能は、特定のポートに届けられたメッセージを、特定のIPアドレス、ポート番号に転送する仕組み。

SSHの認証には、パスワード認証の他にも ***** やワンタイムパスワード認証が利用できる。

Answer: 公開鍵認証

Source: ../../note/network/_/chapters/application_layer.md

====================

SSH(Secure SHell)は、公開鍵暗号方式によって暗号化された遠隔ログインシステムで、一般的に22番ポートが利用される。SSHの基本的な機能は以下の通り。

• 通信内容の暗号化
• ファイルの転送
• ポートフォワード機能

ポートフォワード機能は、特定のポートに届けられたメッセージを、特定のIPアドレス、ポート番号に転送する仕組み。

SSHの認証には、パスワード認証の他にも公開鍵認証や ************ が利用できる。

Answer: ワンタイムパスワード認証

Source: ../../note/network/_/chapters/application_layer.md

====================

 *** (File Transfer Protcol)は、異なるコンピュータ間でファイルを転送するときに使われるプロトコル。インターネット上には、誰でもログインできるanonymous  *** サーバがあり、これらはanonymousかftpというユーザ名でログインできる。anonymous  *** サーバは不特定多数へのソフトウェアの公開などのために用いられる。

 *** では、2つのTCPコネクションが利用され、1つは制御用（21番ポート）で、もう1つはファイル転送用（20番ポート）である。ファイル転送には、一般的に20番ポートを用いるが、セキュリティ向上のためにポート番号を乱数的に割り当てるのが一般的。

Answer: FTP

Source: ../../note/network/_/chapters/application_layer.md

====================

FTP(File Transfer Protcol)は、異なるコンピュータ間でファイルを転送するときに使われるプロトコル。インターネット上には、誰でもログインできる **************** があり、これらはanonymousかftpというユーザ名でログインできる。 **************** は不特定多数へのソフトウェアの公開などのために用いられる。

FTPでは、2つのTCPコネクションが利用され、1つは制御用（21番ポート）で、もう1つはファイル転送用（20番ポート）である。ファイル転送には、一般的に20番ポートを用いるが、セキュリティ向上のためにポート番号を乱数的に割り当てるのが一般的。

Answer: anonymous FTPサーバ

Source: ../../note/network/_/chapters/application_layer.md

====================

電子メールサービスを提供するためのプロトコルはSMTPで、TCPを利用している。通常のユーザが利用するコンピュータは常に電源が入っているとは限らないので、常に起動している ****** を経由してメッセージの送受信を行う。受信者が ****** から電子メールを受け取るためのプロトコルとしてはPOPがある。

Answer: メールサーバ

Source: ../../note/network/_/chapters/application_layer.md

====================

 **** (Multipurpose Internet Mail Extensions)は、電子メールでテキスト以外のデータ形式を送信できるようにした拡張形式。MIMEを利用することで、画像や音声、動画などのマルチメディアデータが添付できる。もともとは電子メール用の規格であったが、現在はHTTPなどの他のプロトコルでも利用されている。代表的なMIMEタイプとしては以下のようなものがある。

| MIMEタイプ                 | 概要             | | -------------------------- | ---------------- | | text/plain               | プレーンテキスト | | text/html                | HTML             | | text/css                 | CSS              | | text/javascript          | JavaScript       | | image/jpeg               | JPEG画像         | | image/png                | PNG画像          | | image/gif                | GIF画像          | | image/svg+xml            | SVG画像          | | audio/mpeg               | MP3              | | audio/wav                | WAV              | | video/mpeg               | MPEG             | | video/mp4                | MP4              | | application/pdf          | PDF              | | application/zip          | ZIP              | | application/json         | JSON             | | application/xml          | XML              | | application/octet-stream | バイト列         |

HTTPにおいては、Content-TypeヘッダにMIMEタイプを指定することでコンテンツの形式を特定することができる。

Answer: MEME

Source: ../../note/network/_/chapters/application_layer.md

====================

 **** (Simple Mail Transfer Protocol)は、電子メールを配送するアプリケーションプロトコルで、TCPの25番ポートを用いる。 **** には認証の仕組みがないため、迷惑メール（スパムメール）を送り付けるような悪用が簡単にできてしまう。

Answer: SMTP

Source: ../../note/network/_/chapters/application_layer.md

====================

 *************** は、POPによるユーザ認証を行い、認証が正しければ一定期間クライアントIPアドレスからのSMTP通信を受け入れる仕組み。

Answer: POP before SMTP

Source: ../../note/network/_/chapters/application_layer.md

====================

 ****** (SMTP Authentication)は、メール送信時にSMTPサーバでユーザ認証を行うようにした仕組み。

Answer: SMTP認証

Source: ../../note/network/_/chapters/application_layer.md

====================

 *** (Sender Policy Framework)は、送信元メールサーバのIPアドレスをDNSサーバに登録しておき、受信側で受信したメールのIPアドレスと送信元メールサーバのIPアドレスを確認してドメイン認証をすることで、なりすましを防止する仕組み。

Answer: SPF

Source: ../../note/network/_/chapters/application_layer.md

====================

 **** (DomainKeys Identified Mail)は、送信元メールサーバで電子署名を付与し、受信側では電子署名を認証することで、なりすましを防止する仕組み。送信元は公開鍵をDNSサーバに登録しておく。

Answer: DKIM

Source: ../../note/network/_/chapters/application_layer.md

====================

 ***** (Domain-based Message Authentication, Reporting and Conformance)は、SPFやDKIMなど送信元ドメインを認証する仕組みにおいて、認証が失敗した場合のメールの取り扱いポリシーを送信者がDNSに登録しておく仕組み。

Answer: DMARC

Source: ../../note/network/_/chapters/application_layer.md

====================

 *** (Post Office Protocol)は、電子メールの受信ホストがメールサーバからメールを受け取るためのプロトコル。現在は主に *** 3( ***  version 3.0)が使われている。

Answer: POP

Source: ../../note/network/_/chapters/application_layer.md

====================

POP(Post Office Protocol)は、電子メールの受信ホストがメールサーバからメールを受け取るためのプロトコル。現在は主に **** (POP version 3.0)が使われている。

Answer: POP3

Source: ../../note/network/_/chapters/application_layer.md

====================

 **** (Internet Message Access Protocol)は、POPと同様に電子メールなどのメッセージを受信するためのプロトコル。 **** では、サーバ上の電子メールを全てダウンロードすることなく電子メールを読むことができる。

 **** を使用することにより、サーバ上に補完されているメールを、あたかも自分の使うクライアントの記憶媒体のように使うことができる。そのため、ある端末から一度開いたメールは、他の端末から見ても既読したことになっている。

Answer: IMAP

Source: ../../note/network/_/chapters/application_layer.md

====================

 *** (World Wide Web)は、インターネット上の情報をハイパーテキスト形式で参照できる情報提供システム。単にWebと呼ばれることも多い。

Answer: WWW

Source: ../../note/network/_/chapters/application_layer.md

====================

 **** (HyperText Transfer Protocol)は、HTML文書や画像、音声、動画などのコンテンツ送受信に用いられるプロトコルで、TCPの80番ポートを用いる。

 **** では、クライアントが **** サーバ（Webサーバ）に情報を要求（リクエスト）し、この要求に対して **** サーバがクライアントに情報を返却（レスポンス）する。

 **** 1.0は、IETFで標準化が行われた最初のバージョンである。 **** 1.0の最初のドラフトは1993年に公開され、3年後の1996年に最終バージョンが公開された。この時期はNetscape NavigatorやInternet Explorerのブラウザ戦争が最も激化していたため、仕様と実装の乖離が生じてしまった。 **** 1.0では、ヘッダの導入、GET以外のメソッドの追加などが行われた。

 **** 1.1は1997年に策定されて、1999年から2015年まで利用されていた。 **** 1.1では、チャンク転送、Acceptヘッダによるコンテントネゴシエーション、複雑なキャッシュコントロール、持続的接続などの機能を追加している。また、パイプラインという前のリクエストの転送が完了する前に次のリクエストを転送できる機能や、バーチャルホストという1つのWebサーバで別々の異なるドメインのホームページが公開できる仕組みが搭載された。

 **** 2.0は2015年に公開された。複数のリクエストを同時に処理可能になり、ヘッダの圧縮やサーバプッシュ、転送するコンテンツの優先度設定などの複数の機能追加が行われた。

 **** 3.0は2018年に公開された。TCPではなく、UDPとQUICというプロトコル上で動作するアプリケーションプロトコルである。 **** 3.0では、暗号化通信がプロトコル自体に組み込まれ、スリーウェイハンドシェイクの必要がないため接続が高速であるなどの特徴がある。

Answer: HTTP

Source: ../../note/network/_/chapters/application_layer.md

====================

 ********* は、クライアントとサーバの間で双方向通信を実現するためのプロトコル。最初にHTTP通信を行い、upgradeリクエストによって ********* 用の通信路を確立する。

Answer: WebSocket

Source: ../../note/network/_/chapters/application_layer.md

====================

 **** (Simple Network Management Protocol)は、ネットワーク管理に用いられるプロトコルで、UDP/IP上で動作する。

 **** では、管理する側をマネージャ（ネットワーク監視端末）、管理される側をエージェント（ルータ、スイッチなど）と呼ぶ。

 **** での処理は機器へのデータの書き込みと読み込みに集約される。この方法を、フェッチ/ストアパラダイムと呼ぶ。

Answer: SNMP

Source: ../../note/network/_/chapters/application_layer.md

====================

SNMP(Simple Network Management Protocol)は、ネットワーク管理に用いられるプロトコルで、UDP/IP上で動作する。

SNMPでは、管理する側を ***** （ネットワーク監視端末）、管理される側をエージェント（ルータ、スイッチなど）と呼ぶ。

SNMPでの処理は機器へのデータの書き込みと読み込みに集約される。この方法を、フェッチ/ストアパラダイムと呼ぶ。

Answer: マネージャ

Source: ../../note/network/_/chapters/application_layer.md

====================

SNMP(Simple Network Management Protocol)は、ネットワーク管理に用いられるプロトコルで、UDP/IP上で動作する。

SNMPでは、管理する側をマネージャ（ネットワーク監視端末）、管理される側を ****** （ルータ、スイッチなど）と呼ぶ。

SNMPでの処理は機器へのデータの書き込みと読み込みに集約される。この方法を、フェッチ/ストアパラダイムと呼ぶ。

Answer: エージェント

Source: ../../note/network/_/chapters/application_layer.md

