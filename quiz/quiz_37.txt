====================

inputは、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

 **** 属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するためにname属性の値がキーとして使用され、送信される値はvalue属性となる。  ****  に指定できるキーワードには次のようなものがある。

• text: テキスト入力のためのフィールド（改行は除去される）。
• password: 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
• email: 電子メールアドレスを入力するための入力欄。
• tel: 電話番号を入力するための入力欄。
• url: URLを入力するための入力欄。
• number: 数値を入力するためのコントロールで、スピナーを表示する。
• range: 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
• checkbox: 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
• radio: 複数の選択肢から1つの値を選択することができるラジオボタン。
• date: 日付指定のための日付ピッカーのコントロール。
• time: 時間指定のためのコントロール。
• file: ファイル選択のためのコントロール。
• color: 色指定のためのカラーピッカーのコントロール。
• button: 規定の動作は持たず、 value 属性の値を表示するボタン。
• submit: フォームの入力内容をサーバに送信するボタン。
• hidden: 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

placeholder属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、required属性を付与することで入力項目を必須に、readonly属性を付与することで入力項目を読み取り専用に、autofocus属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: type

Source: ../../note/web_development/html/_/chapters/form.md

====================

inputは、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

type属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するために **** 属性の値がキーとして使用され、送信される値はvalue属性となる。 type に指定できるキーワードには次のようなものがある。

• text: テキスト入力のためのフィールド（改行は除去される）。
• password: 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
• email: 電子メールアドレスを入力するための入力欄。
• tel: 電話番号を入力するための入力欄。
• url: URLを入力するための入力欄。
• number: 数値を入力するためのコントロールで、スピナーを表示する。
• range: 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
• checkbox: 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
• radio: 複数の選択肢から1つの値を選択することができるラジオボタン。
• date: 日付指定のための日付ピッカーのコントロール。
• time: 時間指定のためのコントロール。
• file: ファイル選択のためのコントロール。
• color: 色指定のためのカラーピッカーのコントロール。
• button: 規定の動作は持たず、 value 属性の値を表示するボタン。
• submit: フォームの入力内容をサーバに送信するボタン。
• hidden: 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

placeholder属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、required属性を付与することで入力項目を必須に、readonly属性を付与することで入力項目を読み取り専用に、autofocus属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: name

Source: ../../note/web_development/html/_/chapters/form.md

====================

inputは、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

type属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するためにname属性の値がキーとして使用され、送信される値は ***** 属性となる。 type に指定できるキーワードには次のようなものがある。

• text: テキスト入力のためのフィールド（改行は除去される）。
• password: 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
• email: 電子メールアドレスを入力するための入力欄。
• tel: 電話番号を入力するための入力欄。
• url: URLを入力するための入力欄。
• number: 数値を入力するためのコントロールで、スピナーを表示する。
• range: 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
• checkbox: 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
• radio: 複数の選択肢から1つの値を選択することができるラジオボタン。
• date: 日付指定のための日付ピッカーのコントロール。
• time: 時間指定のためのコントロール。
• file: ファイル選択のためのコントロール。
• color: 色指定のためのカラーピッカーのコントロール。
• button: 規定の動作は持たず、  *****  属性の値を表示するボタン。
• submit: フォームの入力内容をサーバに送信するボタン。
• hidden: 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

placeholder属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、required属性を付与することで入力項目を必須に、readonly属性を付与することで入力項目を読み取り専用に、autofocus属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: value

Source: ../../note/web_development/html/_/chapters/form.md

====================

inputは、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

type属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するためにname属性の値がキーとして使用され、送信される値はvalue属性となる。 type に指定できるキーワードには次のようなものがある。

•  **** : テキスト入力のためのフィールド（改行は除去される）。
• password: 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
• email: 電子メールアドレスを入力するための入力欄。
• tel: 電話番号を入力するための入力欄。
• url: URLを入力するための入力欄。
• number: 数値を入力するためのコントロールで、スピナーを表示する。
• range: 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
• checkbox: 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
• radio: 複数の選択肢から1つの値を選択することができるラジオボタン。
• date: 日付指定のための日付ピッカーのコントロール。
• time: 時間指定のためのコントロール。
• file: ファイル選択のためのコントロール。
• color: 色指定のためのカラーピッカーのコントロール。
• button: 規定の動作は持たず、 value 属性の値を表示するボタン。
• submit: フォームの入力内容をサーバに送信するボタン。
• hidden: 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

placeholder属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、required属性を付与することで入力項目を必須に、readonly属性を付与することで入力項目を読み取り専用に、autofocus属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: text

Source: ../../note/web_development/html/_/chapters/form.md

====================

inputは、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

type属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するためにname属性の値がキーとして使用され、送信される値はvalue属性となる。 type に指定できるキーワードには次のようなものがある。

• text: テキスト入力のためのフィールド（改行は除去される）。
•  ******** : 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
• email: 電子メールアドレスを入力するための入力欄。
• tel: 電話番号を入力するための入力欄。
• url: URLを入力するための入力欄。
• number: 数値を入力するためのコントロールで、スピナーを表示する。
• range: 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
• checkbox: 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
• radio: 複数の選択肢から1つの値を選択することができるラジオボタン。
• date: 日付指定のための日付ピッカーのコントロール。
• time: 時間指定のためのコントロール。
• file: ファイル選択のためのコントロール。
• color: 色指定のためのカラーピッカーのコントロール。
• button: 規定の動作は持たず、 value 属性の値を表示するボタン。
• submit: フォームの入力内容をサーバに送信するボタン。
• hidden: 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

placeholder属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、required属性を付与することで入力項目を必須に、readonly属性を付与することで入力項目を読み取り専用に、autofocus属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: password

Source: ../../note/web_development/html/_/chapters/form.md

====================

inputは、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

type属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するためにname属性の値がキーとして使用され、送信される値はvalue属性となる。 type に指定できるキーワードには次のようなものがある。

• text: テキスト入力のためのフィールド（改行は除去される）。
• password: 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
•  ***** : 電子メールアドレスを入力するための入力欄。
• tel: 電話番号を入力するための入力欄。
• url: URLを入力するための入力欄。
• number: 数値を入力するためのコントロールで、スピナーを表示する。
• range: 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
• checkbox: 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
• radio: 複数の選択肢から1つの値を選択することができるラジオボタン。
• date: 日付指定のための日付ピッカーのコントロール。
• time: 時間指定のためのコントロール。
• file: ファイル選択のためのコントロール。
• color: 色指定のためのカラーピッカーのコントロール。
• button: 規定の動作は持たず、 value 属性の値を表示するボタン。
• submit: フォームの入力内容をサーバに送信するボタン。
• hidden: 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

placeholder属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、required属性を付与することで入力項目を必須に、readonly属性を付与することで入力項目を読み取り専用に、autofocus属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: email

Source: ../../note/web_development/html/_/chapters/form.md

====================

inputは、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

type属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するためにname属性の値がキーとして使用され、送信される値はvalue属性となる。 type に指定できるキーワードには次のようなものがある。

• text: テキスト入力のためのフィールド（改行は除去される）。
• password: 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
• email: 電子メールアドレスを入力するための入力欄。
•  *** : 電話番号を入力するための入力欄。
• url: URLを入力するための入力欄。
• number: 数値を入力するためのコントロールで、スピナーを表示する。
• range: 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
• checkbox: 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
• radio: 複数の選択肢から1つの値を選択することができるラジオボタン。
• date: 日付指定のための日付ピッカーのコントロール。
• time: 時間指定のためのコントロール。
• file: ファイル選択のためのコントロール。
• color: 色指定のためのカラーピッカーのコントロール。
• button: 規定の動作は持たず、 value 属性の値を表示するボタン。
• submit: フォームの入力内容をサーバに送信するボタン。
• hidden: 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

placeholder属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、required属性を付与することで入力項目を必須に、readonly属性を付与することで入力項目を読み取り専用に、autofocus属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: tel

Source: ../../note/web_development/html/_/chapters/form.md

====================

inputは、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

type属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するためにname属性の値がキーとして使用され、送信される値はvalue属性となる。 type に指定できるキーワードには次のようなものがある。

• text: テキスト入力のためのフィールド（改行は除去される）。
• password: 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
• email: 電子メールアドレスを入力するための入力欄。
• tel: 電話番号を入力するための入力欄。
•  *** : URLを入力するための入力欄。
• number: 数値を入力するためのコントロールで、スピナーを表示する。
• range: 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
• checkbox: 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
• radio: 複数の選択肢から1つの値を選択することができるラジオボタン。
• date: 日付指定のための日付ピッカーのコントロール。
• time: 時間指定のためのコントロール。
• file: ファイル選択のためのコントロール。
• color: 色指定のためのカラーピッカーのコントロール。
• button: 規定の動作は持たず、 value 属性の値を表示するボタン。
• submit: フォームの入力内容をサーバに送信するボタン。
• hidden: 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

placeholder属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、required属性を付与することで入力項目を必須に、readonly属性を付与することで入力項目を読み取り専用に、autofocus属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: url

Source: ../../note/web_development/html/_/chapters/form.md

====================

inputは、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

type属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するためにname属性の値がキーとして使用され、送信される値はvalue属性となる。 type に指定できるキーワードには次のようなものがある。

• text: テキスト入力のためのフィールド（改行は除去される）。
• password: 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
• email: 電子メールアドレスを入力するための入力欄。
• tel: 電話番号を入力するための入力欄。
• url: URLを入力するための入力欄。
•  ****** : 数値を入力するためのコントロールで、スピナーを表示する。
• range: 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
• checkbox: 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
• radio: 複数の選択肢から1つの値を選択することができるラジオボタン。
• date: 日付指定のための日付ピッカーのコントロール。
• time: 時間指定のためのコントロール。
• file: ファイル選択のためのコントロール。
• color: 色指定のためのカラーピッカーのコントロール。
• button: 規定の動作は持たず、 value 属性の値を表示するボタン。
• submit: フォームの入力内容をサーバに送信するボタン。
• hidden: 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

placeholder属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、required属性を付与することで入力項目を必須に、readonly属性を付与することで入力項目を読み取り専用に、autofocus属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: number

Source: ../../note/web_development/html/_/chapters/form.md

====================

inputは、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

type属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するためにname属性の値がキーとして使用され、送信される値はvalue属性となる。 type に指定できるキーワードには次のようなものがある。

• text: テキスト入力のためのフィールド（改行は除去される）。
• password: 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
• email: 電子メールアドレスを入力するための入力欄。
• tel: 電話番号を入力するための入力欄。
• url: URLを入力するための入力欄。
• number: 数値を入力するためのコントロールで、スピナーを表示する。
•  ***** : 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
• checkbox: 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
• radio: 複数の選択肢から1つの値を選択することができるラジオボタン。
• date: 日付指定のための日付ピッカーのコントロール。
• time: 時間指定のためのコントロール。
• file: ファイル選択のためのコントロール。
• color: 色指定のためのカラーピッカーのコントロール。
• button: 規定の動作は持たず、 value 属性の値を表示するボタン。
• submit: フォームの入力内容をサーバに送信するボタン。
• hidden: 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

placeholder属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、required属性を付与することで入力項目を必須に、readonly属性を付与することで入力項目を読み取り専用に、autofocus属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: range

Source: ../../note/web_development/html/_/chapters/form.md

====================

inputは、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

type属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するためにname属性の値がキーとして使用され、送信される値はvalue属性となる。 type に指定できるキーワードには次のようなものがある。

• text: テキスト入力のためのフィールド（改行は除去される）。
• password: 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
• email: 電子メールアドレスを入力するための入力欄。
• tel: 電話番号を入力するための入力欄。
• url: URLを入力するための入力欄。
• number: 数値を入力するためのコントロールで、スピナーを表示する。
• range: 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
•  ******** : 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
• radio: 複数の選択肢から1つの値を選択することができるラジオボタン。
• date: 日付指定のための日付ピッカーのコントロール。
• time: 時間指定のためのコントロール。
• file: ファイル選択のためのコントロール。
• color: 色指定のためのカラーピッカーのコントロール。
• button: 規定の動作は持たず、 value 属性の値を表示するボタン。
• submit: フォームの入力内容をサーバに送信するボタン。
• hidden: 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

placeholder属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、required属性を付与することで入力項目を必須に、readonly属性を付与することで入力項目を読み取り専用に、autofocus属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: checkbox

Source: ../../note/web_development/html/_/chapters/form.md

====================

inputは、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

type属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するためにname属性の値がキーとして使用され、送信される値はvalue属性となる。 type に指定できるキーワードには次のようなものがある。

• text: テキスト入力のためのフィールド（改行は除去される）。
• password: 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
• email: 電子メールアドレスを入力するための入力欄。
• tel: 電話番号を入力するための入力欄。
• url: URLを入力するための入力欄。
• number: 数値を入力するためのコントロールで、スピナーを表示する。
• range: 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
• checkbox: 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
•  ***** : 複数の選択肢から1つの値を選択することができるラジオボタン。
• date: 日付指定のための日付ピッカーのコントロール。
• time: 時間指定のためのコントロール。
• file: ファイル選択のためのコントロール。
• color: 色指定のためのカラーピッカーのコントロール。
• button: 規定の動作は持たず、 value 属性の値を表示するボタン。
• submit: フォームの入力内容をサーバに送信するボタン。
• hidden: 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

placeholder属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、required属性を付与することで入力項目を必須に、readonly属性を付与することで入力項目を読み取り専用に、autofocus属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: radio

Source: ../../note/web_development/html/_/chapters/form.md

====================

inputは、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

type属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するためにname属性の値がキーとして使用され、送信される値はvalue属性となる。 type に指定できるキーワードには次のようなものがある。

• text: テキスト入力のためのフィールド（改行は除去される）。
• password: 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
• email: 電子メールアドレスを入力するための入力欄。
• tel: 電話番号を入力するための入力欄。
• url: URLを入力するための入力欄。
• number: 数値を入力するためのコントロールで、スピナーを表示する。
• range: 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
• checkbox: 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
• radio: 複数の選択肢から1つの値を選択することができるラジオボタン。
•  **** : 日付指定のための日付ピッカーのコントロール。
• time: 時間指定のためのコントロール。
• file: ファイル選択のためのコントロール。
• color: 色指定のためのカラーピッカーのコントロール。
• button: 規定の動作は持たず、 value 属性の値を表示するボタン。
• submit: フォームの入力内容をサーバに送信するボタン。
• hidden: 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

placeholder属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、required属性を付与することで入力項目を必須に、readonly属性を付与することで入力項目を読み取り専用に、autofocus属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: date

Source: ../../note/web_development/html/_/chapters/form.md

====================

inputは、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

type属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するためにname属性の値がキーとして使用され、送信される値はvalue属性となる。 type に指定できるキーワードには次のようなものがある。

• text: テキスト入力のためのフィールド（改行は除去される）。
• password: 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
• email: 電子メールアドレスを入力するための入力欄。
• tel: 電話番号を入力するための入力欄。
• url: URLを入力するための入力欄。
• number: 数値を入力するためのコントロールで、スピナーを表示する。
• range: 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
• checkbox: 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
• radio: 複数の選択肢から1つの値を選択することができるラジオボタン。
• date: 日付指定のための日付ピッカーのコントロール。
•  **** : 時間指定のためのコントロール。
• file: ファイル選択のためのコントロール。
• color: 色指定のためのカラーピッカーのコントロール。
• button: 規定の動作は持たず、 value 属性の値を表示するボタン。
• submit: フォームの入力内容をサーバに送信するボタン。
• hidden: 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

placeholder属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、required属性を付与することで入力項目を必須に、readonly属性を付与することで入力項目を読み取り専用に、autofocus属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: time

Source: ../../note/web_development/html/_/chapters/form.md

====================

inputは、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

type属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するためにname属性の値がキーとして使用され、送信される値はvalue属性となる。 type に指定できるキーワードには次のようなものがある。

• text: テキスト入力のためのフィールド（改行は除去される）。
• password: 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
• email: 電子メールアドレスを入力するための入力欄。
• tel: 電話番号を入力するための入力欄。
• url: URLを入力するための入力欄。
• number: 数値を入力するためのコントロールで、スピナーを表示する。
• range: 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
• checkbox: 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
• radio: 複数の選択肢から1つの値を選択することができるラジオボタン。
• date: 日付指定のための日付ピッカーのコントロール。
• time: 時間指定のためのコントロール。
•  **** : ファイル選択のためのコントロール。
• color: 色指定のためのカラーピッカーのコントロール。
• button: 規定の動作は持たず、 value 属性の値を表示するボタン。
• submit: フォームの入力内容をサーバに送信するボタン。
• hidden: 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

placeholder属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、required属性を付与することで入力項目を必須に、readonly属性を付与することで入力項目を読み取り専用に、autofocus属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: file

Source: ../../note/web_development/html/_/chapters/form.md

====================

inputは、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

type属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するためにname属性の値がキーとして使用され、送信される値はvalue属性となる。 type に指定できるキーワードには次のようなものがある。

• text: テキスト入力のためのフィールド（改行は除去される）。
• password: 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
• email: 電子メールアドレスを入力するための入力欄。
• tel: 電話番号を入力するための入力欄。
• url: URLを入力するための入力欄。
• number: 数値を入力するためのコントロールで、スピナーを表示する。
• range: 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
• checkbox: 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
• radio: 複数の選択肢から1つの値を選択することができるラジオボタン。
• date: 日付指定のための日付ピッカーのコントロール。
• time: 時間指定のためのコントロール。
• file: ファイル選択のためのコントロール。
•  ***** : 色指定のためのカラーピッカーのコントロール。
• button: 規定の動作は持たず、 value 属性の値を表示するボタン。
• submit: フォームの入力内容をサーバに送信するボタン。
• hidden: 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

placeholder属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、required属性を付与することで入力項目を必須に、readonly属性を付与することで入力項目を読み取り専用に、autofocus属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: color

Source: ../../note/web_development/html/_/chapters/form.md

====================

inputは、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

type属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するためにname属性の値がキーとして使用され、送信される値はvalue属性となる。 type に指定できるキーワードには次のようなものがある。

• text: テキスト入力のためのフィールド（改行は除去される）。
• password: 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
• email: 電子メールアドレスを入力するための入力欄。
• tel: 電話番号を入力するための入力欄。
• url: URLを入力するための入力欄。
• number: 数値を入力するためのコントロールで、スピナーを表示する。
• range: 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
• checkbox: 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
• radio: 複数の選択肢から1つの値を選択することができるラジオボタン。
• date: 日付指定のための日付ピッカーのコントロール。
• time: 時間指定のためのコントロール。
• file: ファイル選択のためのコントロール。
• color: 色指定のためのカラーピッカーのコントロール。
•  ****** : 規定の動作は持たず、 value 属性の値を表示するボタン。
• submit: フォームの入力内容をサーバに送信するボタン。
• hidden: 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

placeholder属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、required属性を付与することで入力項目を必須に、readonly属性を付与することで入力項目を読み取り専用に、autofocus属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: button

Source: ../../note/web_development/html/_/chapters/form.md

====================

inputは、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

type属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するためにname属性の値がキーとして使用され、送信される値はvalue属性となる。 type に指定できるキーワードには次のようなものがある。

• text: テキスト入力のためのフィールド（改行は除去される）。
• password: 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
• email: 電子メールアドレスを入力するための入力欄。
• tel: 電話番号を入力するための入力欄。
• url: URLを入力するための入力欄。
• number: 数値を入力するためのコントロールで、スピナーを表示する。
• range: 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
• checkbox: 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
• radio: 複数の選択肢から1つの値を選択することができるラジオボタン。
• date: 日付指定のための日付ピッカーのコントロール。
• time: 時間指定のためのコントロール。
• file: ファイル選択のためのコントロール。
• color: 色指定のためのカラーピッカーのコントロール。
• button: 規定の動作は持たず、 value 属性の値を表示するボタン。
•  ****** : フォームの入力内容をサーバに送信するボタン。
• hidden: 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

placeholder属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、required属性を付与することで入力項目を必須に、readonly属性を付与することで入力項目を読み取り専用に、autofocus属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: submit

Source: ../../note/web_development/html/_/chapters/form.md

====================

inputは、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

type属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するためにname属性の値がキーとして使用され、送信される値はvalue属性となる。 type に指定できるキーワードには次のようなものがある。

• text: テキスト入力のためのフィールド（改行は除去される）。
• password: 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
• email: 電子メールアドレスを入力するための入力欄。
• tel: 電話番号を入力するための入力欄。
• url: URLを入力するための入力欄。
• number: 数値を入力するためのコントロールで、スピナーを表示する。
• range: 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
• checkbox: 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
• radio: 複数の選択肢から1つの値を選択することができるラジオボタン。
• date: 日付指定のための日付ピッカーのコントロール。
• time: 時間指定のためのコントロール。
• file: ファイル選択のためのコントロール。
• color: 色指定のためのカラーピッカーのコントロール。
• button: 規定の動作は持たず、 value 属性の値を表示するボタン。
• submit: フォームの入力内容をサーバに送信するボタン。
•  ****** : 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

placeholder属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、required属性を付与することで入力項目を必須に、readonly属性を付与することで入力項目を読み取り専用に、autofocus属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: hidden

Source: ../../note/web_development/html/_/chapters/form.md

====================

inputは、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

type属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するためにname属性の値がキーとして使用され、送信される値はvalue属性となる。 type に指定できるキーワードには次のようなものがある。

• text: テキスト入力のためのフィールド（改行は除去される）。
• password: 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
• email: 電子メールアドレスを入力するための入力欄。
• tel: 電話番号を入力するための入力欄。
• url: URLを入力するための入力欄。
• number: 数値を入力するためのコントロールで、スピナーを表示する。
• range: 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
• checkbox: 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
• radio: 複数の選択肢から1つの値を選択することができるラジオボタン。
• date: 日付指定のための日付ピッカーのコントロール。
• time: 時間指定のためのコントロール。
• file: ファイル選択のためのコントロール。
• color: 色指定のためのカラーピッカーのコントロール。
• button: 規定の動作は持たず、 value 属性の値を表示するボタン。
• submit: フォームの入力内容をサーバに送信するボタン。
• hidden: 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

 *********** 属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、required属性を付与することで入力項目を必須に、readonly属性を付与することで入力項目を読み取り専用に、autofocus属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: placeholder

Source: ../../note/web_development/html/_/chapters/form.md

====================

inputは、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

type属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するためにname属性の値がキーとして使用され、送信される値はvalue属性となる。 type に指定できるキーワードには次のようなものがある。

• text: テキスト入力のためのフィールド（改行は除去される）。
• password: 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
• email: 電子メールアドレスを入力するための入力欄。
• tel: 電話番号を入力するための入力欄。
• url: URLを入力するための入力欄。
• number: 数値を入力するためのコントロールで、スピナーを表示する。
• range: 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
• checkbox: 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
• radio: 複数の選択肢から1つの値を選択することができるラジオボタン。
• date: 日付指定のための日付ピッカーのコントロール。
• time: 時間指定のためのコントロール。
• file: ファイル選択のためのコントロール。
• color: 色指定のためのカラーピッカーのコントロール。
• button: 規定の動作は持たず、 value 属性の値を表示するボタン。
• submit: フォームの入力内容をサーバに送信するボタン。
• hidden: 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

placeholder属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、 ******** 属性を付与することで入力項目を必須に、readonly属性を付与することで入力項目を読み取り専用に、autofocus属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: required

Source: ../../note/web_development/html/_/chapters/form.md

====================

inputは、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

type属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するためにname属性の値がキーとして使用され、送信される値はvalue属性となる。 type に指定できるキーワードには次のようなものがある。

• text: テキスト入力のためのフィールド（改行は除去される）。
• password: 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
• email: 電子メールアドレスを入力するための入力欄。
• tel: 電話番号を入力するための入力欄。
• url: URLを入力するための入力欄。
• number: 数値を入力するためのコントロールで、スピナーを表示する。
• range: 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
• checkbox: 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
• radio: 複数の選択肢から1つの値を選択することができるラジオボタン。
• date: 日付指定のための日付ピッカーのコントロール。
• time: 時間指定のためのコントロール。
• file: ファイル選択のためのコントロール。
• color: 色指定のためのカラーピッカーのコントロール。
• button: 規定の動作は持たず、 value 属性の値を表示するボタン。
• submit: フォームの入力内容をサーバに送信するボタン。
• hidden: 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

placeholder属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、required属性を付与することで入力項目を必須に、 ******** 属性を付与することで入力項目を読み取り専用に、autofocus属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: readonly

Source: ../../note/web_development/html/_/chapters/form.md

====================

inputは、HTML文書において、フォーム内の入力項目をマークアップする目的で使用されるタグ。

type属性のキーワードに応じて様々な種類のフォーム部品を表示することができる。フォーム送信時はそのデータを特定するためにname属性の値がキーとして使用され、送信される値はvalue属性となる。 type に指定できるキーワードには次のようなものがある。

• text: テキスト入力のためのフィールド（改行は除去される）。
• password: 主にパスワード入力に用いられる、入力値を隠すテキストフィールド。
• email: 電子メールアドレスを入力するための入力欄。
• tel: 電話番号を入力するための入力欄。
• url: URLを入力するための入力欄。
• number: 数値を入力するためのコントロールで、スピナーを表示する。
• range: 厳密な値であることが重要ではない数値を入力するためのコントロールで、範囲のウィジェットを表示する。
• checkbox: 選択または未選択のうちどちらかの値を取ることができるチェックボックス。
• radio: 複数の選択肢から1つの値を選択することができるラジオボタン。
• date: 日付指定のための日付ピッカーのコントロール。
• time: 時間指定のためのコントロール。
• file: ファイル選択のためのコントロール。
• color: 色指定のためのカラーピッカーのコントロール。
• button: 規定の動作は持たず、 value 属性の値を表示するボタン。
• submit: フォームの入力内容をサーバに送信するボタン。
• hidden: 画面に表示されないコントロールで、隠し値をサーバに送信する目的で使用される。

placeholder属性に値を指定することで、フィールドがどのような情報を期待しているかについてユーザにヒントを示すことができる。また、required属性を付与することで入力項目を必須に、readonly属性を付与することで入力項目を読み取り専用に、 ********* 属性を付与することでページ表示時に最初に入力項目にフォーカスするようにできる。

Answer: autofocus

Source: ../../note/web_development/html/_/chapters/form.md

====================

 ******** は、HTML文書において、改行を含むことのできる長文のテキスト入力フォーム部品をマークアップする目的で使用されるタグ。SNSの投稿やお問い合わせフォームなどを作成する際に用いられることが多い。

Answer: textarea

Source: ../../note/web_development/html/_/chapters/form.md

====================

 ****** は、HTML文書において、プルダウンメニュー（ドロップダウンメニュー）の選択肢から値を選ぶフォーム部品をマークアップする目的で使用されるタグ。選択肢は option タグで作成する。サーバに送信されるキーは name の値となり、その値は option に指定された value となる。

また、multiple属性を付与することで選択肢の中から複数の値を選択することができるようになる。

Answer: select

Source: ../../note/web_development/html/_/chapters/form.md

====================

selectは、HTML文書において、プルダウンメニュー（ドロップダウンメニュー）の選択肢から値を選ぶフォーム部品をマークアップする目的で使用されるタグ。選択肢は option タグで作成する。サーバに送信されるキーは name の値となり、その値は option に指定された value となる。

また、 ******** 属性を付与することで選択肢の中から複数の値を選択することができるようになる。

Answer: multiple

Source: ../../note/web_development/html/_/chapters/form.md

====================

 ****** は、HTML文書において、プルダウンメニュー（ドロップダウンメニュー）の選択肢をマークアップする目的で使用されるタグ。

selected属性を付与することで、ページ表示時に最初に選択されている選択肢を明示的に指定することができる。

Answer: option

Source: ../../note/web_development/html/_/chapters/form.md

====================

optionは、HTML文書において、プルダウンメニュー（ドロップダウンメニュー）の選択肢をマークアップする目的で使用されるタグ。

 ******** 属性を付与することで、ページ表示時に最初に選択されている選択肢を明示的に指定することができる。

Answer: selected

Source: ../../note/web_development/html/_/chapters/form.md

====================

 ******** (option group)は、HTML文書において、プルダウンメニュー（ドロップダウンメニュー）の選択肢をグループ化する目的で使用されるタグ。 select の option の数が多すぎる場合に、それらをカテゴリごとに分類するために使用される。

label属性に指定した値がグループ名となる。

Answer: optgroup

Source: ../../note/web_development/html/_/chapters/form.md

====================

optgroup(option group)は、HTML文書において、プルダウンメニュー（ドロップダウンメニュー）の選択肢をグループ化する目的で使用されるタグ。 select の option の数が多すぎる場合に、それらをカテゴリごとに分類するために使用される。

 ***** 属性に指定した値がグループ名となる。

Answer: label

Source: ../../note/web_development/html/_/chapters/form.md

====================

 ******** は、HTML文書において、検索機能を持つプルダウンメニュー（ドロップダウンメニュー）をマークアップする目的で使用されるタグ。 input と紐付けてユーザの入力を補助するために用いられる場合が多い。補助される選択肢は option タグで列挙することができる。

 ********  を使用する場合は、このタグにID属性を設定しておき、 input のlist属性にそのID名を指定する。

Answer: datalist

Source: ../../note/web_development/html/_/chapters/form.md

====================

data **** は、HTML文書において、検索機能を持つプルダウンメニュー（ドロップダウンメニュー）をマークアップする目的で使用されるタグ。 input と紐付けてユーザの入力を補助するために用いられる場合が多い。補助される選択肢は option タグで列挙することができる。

data ****  を使用する場合は、このタグにID属性を設定しておき、 input の **** 属性にそのID名を指定する。

Answer: list

Source: ../../note/web_development/html/_/chapters/form.md

====================

 ***** は、HTML文書において、フォーム部品にラベルをつける目的で使用されるタグ。 input タグなどと隣接するように設置される場合が多く、明示的にフォーム部品と紐付けることで、ラベルクリック時にフォーム部品をフォーカスすることができるようになる。

 *****  をフォーム部品に明示的に結びつけるには、フォーム部品を  *****  で囲むか、  *****  のfor属性に対してフォーム部品のID名を指定すればよい。

Answer: label

Source: ../../note/web_development/html/_/chapters/form.md

====================

labelは、HTML文書において、フォーム部品にラベルをつける目的で使用されるタグ。 input タグなどと隣接するように設置される場合が多く、明示的にフォーム部品と紐付けることで、ラベルクリック時にフォーム部品をフォーカスすることができるようになる。

label をフォーム部品に明示的に結びつけるには、フォーム部品を label で囲むか、 label の *** 属性に対してフォーム部品のID名を指定すればよい。

Answer: for

Source: ../../note/web_development/html/_/chapters/form.md

====================

 ****** は、HTML文書において、汎用的なボタンをマークアップする目的で使用されるタグ。フォームとは別に、主にJavaScriptによって何かしらの処理を実行するためのユーザインタフェースとなる。

Answer: button

Source: ../../note/web_development/html/_/chapters/form.md

====================

 **** (HyperText Markup Language)は、Webサイトの構成をブラウザに伝え、ユーザが閲覧するコンテンツを記述するためのマークアップ言語。Webページに含まれるテキストや画像などのコンテンツにタグをつけることによって、その中身の意味合い（役割）を定義する。

 **** の標準仕様はW3Cが定めており、現在広く使われているブラウザ（Google Chrome、Mozilla Firefox、Microsoft Edge、Safariなど）はこれらの仕様を満たすように開発が進められている。

 **** は要素の集まりからなり、コンテンツの一部をタグで囲む（マークアップする）ことで特定の動作をさせたり、意味を持たせる。ひとつの要素は開始タグ、内容、終了タグからなる。要素は入れ子（ネスト）にすることができる。

<!DOCTYPE html>
<html lang="en">
 <head>
  <meta charset="utf-8">
  <title> ****  Example</title>
 </head>

 <body>
  <p>Hello, World</p>
 </body>
</html>

基本的な **** の構造は上記のようになっている。それぞれの行の意味は以下の通り。

• <!DOCTYPE html> : 文書型の定義。 **** の黎明期に記述されていた、その文書で用いる要素などを定義した部分。現代ではその役割は必要なくなったため、最も短い文書型定義である <!DOCTYPE html> を記述しておけば良い。
• <html></html> : ページ上のすべての内容を囲む要素で、ルート要素と呼ばれることもある。
• <head></head> :  **** ページに記載する、閲覧者に見せるコンテンツ以外のメタデータなどをまとめるコンテナ。
• <meta charset="utf-8"> : メタデータを記載する <meta> タグのうち、文書内で用いる文字コードを設定するもの。いくつかの問題を回避するのに役立つため、これを設定しない理由はない。
• <title></title> : ページのタイトルで、ブラウザのタブや検索結果、ブックマークなどに使用される。
• <body></body> : テキスト、画像、動画、ゲーム、再生可能な音声トラックなど、ページに表示されるすべてのコンテンツがこの中に記載される。

Answer: HTML

Source: ../../note/web_development/html/_/chapters/html.md

====================

 ****** は、コンピュータによって処理される文書内の要素や構造を定義するための特殊な記法。主にテキストベースの文書やデータを、人間とコンピュータの療法が理解しやすい形式で表現するために使用される。HTMLは代表的な ****** 言語の一種。

Answer: マークアップ

Source: ../../note/web_development/html/_/chapters/html.md

====================

 ** は、HTML文書内で要素を定義するために使用されるマークアップ言語の記法。 ** は <> で囲まれ、開始 ** と終了 ** のペアで構成される。開始 ** は < の後に要素名が続き、終了 ** は </ の後に要素名が続く。

Answer: タグ

Source: ../../note/web_development/html/_/chapters/html.md

====================

 ** は、HTML文書内で意味のあるコンテンツや構造を定義するための、タグとコンテンツの組み合わせ。これによりHTML文書内の様々な ** を表現し、ブラウザによって解釈される。 ** は、テキスト、画像、リンク、ボタン、テーブル、フォームなど、様々な種類のコンテンツを表現するために使用される。

Answer: 要素

Source: ../../note/web_development/html/_/chapters/html.md

====================

 ****** は、ページ上で目に見えるブロックを形成するHTML要素で、その前のコンテンツから改行して描画され、 ****** に続くコンテンツも新しい行に描画される。 ****** はインラインの中に含めることはできないが、別の ****** の中に入れ子になることはできる。 div 、 p 、 h1 、 ul 、 li 、 table 、 form などは ****** に含まれる。

Answer: ブロック要素

Source: ../../note/web_development/html/_/chapters/html.md

====================

 ******* は、ブロック要素の中に包含され、文書のコンテンツの小さな部分だけを囲むHTML要素。この要素は基本的にコンテンツ内で改行を行わず、テキストとともに使用される。 span 、 a 、 img 、 strong 、 em 、 b 、 i などは ******* に含まれる。

Answer: インライン要素

Source: ../../note/web_development/html/_/chapters/html.md

====================

 *** は、単一のタグによって構成される（内容や終了タグを持たない）HTML要素。 img 、 br 、 hr 、 input などは *** に含まれる。

Answer: 空要素

Source: ../../note/web_development/html/_/chapters/html.md

====================

 ** は、HTML要素に対する追加情報や設定を提供するために使用される。開始タグ内に記述され、 ** 名と ** 値のペアで表現される。 class 、 href 、 src 、 alt 、 type 、 name などの ** があり、全ての要素に共通する ** もあれば、特定の要素の挙動や外観を制御するために使用される ** もある。

Answer: 属性

Source: ../../note/web_development/html/_/chapters/html.md

====================

 **** （ブール属性）は、HTML要素に対して付与される属性のうち、属性値を持たないもの。 **** は要素の意味や役割を示し、ブラウザによって動作や表示が制御される。 disabled 、 readonly 、 required 、 hidden 、 checked などの **** がある。

Answer: 論理属性

Source: ../../note/web_development/html/_/chapters/html.md

====================

論理属性（ ***** ）は、HTML要素に対して付与される属性のうち、属性値を持たないもの。論理属性は要素の意味や役割を示し、ブラウザによって動作や表示が制御される。 disabled 、 readonly 、 required 、 hidden 、 checked などの論理属性がある。

Answer: ブール属性

Source: ../../note/web_development/html/_/chapters/html.md

====================

 ******* は、HTML要素に対して付与される属性のうち、すべての要素で共通で使用できる属性。 class 、 id 、 style などの ******* がある。

Answer: グローバル属性

Source: ../../note/web_development/html/_/chapters/html.md

====================

 **** は、HTML文書内で、特別な意味として扱われる文字や特定の記号を表示するための記法。 < 、 > 、 " 、 ' 、 & といった文字はHTMLの構文の一部であり、テキストにこれらの文字を含めようとしてもHTMLのコードとして解釈されてしまう。

| 実際の文字 | 等価な文字参照 | | ---------- | -------------- | | <          | &lt;         | | >          | &gt;         | | "          | &quot;       | | '          | &apos;       | | &          | &amp;        |

これらの記号以外に対して **** を使用する必要はない（現代のブラウザは、文字エンコーディングがUTF-8であれば、実際の記号を正しく扱うことができるため）。

Answer: 実体参照

Source: ../../note/web_development/html/_/chapters/html.md

====================

 **** は、HTML文書内に記述されるコードのうち、ブラウザによって無視され、画面上に描画されることのない部分。 **** を記述するには、特別なマーカである <!-- と --> で内容を囲む。

<!--  ****  -->
<p>Hello, World</p>

Answer: コメント

Source: ../../note/web_development/html/_/chapters/html.md

====================

 * ( * nchor)は、HTML文書において、リンクを作成するために使用されるタグ。

href属性を用いて、別のWebページやファイル、メールアドレス、同ページ内の場所などを紐付けることができる。

リンク先のURLへの遷移だけでなく、ファイルをダウンロードさせるといった使い方もできる。

t * rget属性に _bl * nk という値を指定することで、リンク先を別タブで開くことができる。

Answer: a

Source: ../../note/web_development/html/_/chapters/link_and_image.md

====================

a(anchor)は、HTML文書において、リンクを作成するために使用されるタグ。

 **** 属性を用いて、別のWebページやファイル、メールアドレス、同ページ内の場所などを紐付けることができる。

リンク先のURLへの遷移だけでなく、ファイルをダウンロードさせるといった使い方もできる。

target属性に _blank という値を指定することで、リンク先を別タブで開くことができる。

Answer: href

Source: ../../note/web_development/html/_/chapters/link_and_image.md

====================

a(anchor)は、HTML文書において、リンクを作成するために使用されるタグ。

href属性を用いて、別のWebページやファイル、メールアドレス、同ページ内の場所などを紐付けることができる。

リンク先のURLへの遷移だけでなく、ファイルをダウンロードさせるといった使い方もできる。

 ****** 属性に _blank という値を指定することで、リンク先を別タブで開くことができる。

Answer: target

Source: ../../note/web_development/html/_/chapters/link_and_image.md

====================

 *** (image)は、HTML文書において、画像を挿入するために使用されるタグ。

src属性に画像URLを指定することで、ページ内に画像を表示することができる。また、alt属性にその画像を表現する文字列を含めておくことで、画像を表示できなかった場合に代替テキストを表示することができる（ alt の指定はアクセシビリティの観点から重要）。

Answer: img

Source: ../../note/web_development/html/_/chapters/link_and_image.md

====================

img(image)は、HTML文書において、画像を挿入するために使用されるタグ。

 *** 属性に画像URLを指定することで、ページ内に画像を表示することができる。また、alt属性にその画像を表現する文字列を含めておくことで、画像を表示できなかった場合に代替テキストを表示することができる（ alt の指定はアクセシビリティの観点から重要）。

Answer: src

Source: ../../note/web_development/html/_/chapters/link_and_image.md

====================

img(image)は、HTML文書において、画像を挿入するために使用されるタグ。

src属性に画像URLを指定することで、ページ内に画像を表示することができる。また、 *** 属性にその画像を表現する文字列を含めておくことで、画像を表示できなかった場合に代替テキストを表示することができる（  ***  の指定はアクセシビリティの観点から重要）。

Answer: alt

Source: ../../note/web_development/html/_/chapters/link_and_image.md

====================

 *** は、、HTML文書において、SVG画像を埋め込むために使用されるタグ。SVG画像は img タグでも表示することができるが、  ***  タグで埋め込むことにより、JavaScriptと連動した動的な処理が容易となる。

Answer: svg

Source: ../../note/web_development/html/_/chapters/link_and_image.md

====================

 ** (unordered list)は、HTML文書において、テキストを箇条書きする目的で、 li と組み合わせて使用されるタグ。同じ種類の情報を列挙したい場合や、ページのナビゲーションなどに用いる場合が多い。

Answer: ul

Source: ../../note/web_development/html/_/chapters/list.md

====================

 ** (ordered list)は、HTML文書において、テキストを順番付きで箇条書きする目的で、 li と組み合わせて使用されるタグ。箇条書きのうち、作業手順や操作手順のように順序があるものを表現したり、重要度に違いがあるものを列挙したい場合に用いる。

Answer: ol

Source: ../../note/web_development/html/_/chapters/list.md

====================

 ** ( ** st item)は、HTML文書において、 ul や ol と組み合わせて、リストの要素をマークアップする目的で使用されるタグ。

Answer: li

Source: ../../note/web_development/html/_/chapters/list.md

====================

 ** (description list)は、HTML文書において、説明付きのリストを表現する目的で、 dt および dd と組み合わせて使用されるタグ。

Answer: dl

Source: ../../note/web_development/html/_/chapters/list.md

====================

 ** (description term)は、HTML文書において、 dl における説明付きのリストのキーワードを表現する目的で使用されるタグ。

Answer: dt

Source: ../../note/web_development/html/_/chapters/list.md

====================

 ** (definition / description)は、HTML文書において、 dl における説明付きのリストのキーワードに対する説明文や定義を表現する目的で使用されるタグ。

Answer: dd

Source: ../../note/web_development/html/_/chapters/list.md

====================

 ***** は、HTML文書において、テーブル（表）をマークアップする目的で使用されるタグ。このタグでテーブル全体を囲み、 tr や td によって行やセルを表現する。原則として、テーブルの各行には同じ数のセルを作る（セルを結合する場合は例外）。

<!-- シンプルなテーブル -->
< ***** >
 <tr>
  <td>ケーキ</td>
  <td>モンブラン</td>
  <td>400円</td>
 </tr>
 <tr>
  <td>ケーキ</td>
  <td>ショートケーキ</td>
  <td>350円</td>
 </tr>
</ ***** >

<!-- 複雑なテーブル -->
< ***** >
 <thead>
  <tr>
   <th colspan="2">品名</th>
   <th>金額</th>
  </tr>
 </thead>

 <tbody>
  <tr>
   <td rowspan="2">ケーキ</td>
   <td>モンブラン</td>
   <td>400円</td>
  </tr>
  <tr>
   <td>ショートケーキ</td>
   <td>350円</td>
  </tr>
 </tbody>

 <tfoot>
  <tr>
   <th colspan="2">合計金額</th>
   <td>750円</td>
  </tr>
 </tfoot>
</ ***** >

Answer: table

Source: ../../note/web_development/html/_/chapters/table.md

====================

 ** (table row)は、HTML文書において、テーブル（表）の行をマークアップする目的で、 table タグの中で使用されるタグ。行の中には td （セル）や th （ヘッダーセル）が含まれる。

Answer: tr

Source: ../../note/web_development/html/_/chapters/table.md

====================

 ** (table data)は、HTML文書において、テーブル（表）のデータ（セル）をマークアップする目的で、 table タグ内の tr タグの中で使用されるタグ。

rowspan属性を指定することでセルを列方向に、colspan属性を指定することでセルを行方向に結合することができる。値としては結合する行数や列数を指定する。また、結合した分はセルの数を減らさなければテーブルが崩れてしまうので注意。

Answer: td

Source: ../../note/web_development/html/_/chapters/table.md

====================

td(table data)は、HTML文書において、テーブル（表）のデータ（セル）をマークアップする目的で、 table タグ内の tr タグの中で使用されるタグ。

 ******* 属性を指定することでセルを列方向に、colspan属性を指定することでセルを行方向に結合することができる。値としては結合する行数や列数を指定する。また、結合した分はセルの数を減らさなければテーブルが崩れてしまうので注意。

Answer: rowspan

Source: ../../note/web_development/html/_/chapters/table.md

====================

td(table data)は、HTML文書において、テーブル（表）のデータ（セル）をマークアップする目的で、 table タグ内の tr タグの中で使用されるタグ。

rowspan属性を指定することでセルを列方向に、 ******* 属性を指定することでセルを行方向に結合することができる。値としては結合する行数や列数を指定する。また、結合した分はセルの数を減らさなければテーブルが崩れてしまうので注意。

Answer: colspan

Source: ../../note/web_development/html/_/chapters/table.md

====================

 ** (table header)は、HTML文書において、テーブル（表）のヘッダーセルをマークアップする目的で、 table タグ内の tr タグの中で使用されるタグ。

Answer: th

Source: ../../note/web_development/html/_/chapters/table.md

====================

 ***** (table head)は、HTML文書において、テーブル（表）のヘッダー行をマークアップする目的で、 table タグの中で使用されるタグ。

Answer: thead

Source: ../../note/web_development/html/_/chapters/table.md

====================

 ***** (table body)は、HTML文書において、テーブル（表）のボディ行をマークアップする目的で、 table タグの中で使用されるタグ。

Answer: tbody

Source: ../../note/web_development/html/_/chapters/table.md

====================

 ***** (table foot)は、HTML文書において、テーブル（表）のフッター行をマークアップする目的で、 table タグの中で使用されるタグ。

Answer: tfoot

Source: ../../note/web_development/html/_/chapters/table.md

====================

 ******* は、HTML文書において、テーブル（表）にキャプションをつける目的で、 table タグの直後に記述されるタグ。

Answer: caption

Source: ../../note/web_development/html/_/chapters/table.md

====================

 * ( * aragra * h)は、HTML文書において、テキストの段落をマークアップする目的で使用されるタグ。最もよく使われる要素のひとつで、基本的には段落の始まりから改行するまでを < * ></ * > で囲む。

Answer: p

Source: ../../note/web_development/html/_/chapters/text.md

====================

 ** ( ** ~h6, heading)は、HTML文書において、見出しをマークアップする目的で使用されるタグ。最も重要な見出しを  **  とし、数字が大きくなるほど重要度が下がる。これらのタグは見出しだけではなく、ページのヘッダーロゴやサイドバーのグループを区別するためのテキストなどにも使われる。特に  **  はSEOの観点からも重要なタグであるため、適切な内容をつけると良い。

Answer: h1

Source: ../../note/web_development/html/_/chapters/text.md

====================

 ** ( ** eak)は、HTML文書において、同じ段落内でテキストを改行したい場合に使用されるタグ。原則として段落の区切りで  **  は使用しない。

Answer: br

Source: ../../note/web_development/html/_/chapters/text.md

====================

 ******** は、HTMLのタグのうち、テキストを装飾するための要素。 strong 、 em 、 b 、 i 、 a などは ******** に分類される。

Answer: フレージング要素

Source: ../../note/web_development/html/_/chapters/text.md

====================

 ****** は、HTML文書において、テキストの一部を「重要」な部分としてマークアップする目的で使用されるタグ。デフォルトCSSでは太字で表示される。

Answer: strong

Source: ../../note/web_development/html/_/chapters/text.md

====================

 ** ( ** phasis)は、HTML文書において、テキストの一部を「強調」する部分としてマークアップする目的で使用されるタグ。デフォルトCSSでは斜体（イタリック）で表示される。

Answer: em

Source: ../../note/web_development/html/_/chapters/text.md

====================

 * ( * old)は、HTML文書において、テキストの一部を太字で表示する目的で使用されるタグ。「重要」や「強調」といった意味は持たない。

Answer: b

Source: ../../note/web_development/html/_/chapters/text.md

====================

 * ( * tal * c)は、HTML文書において、テキストの一部を斜体（イタリック）で表示する目的で使用されるタグ。「重要」や「強調」といった意味は持たない。

Answer: i

Source: ../../note/web_development/html/_/chapters/text.md

====================

 * ( * nderline)は、HTML文書において、テキストの一部に下線を引いて表示する目的で使用されるタグ。「重要」や「強調」といった意味は持たない。

Answer: u

Source: ../../note/web_development/html/_/chapters/text.md

====================

 *** ( *** formatted text)は、HTML文書において、整形済みテキストをマークアップする目的で使用されるタグ。このタグの中に記述されたコンテンツは、改行やタブなどがそのままの形で表示される。主に、プログラムのソースコードを表示したい場合などによく用いられる。

Answer: pre

Source: ../../note/web_development/html/_/chapters/text.md

====================

 **** は、HTML文書において、短いプログラムのソースコードをマークアップする目的で使用されるタグ。 pre とは異なり、段落の中に記載されるようなソースコードをマークアップする目的で用いる。

Answer: code

Source: ../../note/web_development/html/_/chapters/text.md

====================

 ******* は、HTML文書において、連絡先を記載する目的で使用されるタグ。住所、電話番号、メールアドレスといった連絡先情報を記載するために使用する。

Answer: address

Source: ../../note/web_development/html/_/chapters/text.md

====================

 **** は、HTML文書において、時間や日付を記載する目的で使用されるタグ。 date ****  属性に特定のフォーマットで日時を記載しておけば、SEOの観点からも有利になる場合がある。

Answer: time

Source: ../../note/web_development/html/_/chapters/text.md

====================

 ***** は、HTML文書において、あまり重要ではない情報を記載する目的で使用されるタグ。主にコピーライトや免責事項、法的な注意書きを記すのに用いることが多い。

Answer: small

Source: ../../note/web_development/html/_/chapters/text.md

====================

 **** は、プログラムの中に直接記述できる記述できる値。JavaScriptにおいて、プリミティブな値を表現するために使用できる **** は以下の通り。

|  ****        | データ型         | 例                          | | -------------- | ---------------- | --------------------------- | | Null ****    | Null型           | null                      | | 真偽値 ****  | 真偽値型         | true 、 false           | | 数値 ****    | 数値型、長整数型 | 1 、 32.0 ...           | | 文字列 ****  | 文字列型         | 'a' 、 "こんにちは" ... |

Answer: リテラル

Source: ../../note/web_development/javascript/_/chapters/data.md

====================

 ** は、オブジェクトやプリミティブに名前をつけ、その名前で参照を可能にする機能。JavaScriptにおいて、 ** の宣言には let 、 const または var キーワードを使用する。

//  ** 宣言（初期化）の例
let value1;
const value2 = "Hello";
var value3 = true;

これらのキーワードの違いは以下の通り。ホイスティングは、 ** が宣言されていなかった際の挙動のこと。 var は古い ** 宣言のキーワードで、再宣言が可能であることや、エラーが発生しないことから、 let や const を使用することが推奨されている。 const は再代入ができないことから、定数の宣言に使用される。

|                | const  | let    | var     | | -------------- | :------: | :------: | :-------: | | 再宣言         | x        | x        | o         | | 再代入         | x        | o        | o         | | スコープ       | ブロック | ブロック | 関数      | | ホイスティング | エラー   | エラー   | undefined |

Answer: 変数

Source: ../../note/web_development/javascript/_/chapters/data.md

====================

変数は、オブジェクトやプリミティブに名前をつけ、その名前で参照を可能にする機能。JavaScriptにおいて、変数の宣言には let 、 const または var キーワードを使用する。

// 変数宣言（初期化）の例
let value1;
const value2 = "Hello";
var value3 = true;

これらのキーワードの違いは以下の通り。 ******* は、変数が宣言されていなかった際の挙動のこと。 var は古い変数宣言のキーワードで、再宣言が可能であることや、エラーが発生しないことから、 let や const を使用することが推奨されている。 const は再代入ができないことから、定数の宣言に使用される。

|                | const  | let    | var     | | -------------- | :------: | :------: | :-------: | | 再宣言         | x        | x        | o         | | 再代入         | x        | o        | o         | | スコープ       | ブロック | ブロック | 関数      | |  *******  | エラー   | エラー   | undefined |

Answer: ホイスティング

Source: ../../note/web_development/javascript/_/chapters/data.md

====================

 ********* (undefined)は、JavaScriptにおいて、未定義の値のための型。値としては undefined のみを取り（ undefined はリテラルではなくグローバル変数）、宣言だけを行って初期化されていない変数の値は undefined となる。未初期化変数を使用することはほとんどないため、基本的には不具合が発生している場合（またはそのチェックのための比較）にのみ目にする型。処理の結果が無効であることを表したい場合は、 undefined ではなく null を用いるのが適切。

Answer: Undefined

Source: ../../note/web_development/javascript/_/chapters/data.md

====================

 **** (null)は、JavaScriptにおいて、無効なオブジェクトであることを表す型。値としては null リテラルのみを取る。 undefined を直接扱うことはあまりないが、 null は変数の内容が無効である場合に明示的に代入することがある。ただし、 null は数多くの脆弱性や障害の原因にもなるため、扱いには注意が必要。

Answer: Null

Source: ../../note/web_development/javascript/_/chapters/data.md

====================

 *** (boolean)は、JavaScriptにおいて、真( true )と偽( false )という2つの値を表現するための型。 true と false はそれぞれリテラルであり、ソースコード上に直接記述することができる。 *** には論理演算を適用することができ、条件の組み合わせの評価などが実現できる。

JavaScriptでは全ての型の値を *** のように扱うことができ、 true のような値をtruthy、 false のような値をfalsyと呼ぶ。 falsy な値は以下の通りで、これらに属さない値は truthy となる。

| 値          | 型        | 意味         | | ----------- | --------- | ------------ | | false     | boolean   | 偽値         | | 0         | number    | 数値の0      | | -0        | number    | 数値の-0     | | NaN       | number    | Not a Number | | 0n        | bigint    | 長整数の0    | | ""        | string    | 空文字列     | | null      | null      | null         | | undefined | undefined | undefined    |

Answer: 真偽値

Source: ../../note/web_development/javascript/_/chapters/data.md

====================

真偽値(boolean)は、JavaScriptにおいて、真( true )と偽( false )という2つの値を表現するための型。 true と false はそれぞれリテラルであり、ソースコード上に直接記述することができる。真偽値には論理演算を適用することができ、条件の組み合わせの評価などが実現できる。

JavaScriptでは全ての型の値を真偽値のように扱うことができ、 true のような値を ****** 、 false のような値をfalsyと呼ぶ。 falsy な値は以下の通りで、これらに属さない値は  ******  となる。

| 値          | 型        | 意味         | | ----------- | --------- | ------------ | | false     | boolean   | 偽値         | | 0         | number    | 数値の0      | | -0        | number    | 数値の-0     | | NaN       | number    | Not a Number | | 0n        | bigint    | 長整数の0    | | ""        | string    | 空文字列     | | null      | null      | null         | | undefined | undefined | undefined    |

Answer: truthy

Source: ../../note/web_development/javascript/_/chapters/data.md

====================

真偽値(boolean)は、JavaScriptにおいて、真( true )と偽( false )という2つの値を表現するための型。 true と false はそれぞれリテラルであり、ソースコード上に直接記述することができる。真偽値には論理演算を適用することができ、条件の組み合わせの評価などが実現できる。

JavaScriptでは全ての型の値を真偽値のように扱うことができ、 true のような値をtruthy、 false のような値を ***** と呼ぶ。  *****  な値は以下の通りで、これらに属さない値は truthy となる。

| 値          | 型        | 意味         | | ----------- | --------- | ------------ | | false     | boolean   | 偽値         | | 0         | number    | 数値の0      | | -0        | number    | 数値の-0     | | NaN       | number    | Not a Number | | 0n        | bigint    | 長整数の0    | | ""        | string    | 空文字列     | | null      | null      | null         | | undefined | undefined | undefined    |

Answer: falsy

Source: ../../note/web_development/javascript/_/chapters/data.md

====================

 ** (number)は、JavaScriptにおいて、浮動小数点数を表す型。 ** には算術演算を適用することができ、様々な計算が行える。 ** に変換できない値はNaN(Not a Number)というグローバル変数に置き換えられる。

Answer: 数値

Source: ../../note/web_development/javascript/_/chapters/data.md

====================

数値(number)は、JavaScriptにおいて、浮動小数点数を表す型。数値には算術演算を適用することができ、様々な計算が行える。数値に変換できない値は *** (Not a Number)というグローバル変数に置き換えられる。

Answer: NaN

Source: ../../note/web_development/javascript/_/chapters/data.md

====================

 *** (bigint)は、JavaScriptにおいて、整数を表す型。numberとは異なり、表現できる数が整数に限定される代わりに任意の大きさの値を代入することができる。 *** のリテラルは数値の末尾に n をつけて表現される。 *** とnumberとの算術演算（例えば、 3n + 20 など）はエラーとなる。

Answer: 長整数

Source: ../../note/web_development/javascript/_/chapters/data.md

====================

 *** (string)は、JavaScriptにおいて、文字の連なりを表す型。 *** のリテラルはダブルクォーテーションもしくはシングルクォーテーションで文字の並びを囲むことで表現できる。リテラルの中で特別な意味を持つ文字（クォーテーションなど）を含めたい場合は、プログラムが正しく解析されることを妨げないよう、バックスラッシュをつけてエスケープする必要がある。また、テンプレートリテラルも利用できる。

Answer: 文字列

Source: ../../note/web_development/javascript/_/chapters/data.md

====================

 ** (array)は、JavaScriptにおいて、複数のプリミティブをひとつにまとめて管理するための構造。 ** の基本操作は以下の通り。

//  ** の作成
let days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

//  ** の要素へのアクセス
console.log(days[3]);

//  ** の要素の設定
days[1] = 29;

また、 ** は入れ子にしたりオブジェクトの中に含めたりすることができる。

Answer: 配列

Source: ../../note/web_development/javascript/_/chapters/data.md

====================

 ****** (object)は、JavaScriptにおいて、複数のプリミティブを一つにまとめて管理するための構造で、それぞれの値に名前をつけ、それをキーとしてその値にアクセスしたり操作することができる。 ****** が持つ要素はプロパティと呼ばれる。

//  ****** の作成
let user =
{
    id: 1,
    name: 'James',
    age: 25,
    family:
    {
        wife:
        {
            name: 'Emma',
            age: 24
        },
        children:
        [
            {
                name: 'Olivia',
                age: 2
            }
        ]
    },
    hobbies: ['golf', 'swimming']
};

//  ****** の要素へのアクセス
console.log(user.name);               // ドット記法
console.log(user['age']);             // ブラケット記法
console.log(user?.family?.['wife']);  // オプショナルチェーン演算子（プロパティの存在チェックによりエラーを防ぎながらアクセスする）

//  ****** の要素の設定
user.email = "james@example.com";

Answer: オブジェクト

Source: ../../note/web_development/javascript/_/chapters/data.md

====================

オブジェクト(object)は、JavaScriptにおいて、複数のプリミティブを一つにまとめて管理するための構造で、それぞれの値に名前をつけ、それをキーとしてその値にアクセスしたり操作することができる。オブジェクトが持つ要素は ***** と呼ばれる。

// オブジェクトの作成
let user =
{
    id: 1,
    name: 'James',
    age: 25,
    family:
    {
        wife:
        {
            name: 'Emma',
            age: 24
        },
        children:
        [
            {
                name: 'Olivia',
                age: 2
            }
        ]
    },
    hobbies: ['golf', 'swimming']
};

// オブジェクトの要素へのアクセス
console.log(user.name);               // ドット記法
console.log(user['age']);             // ブラケット記法
console.log(user?.family?.['wife']);  // オプショナルチェーン演算子（ ***** の存在チェックによりエラーを防ぎながらアクセスする）

// オブジェクトの要素の設定
user.email = "james@example.com";

Answer: プロパティ

Source: ../../note/web_development/javascript/_/chapters/data.md

