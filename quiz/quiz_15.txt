====================

 ********** は、パッケージ間の依存関係やバージョンを管理したり、パッケージの導入の補助を行ったりするツール。 ********** の導入により、プログラマをパッケージの依存関係管理の責任から解放し、よりビジネスロジックの実装に集中させることができる。

ソフトウェア開発の際に全ての機能を1から実装しようとすると非常にコストが大きいため、様々なパッケージを組み合わせることはよくあり、プログラミング言語ごとに様々な ********** が提供されている。

Answer: パッケージマネージャ

Source: ../../note/computer/software/_/chapters/package.md

====================

 ***** は、同じ名前のソフトウェアの新旧を区別する番号などを指す用語。ソフトウェアは一度リリースされた後も、開発者によってメンテナンスや機能追加が継続的に行われていく場合が多いため、どの ***** のソフトウェアを使用しているかを識別できることは非常に重要である。

 ***** のつけ方は開発チームによって様々であるが、一般的には3つの数字を用いて x.y.z のように表記することが多い。 z にあたる部分はパッチ ***** と呼ばれ、バグの修正や誤字の修正など比較的影響の少ない変更があった場合にカウントされる。 y にあたる部分はマイナー ***** と呼ばれ、後方互換性を保ったソフトウェアの仕様変更や機能の追加があった場合にカウントされる。 x にあたる部分はメジャー ***** と呼ばれ、後方互換性を保てないようなシステム自体の大規模なアップデートがあった場合にカウントされる。

他にも正式版のソフトウェアがリリースされる前に、機能が足りていない試作品としてアルファ版や、一部機能が足りておらず動作が不安定であるベータ版が試験的に公開される場合もある。

Answer: バージョン

Source: ../../note/computer/software/_/chapters/package.md

====================

バージョンは、同じ名前のソフトウェアの新旧を区別する番号などを指す用語。ソフトウェアは一度リリースされた後も、開発者によってメンテナンスや機能追加が継続的に行われていく場合が多いため、どのバージョンのソフトウェアを使用しているかを識別できることは非常に重要である。

バージョンのつけ方は開発チームによって様々であるが、一般的には3つの数字を用いて x.y.z のように表記することが多い。 z にあたる部分は ******** と呼ばれ、バグの修正や誤字の修正など比較的影響の少ない変更があった場合にカウントされる。 y にあたる部分はマイナーバージョンと呼ばれ、後方互換性を保ったソフトウェアの仕様変更や機能の追加があった場合にカウントされる。 x にあたる部分はメジャーバージョンと呼ばれ、後方互換性を保てないようなシステム自体の大規模なアップデートがあった場合にカウントされる。

他にも正式版のソフトウェアがリリースされる前に、機能が足りていない試作品としてアルファ版や、一部機能が足りておらず動作が不安定であるベータ版が試験的に公開される場合もある。

Answer: パッチバージョン

Source: ../../note/computer/software/_/chapters/package.md

====================

バージョンは、同じ名前のソフトウェアの新旧を区別する番号などを指す用語。ソフトウェアは一度リリースされた後も、開発者によってメンテナンスや機能追加が継続的に行われていく場合が多いため、どのバージョンのソフトウェアを使用しているかを識別できることは非常に重要である。

バージョンのつけ方は開発チームによって様々であるが、一般的には3つの数字を用いて x.y.z のように表記することが多い。 z にあたる部分はパッチバージョンと呼ばれ、バグの修正や誤字の修正など比較的影響の少ない変更があった場合にカウントされる。 y にあたる部分は ********* と呼ばれ、後方互換性を保ったソフトウェアの仕様変更や機能の追加があった場合にカウントされる。 x にあたる部分はメジャーバージョンと呼ばれ、後方互換性を保てないようなシステム自体の大規模なアップデートがあった場合にカウントされる。

他にも正式版のソフトウェアがリリースされる前に、機能が足りていない試作品としてアルファ版や、一部機能が足りておらず動作が不安定であるベータ版が試験的に公開される場合もある。

Answer: マイナーバージョン

Source: ../../note/computer/software/_/chapters/package.md

====================

バージョンは、同じ名前のソフトウェアの新旧を区別する番号などを指す用語。ソフトウェアは一度リリースされた後も、開発者によってメンテナンスや機能追加が継続的に行われていく場合が多いため、どのバージョンのソフトウェアを使用しているかを識別できることは非常に重要である。

バージョンのつけ方は開発チームによって様々であるが、一般的には3つの数字を用いて x.y.z のように表記することが多い。 z にあたる部分はパッチバージョンと呼ばれ、バグの修正や誤字の修正など比較的影響の少ない変更があった場合にカウントされる。 y にあたる部分はマイナーバージョンと呼ばれ、後方互換性を保ったソフトウェアの仕様変更や機能の追加があった場合にカウントされる。 x にあたる部分は ********* と呼ばれ、後方互換性を保てないようなシステム自体の大規模なアップデートがあった場合にカウントされる。

他にも正式版のソフトウェアがリリースされる前に、機能が足りていない試作品としてアルファ版や、一部機能が足りておらず動作が不安定であるベータ版が試験的に公開される場合もある。

Answer: メジャーバージョン

Source: ../../note/computer/software/_/chapters/package.md

====================

バージョンは、同じ名前のソフトウェアの新旧を区別する番号などを指す用語。ソフトウェアは一度リリースされた後も、開発者によってメンテナンスや機能追加が継続的に行われていく場合が多いため、どのバージョンのソフトウェアを使用しているかを識別できることは非常に重要である。

バージョンのつけ方は開発チームによって様々であるが、一般的には3つの数字を用いて x.y.z のように表記することが多い。 z にあたる部分はパッチバージョンと呼ばれ、バグの修正や誤字の修正など比較的影響の少ない変更があった場合にカウントされる。 y にあたる部分はマイナーバージョンと呼ばれ、後方互換性を保ったソフトウェアの仕様変更や機能の追加があった場合にカウントされる。 x にあたる部分はメジャーバージョンと呼ばれ、後方互換性を保てないようなシステム自体の大規模なアップデートがあった場合にカウントされる。

他にも *** のソフトウェアがリリースされる前に、機能が足りていない試作品としてアルファ版や、一部機能が足りておらず動作が不安定であるベータ版が試験的に公開される場合もある。

Answer: 正式版

Source: ../../note/computer/software/_/chapters/package.md

====================

バージョンは、同じ名前のソフトウェアの新旧を区別する番号などを指す用語。ソフトウェアは一度リリースされた後も、開発者によってメンテナンスや機能追加が継続的に行われていく場合が多いため、どのバージョンのソフトウェアを使用しているかを識別できることは非常に重要である。

バージョンのつけ方は開発チームによって様々であるが、一般的には3つの数字を用いて x.y.z のように表記することが多い。 z にあたる部分はパッチバージョンと呼ばれ、バグの修正や誤字の修正など比較的影響の少ない変更があった場合にカウントされる。 y にあたる部分はマイナーバージョンと呼ばれ、後方互換性を保ったソフトウェアの仕様変更や機能の追加があった場合にカウントされる。 x にあたる部分はメジャーバージョンと呼ばれ、後方互換性を保てないようなシステム自体の大規模なアップデートがあった場合にカウントされる。

他にも正式版のソフトウェアがリリースされる前に、機能が足りていない試作品として ***** や、一部機能が足りておらず動作が不安定であるベータ版が試験的に公開される場合もある。

Answer: アルファ版

Source: ../../note/computer/software/_/chapters/package.md

====================

バージョンは、同じ名前のソフトウェアの新旧を区別する番号などを指す用語。ソフトウェアは一度リリースされた後も、開発者によってメンテナンスや機能追加が継続的に行われていく場合が多いため、どのバージョンのソフトウェアを使用しているかを識別できることは非常に重要である。

バージョンのつけ方は開発チームによって様々であるが、一般的には3つの数字を用いて x.y.z のように表記することが多い。 z にあたる部分はパッチバージョンと呼ばれ、バグの修正や誤字の修正など比較的影響の少ない変更があった場合にカウントされる。 y にあたる部分はマイナーバージョンと呼ばれ、後方互換性を保ったソフトウェアの仕様変更や機能の追加があった場合にカウントされる。 x にあたる部分はメジャーバージョンと呼ばれ、後方互換性を保てないようなシステム自体の大規模なアップデートがあった場合にカウントされる。

他にも正式版のソフトウェアがリリースされる前に、機能が足りていない試作品としてアルファ版や、一部機能が足りておらず動作が不安定である **** が試験的に公開される場合もある。

Answer: ベータ版

Source: ../../note/computer/software/_/chapters/package.md

====================

 ***** は、あるバージョンのソフトウェアが、以前のバージョンの機能を継続的に利用できる性質。 ***** を失ったソフトウェアは依存関係を大きく侵害してしまう恐れがあるため、注意が必要となる。

Answer: 後方互換性

Source: ../../note/computer/software/_/chapters/package.md

====================

 ******* は、プログラムの構成要素を指す用語で、他の構成要素と組み合わせることで機能するもの。モジュールよりも広義の意味で使用されることが多く、プログラムだけではなく、ファイルや物理的な構成要素に対しても用いられる。

Answer: コンポーネント

Source: ../../note/computer/software/_/chapters/package.md

====================

 ***** は、プログラムの中で何かひとまとまりの機能を持った部品（特にプログラム）を指す用語。他の構成要素と組み合わせることで機能する。

Answer: モジュール

Source: ../../note/computer/software/_/chapters/package.md

====================

 ***** は、汎用的なプログラムを再利用しやすい形でまとめたもの。モジュールなどを組み合わせることで、複数のシステムで必要となる汎用的な機能を繰り返し利用できるようにする目的がある。 ***** を適切に活用すると、システム開発のコストを大幅に削減できる。

Answer: ライブラリ

Source: ../../note/computer/software/_/chapters/package.md

====================

 ******* は、各プログラミング言語の仕様としてあらかじめ用意されているライブラリ。プログラミング言語の更新に合わせて ******* 自体も更新される場合が多いため、サードパーティ製ライブラリに比べて信頼性が高い。一方で、汎用的な機能のみを提供していることが一般的であるため、要件によっては ******* だけでは機能の実現が難しい場合もある。また、 ******* の変更は影響範囲が大きいため、より性能の高いアルゴリズムへの置き換えや新しい機能の導入が遅くなり、サードパーティ製ライブラリに比べてパフォーマンスが下がることもある。

Answer: 標準ライブラリ

Source: ../../note/computer/software/_/chapters/package.md

====================

 ************* は、標準ライブラリや自分が属する開発チームが実装したライブラリ以外の、第三者にって提供されたライブラリの総称。あらゆるプログラマが自由に開発・公開できるため、様々な機能を持つものや限定的な用途にも対応したライブラリなどが存在する。

プログラミング言語自体の更新によりライブラリが動作しなくなったり（サポートの終了）、そもそも正しく動作しなかったり、要件を満たす機能がそろっていなかったりといったリスクもある。また、利用するライブラリが増加すると依存関係が複雑化し、システムのメンテナンスが困難になる場合もあるため注意が必要。プログラミング言語の学習と併せてライブラリの機能に対する理解が必要となるため、学習コストがかかるといったデメリットもある。独自実装したときのコストが学習コストを大きく上回る場合は利用を検討するなど、開発チーム内でルールを設けると良い。

サードパーティ製のライブラリを用いる場合には、ライセンスにも注意する必要がある。

Answer: サードパーティ製ライブラリ

Source: ../../note/computer/software/_/chapters/package.md

====================

 ***** は、既存のソフトウェアに対して拡張的な機能を提供するモジュール。ライブラリはプログラムの再利用を目的としているが、 ***** は既にある機能の単なる拡張を目的としている。

Answer: プラグイン

Source: ../../note/computer/software/_/chapters/package.md

====================

 ******* は、アプリケーションを構成するための骨組みとなるプログラム。システム開発を快適にする様々な機能やツールをそろえており、大幅に開発コストを削減できる。 ******* は、アーキテクチャの実装をベースとして、各種ライブラリを組み合わせるなどして作られているものが多い。 ******* を利用することで、プログラマはビジネスロジックに集中してプログラミングができる。

Answer: フレームワーク

Source: ../../note/computer/software/_/chapters/package.md

====================

 *** （モジュール強度）は、プログラム全体の中のモジュールに収められている機能が、どの程度独立して存在しているか（そのモジュール内のデータとロジックの関係性の強さ）の度合いを表す指標。高凝集な構造は変更に強く、テストが容易でコードが読みやすい。

Answer: 凝集度

Source: ../../note/computer/software/_/chapters/package.md

====================

凝集度（ ******* ）は、プログラム全体の中のモジュールに収められている機能が、どの程度独立して存在しているか（そのモジュール内のデータとロジックの関係性の強さ）の度合いを表す指標。高凝集な構造は変更に強く、テストが容易でコードが読みやすい。

Answer: モジュール強度

Source: ../../note/computer/software/_/chapters/package.md

====================

 ****** は、コンピュータを構成する要素のうち、コンピュータ上で動作するプログラム。

Answer: ソフトウェア

Source: ../../note/computer/software/_/chapters/software.md

====================

 ******** は、主にOSのことであり、ユーザがハードウェアにデータを入力したり、ハードウェアからの出力をユーザに表示したり、コンピュータにインストールされたアプリケーションの動作を管理したりといった、基本的な動作を行うためのプログラム。

 ******** は以下のソフトウェア群により構成される。

• 制御プログラム（狭義のOS: ハードウェアを管理・制御し、ハードウェア資源をアプリケーションソフトウェアに配分するプログラム
• サービスプログラム: コンピュータを利用者が容易に操作できるように提供される、補助的なプログラム
• 言語処理プログラム: プログラミング言語で書かれたソースプログラムを、機械語のプログラムに変換するためのプログラム

ほとんどの応用ソフトウェアにはウィンドウやツールバー、確認メッセージなどの要素が含まれる。こういった要素を共通化してその部品を応用ソフトウェアに提供するのは ******** の役割のひとつ。また、ハードウェアが持つ資源（CPUやメモリ、その他の装置など）を管理して応用ソフトウェアに分配し、同時に複数の処理を行えるようにするのも ******** の役割となっている。

Answer: 基本ソフトウェア

Source: ../../note/computer/software/_/chapters/software.md

====================

基本ソフトウェアは、主にOSのことであり、ユーザがハードウェアにデータを入力したり、ハードウェアからの出力をユーザに表示したり、コンピュータにインストールされたアプリケーションの動作を管理したりといった、基本的な動作を行うためのプログラム。

基本ソフトウェアは以下のソフトウェア群により構成される。

•  ******* （狭義のOS: ハードウェアを管理・制御し、ハードウェア資源をアプリケーションソフトウェアに配分するプログラム
• サービスプログラム: コンピュータを利用者が容易に操作できるように提供される、補助的なプログラム
• 言語処理プログラム: プログラミング言語で書かれたソースプログラムを、機械語のプログラムに変換するためのプログラム

ほとんどの応用ソフトウェアにはウィンドウやツールバー、確認メッセージなどの要素が含まれる。こういった要素を共通化してその部品を応用ソフトウェアに提供するのは基本ソフトウェアの役割のひとつ。また、ハードウェアが持つ資源（CPUやメモリ、その他の装置など）を管理して応用ソフトウェアに分配し、同時に複数の処理を行えるようにするのも基本ソフトウェアの役割となっている。

Answer: 制御プログラム

Source: ../../note/computer/software/_/chapters/software.md

====================

基本ソフトウェアは、主にOSのことであり、ユーザがハードウェアにデータを入力したり、ハードウェアからの出力をユーザに表示したり、コンピュータにインストールされたアプリケーションの動作を管理したりといった、基本的な動作を行うためのプログラム。

基本ソフトウェアは以下のソフトウェア群により構成される。

• 制御プログラム（狭義のOS: ハードウェアを管理・制御し、ハードウェア資源をアプリケーションソフトウェアに配分するプログラム
•  ********* : コンピュータを利用者が容易に操作できるように提供される、補助的なプログラム
• 言語処理プログラム: プログラミング言語で書かれたソースプログラムを、機械語のプログラムに変換するためのプログラム

ほとんどの応用ソフトウェアにはウィンドウやツールバー、確認メッセージなどの要素が含まれる。こういった要素を共通化してその部品を応用ソフトウェアに提供するのは基本ソフトウェアの役割のひとつ。また、ハードウェアが持つ資源（CPUやメモリ、その他の装置など）を管理して応用ソフトウェアに分配し、同時に複数の処理を行えるようにするのも基本ソフトウェアの役割となっている。

Answer: サービスプログラム

Source: ../../note/computer/software/_/chapters/software.md

====================

基本ソフトウェアは、主にOSのことであり、ユーザがハードウェアにデータを入力したり、ハードウェアからの出力をユーザに表示したり、コンピュータにインストールされたアプリケーションの動作を管理したりといった、基本的な動作を行うためのプログラム。

基本ソフトウェアは以下のソフトウェア群により構成される。

• 制御プログラム（狭義のOS: ハードウェアを管理・制御し、ハードウェア資源をアプリケーションソフトウェアに配分するプログラム
• サービスプログラム: コンピュータを利用者が容易に操作できるように提供される、補助的なプログラム
•  ********* : プログラミング言語で書かれたソースプログラムを、機械語のプログラムに変換するためのプログラム

ほとんどの応用ソフトウェアにはウィンドウやツールバー、確認メッセージなどの要素が含まれる。こういった要素を共通化してその部品を応用ソフトウェアに提供するのは基本ソフトウェアの役割のひとつ。また、ハードウェアが持つ資源（CPUやメモリ、その他の装置など）を管理して応用ソフトウェアに分配し、同時に複数の処理を行えるようにするのも基本ソフトウェアの役割となっている。

Answer: 言語処理プログラム

Source: ../../note/computer/software/_/chapters/software.md

====================

 ******** （アプリケーションソフトウェア）は、ワープロソフトや表計算ソフト、画像編集用のソフトといった、ある特定の業務や目的を達成するためのプログラム。

Answer: 応用ソフトウェア

Source: ../../note/computer/software/_/chapters/software.md

====================

応用ソフトウェア（ ************** ）は、ワープロソフトや表計算ソフト、画像編集用のソフトといった、ある特定の業務や目的を達成するためのプログラム。

Answer: アプリケーションソフトウェア

Source: ../../note/computer/software/_/chapters/software.md

====================

 ****** は、基本ソフトウェアと応用ソフトウェアの中間に位置し、複数のアプリケーションソフトウェアに共通の機能を提供する。

Answer: ミドルウェア

Source: ../../note/computer/software/_/chapters/software.md

====================

 ******** は、アプリケーションソフトウェアが動作する環境。ソフトウェアが動作するデバイス（ハードウェア）やOSを指す。

Answer: プラットフォーム

Source: ../../note/computer/software/_/chapters/software.md

====================

 *********** （クロスプラットフォーム）は、ソフトウェアが複数のプラットフォームで実行できたり、複数のプラットフォームのソフトウェア同士が通信できること。

Answer: マルチプラットフォーム

Source: ../../note/computer/software/_/chapters/software.md

====================

マルチプラットフォーム（ *********** ）は、ソフトウェアが複数のプラットフォームで実行できたり、複数のプラットフォームのソフトウェア同士が通信できること。

Answer: クロスプラットフォーム

Source: ../../note/computer/software/_/chapters/software.md

====================

 ***** は、開発されたソフトウェアの実行時に必要となるプログラムや、ソフトウェアが実行される時のことを指す用語。

Answer: ランタイム

Source: ../../note/computer/software/_/chapters/software.md

====================

 ** （User Interface、ヒューマンインタフェース）は、人とコンピュータとの間を結ぶ入出力機器や入出力方式。

Answer: UI

Source: ../../note/computer/software/_/chapters/software.md

====================

UI（User Interface、 ************ ）は、人とコンピュータとの間を結ぶ入出力機器や入出力方式。

Answer: ヒューマンインタフェース

Source: ../../note/computer/software/_/chapters/software.md

====================

 ******* は、ソフトウェアやサービス、周辺機器などが、ユーザにとってどれほど使いやすいかを表す指標。

Answer: ユーザビリティ

Source: ../../note/computer/software/_/chapters/software.md

====================

 ******** は、ソフトウェアやサービス、周辺機器などが、ユーザの年齢や障害の有無に関わらずに利用しやすいかを表す指標。

Answer: アクセシビリティ

Source: ../../note/computer/software/_/chapters/software.md

====================

 *********** は、UIを評価するための方法で、数人の専門家がユーザビリティのガイドラインに沿ってそれぞれ評価を行い、それを集約して問題点を明確にする。

Answer: ヒューリスティック評価

Source: ../../note/computer/software/_/chapters/software.md

====================

 ********** は、文化や言語、年齢や性別の違いに配慮した、より多くの人が快適ん利用できるインタフェースを設計すること。

Answer: ユニバーサルデザイン

Source: ../../note/computer/software/_/chapters/software.md

====================

 ** (User Experience)は、利用者がシステムやサービスを利用する際の体験。UIにとどまらず ** を意識した設計を行うことで、より扱いやすいインタフェースにすることができる。

Answer: UX

Source: ../../note/computer/software/_/chapters/software.md

====================

 *** (Graphical User Interface)は、画面に表示されているアイコンやボタンを、マウスカーソルなどのポインティングデバイスによって操作するインタフェース。直感的な操作が可能であり、技術的な知識に長けていないユーザにとっても扱いやすい。

Answer: GUI

Source: ../../note/computer/software/_/chapters/software.md

====================

 *** (Character User Interface)あるいはCLI(Command Line Interface)は、画面に表示されるテキストデータのみによってやり取りされ、主にキーボードで操作するインタフェース。直感的なわかりやすさではGUIに劣るものの、操作の自動化がしやすく、操作の再現性が高く、また動作が高速であるといった利点があることから、現在でも特定の分野で利用されている。

Answer: CUI

Source: ../../note/computer/software/_/chapters/software.md

====================

CUI(Character User Interface)あるいは *** (Command Line Interface)は、画面に表示されるテキストデータのみによってやり取りされ、主にキーボードで操作するインタフェース。直感的なわかりやすさではGUIに劣るものの、操作の自動化がしやすく、操作の再現性が高く、また動作が高速であるといった利点があることから、現在でも特定の分野で利用されている。

Answer: CLI

Source: ../../note/computer/software/_/chapters/software.md

====================

 *** （自然言語インタフェース: Voice User Interface）は、人の声で自然言語の入力を行い、応答も音声合成によって人が理解できる言葉で行うようなインタフェース。AIスピーカーや音声アシスタントなどがこれに当たる。

Answer: VUI

Source: ../../note/computer/software/_/chapters/software.md

====================

VUI（ *********** : Voice User Interface）は、人の声で自然言語の入力を行い、応答も音声合成によって人が理解できる言葉で行うようなインタフェース。AIスピーカーや音声アシスタントなどがこれに当たる。

Answer: 自然言語インタフェース

Source: ../../note/computer/software/_/chapters/software.md

====================

 *** (Natural User Interface)は、人が日常行う自然な動作で操作するインタフェース。ノンバーバル（動作や表情といった要素）なインタフェースのことで、タッチパネルや指によるジェスチャ動作（タップ、フリック、スワイプ、ドラッグ、ピンチアウト/ピンチインなどがこれに当たる。

Answer: NUI

Source: ../../note/computer/software/_/chapters/software.md

====================

NUI(Natural User Interface)は、人が日常行う自然な動作で操作するインタフェース。 ****** （動作や表情といった要素）なインタフェースのことで、タッチパネルや指によるジェスチャ動作（タップ、フリック、スワイプ、ドラッグ、ピンチアウト/ピンチインなどがこれに当たる。

Answer: ノンバーバル

Source: ../../note/computer/software/_/chapters/software.md

====================

NUI(Natural User Interface)は、人が日常行う自然な動作で操作するインタフェース。ノンバーバル（動作や表情といった要素）なインタフェースのことで、タッチパネルや指によるジェスチャ動作（ *** 、フリック、スワイプ、ドラッグ、ピンチアウト/ピンチインなどがこれに当たる。

Answer: タップ

Source: ../../note/computer/software/_/chapters/software.md

====================

NUI(Natural User Interface)は、人が日常行う自然な動作で操作するインタフェース。ノンバーバル（動作や表情といった要素）なインタフェースのことで、タッチパネルや指によるジェスチャ動作（タップ、 **** 、スワイプ、ドラッグ、ピンチアウト/ピンチインなどがこれに当たる。

Answer: フリック

Source: ../../note/computer/software/_/chapters/software.md

====================

NUI(Natural User Interface)は、人が日常行う自然な動作で操作するインタフェース。ノンバーバル（動作や表情といった要素）なインタフェースのことで、タッチパネルや指によるジェスチャ動作（タップ、フリック、 **** 、ドラッグ、ピンチアウト/ピンチインなどがこれに当たる。

Answer: スワイプ

Source: ../../note/computer/software/_/chapters/software.md

====================

NUI(Natural User Interface)は、人が日常行う自然な動作で操作するインタフェース。ノンバーバル（動作や表情といった要素）なインタフェースのことで、タッチパネルや指によるジェスチャ動作（タップ、フリック、スワイプ、 **** 、ピンチアウト/ピンチインなどがこれに当たる。

Answer: ドラッグ

Source: ../../note/computer/software/_/chapters/software.md

====================

NUI(Natural User Interface)は、人が日常行う自然な動作で操作するインタフェース。ノンバーバル（動作や表情といった要素）なインタフェースのことで、タッチパネルや指によるジェスチャ動作（タップ、フリック、スワイプ、ドラッグ、 ************ などがこれに当たる。

Answer: ピンチアウト/ピンチイン

Source: ../../note/computer/software/_/chapters/software.md

====================

 ****** は、構造化したデータや情報を蓄積して、再利用できるようにしたシステム。データの構造化の形式によって、リレーショナル ****** やネットワーク型 ****** 、NoSQL ****** などに分類される。

Answer: データベース

Source: ../../note/development/database/_/chapters/database.md

====================

 ************* （関係データベース）は、2次元の表形式でデータを管理するデータベースで、データを扱うアプリケーションでは最も一般的に用いられている。 ************* のことを単にデータベースと言う場合も多い。

Answer: リレーショナルデータベース

Source: ../../note/development/database/_/chapters/database.md

====================

 ********* は、データをヒエラルキー構造で管理するデータベース。レコード間に階層構造をもたせた木構造で表現され、親レコードと子レコードはポインタによって結合される。各要素が最大1つの親を持つシングルペアレント階層となっている。

Answer: 階層型データベース

Source: ../../note/development/database/_/chapters/database.md

====================

階層型データベースは、データをヒエラルキー構造で管理するデータベース。レコード間に階層構造をもたせた木構造で表現され、親レコードと子レコードはポインタによって結合される。各要素が最大1つの親を持つ *********** となっている。

Answer: シングルペアレント階層

Source: ../../note/development/database/_/chapters/database.md

====================

 ************* は、一連のレコードに階層構造があり、かつレコード間に複数のつながりがある、グラフ構造で表現されるデータベース。各要素が2つ以上の親を持つことも許されるマルチペアレント階層となっている。

Answer: ネットワーク型データベース

Source: ../../note/development/database/_/chapters/database.md

====================

ネットワーク型データベースは、一連のレコードに階層構造があり、かつレコード間に複数のつながりがある、グラフ構造で表現されるデータベース。各要素が2つ以上の親を持つことも許される ********** となっている。

Answer: マルチペアレント階層

Source: ../../note/development/database/_/chapters/database.md

====================

 ************** は、データと手続きを一体化させたオブジェクトによりレコードを表現するデータベース。

Answer: オブジェクト指向データベース

Source: ../../note/development/database/_/chapters/database.md

====================

 ************** は、複数の文書をそれぞれリンクさせた形でもたせたデータベース。

Answer: ハイパーテキストデータベース

Source: ../../note/development/database/_/chapters/database.md

====================

 ************* は、テキストだけではなく、静止画や動画、音声などを管理することに最適化されたデータベース。

Answer: マルチメディアデータベース

Source: ../../note/development/database/_/chapters/database.md

====================

 ********* は、タグを用いてデータの構造と意味を表すデータベース。

Answer: XMLデータベース

Source: ../../note/development/database/_/chapters/database.md

====================

 *********** は、リレーショナルデータベースを操作するための言語であるSQLを使わないデータベースの総称。リレーショナルデータベースの機能の一部を捨てるなどの工夫によって、パフォーマンスを追求したものが多い。大量データを扱うシステムなどと相性が良い。

Answer: NoSQLデータベース

Source: ../../note/development/database/_/chapters/database.md

====================

 **** （データベース管理システム: Database Management System）は、データベースの管理や制御、データの検索などを行うためのソフトウェア（ミドルウェア）。代表的なものとして、OracleやMySQL(MariaDB)、PostgreSQL、SQL Server、DB2などがある。

Answer: DBMS

Source: ../../note/development/database/_/chapters/database.md

====================

DBMS（ ************ : Database Management System）は、データベースの管理や制御、データの検索などを行うためのソフトウェア（ミドルウェア）。代表的なものとして、OracleやMySQL(MariaDB)、PostgreSQL、SQL Server、DB2などがある。

Answer: データベース管理システム

Source: ../../note/development/database/_/chapters/database.md

====================

 ***** (Relational Database Management System)は、リレーショナルデータベースを扱うためのDBMS。

Answer: RDBMS

Source: ../../note/development/database/_/chapters/database.md

====================

 **** は、データベースの構造を定義したもの。データベースのデータをどのように管理するかを定めた、一連の取り決め。

Answer: スキーマ

Source: ../../note/development/database/_/chapters/database.md

====================

 ****** は、データベースを構造や形式（スキーマ）を3つの階層に分けてそれぞれ定義する方式。外部スキーマ、概念スキーマ、内部スキーマの3階層に分ける考え方と、概念スキーマ、論理スキーマ、物理スキーマの3階層に分ける考え方が代表的。

Answer: 3層スキーマ

Source: ../../note/development/database/_/chapters/database.md

====================

 ****** は、利用者（アプリケーション）から見たデータの形式。実際に保存されているデータをアプリケーション側でユーザが求めている形に加工したビューを生成するレイヤ。

Answer: 外部スキーマ

Source: ../../note/development/database/_/chapters/database.md

====================

 ****** は、開発者がわから見たデータの形式。外部スキーマをデータベース上で扱いやすくするために、重複した項目の排除や関連性に応じた分割などの正規化を行ったレイヤ。

Answer: 概念スキーマ

Source: ../../note/development/database/_/chapters/database.md

====================

 ****** は、物理的なデータの格納形式。記憶装置上にどのようにデータを格納し、アクセスするのかといった、データベースの物理的な構造を定義する。インデックスの定義による検索の高速化などが行われるレイヤ。

Answer: 内部スキーマ

Source: ../../note/development/database/_/chapters/database.md

====================

 ******** は、データベースを複数のハードウェア上にリアルタイムに複製する技術。複製したデータベースは定期的にマスタとなるデータベースと同期しており、マスタのデータベースが障害などによって停止した際にも継続してシステムを運用することができる。MySQLなどのDBMSでは、シングルマスタ、マルチスレーブの構成がサポートされている。

Answer: レプリケーション

Source: ../../note/development/database/_/chapters/database.md

====================

 *** は、データベースのレプリケーションにおいて、クライアントからの更新と参照の両方のクエリを受け付けるサーバ。 *** では、データの更新処理のみを記録するバイナリログが作成される。

Answer: マスタ

Source: ../../note/development/database/_/chapters/database.md

====================

マスタは、データベースのレプリケーションにおいて、クライアントからの更新と参照の両方のクエリを受け付けるサーバ。マスタでは、データの更新処理のみを記録する ****** が作成される。

Answer: バイナリログ

Source: ../../note/development/database/_/chapters/database.md

====================

 **** は、データベースのレプリケーションにおいて、クライアントから参照のクエリのみを受け付けるサーバ。

多くの場合、 **** ではI/OスレッドとSQLスレッドが稼働している。I/Oスレッドでファイルにクエリを書き込んでおき、SQLスレッドでそのクエリを実行することで、複製の遅延を軽減している。 **** では、I/Oスレッドがマスタからの更新ログをリレーログに記録する。

Answer: スレーブ

Source: ../../note/development/database/_/chapters/database.md

====================

スレーブは、データベースのレプリケーションにおいて、クライアントから参照のクエリのみを受け付けるサーバ。

多くの場合、スレーブではI/OスレッドとSQLスレッドが稼働している。I/Oスレッドでファイルにクエリを書き込んでおき、SQLスレッドでそのクエリを実行することで、複製の遅延を軽減している。スレーブでは、I/Oスレッドがマスタからの更新ログを ***** に記録する。

Answer: リレーログ

Source: ../../note/development/database/_/chapters/database.md

====================

 *********** は、データベースのレプリケーションにおいて、マスタからスレーブへのデータの複製をリアルタムに行わず、一定期間をおいてから反映する方法。一定期間分の更新をまとめて行うため、更新処理が高速になる一方で、データの最新性が保たれないというデメリットもある。

Answer: 非同期レプリケーション

Source: ../../note/development/database/_/chapters/database.md

====================

 ****** は、データの検索を高速化するための仕組み。通常、データベースに格納されたデータはディスク上にきれいに整列しているとは限らないため、検索クエリが発行されるとすべてのデータを調べなければならない。

データが更新されると ****** を作り直す必要が出てくるため、更新処理には時間がかかる。また、 ****** は通常のデータとは別に作られるデータ構造であるため複数の ****** を作ることはできるが、作りすぎると更新するべき ****** も増えるため、更新処理により時間がかかるようになる。

Answer: インデックス

Source: ../../note/development/database/_/chapters/index.md

====================

 ********* は、一意制約(UNIQUE KEY)を指定したカラムに適用されるインデックス。

Answer: 一意なインデックス

Source: ../../note/development/database/_/chapters/index.md

====================

 ******** は、複数のカラムに対するインデックス。一方のカラムを中心にインデックスを作成し、その中で重複しているものについてはもう一方のカラムによって並べ替えられる。そのため、どちらのカラムを中心にインデックスを作成するかで、有効な検索条件や性能を活かせる場面が変わるので注意が必要。

Answer: 複合インデックス

Source: ../../note/development/database/_/chapters/index.md

====================

 ******* は、あるクエリを受け取った時に、オプティマイザによって選択されたそのクエリを実行するために用いられるプログラム。

Answer: クエリ実行計画

Source: ../../note/development/database/_/chapters/index.md

====================

 ******* は、あるクエリを受け取ったときに、どのような戦略でそのクエリを実行するのが良いかを選択するプログラム。インデックスを作成すると、通常の検索とインデックスを利用した検索という選択肢ができるため、 ******* はどちらを利用するのが良いかを判断してクエリを実行する。

Answer: オプティマイザ

Source: ../../note/development/database/_/chapters/index.md

====================

 ******** は、あるカラムに格納されるデータの種類。 ******** が高い（格納されるデータの種類が多い）カラムに対するインデックスほど効果が高い。

Answer: カーディナリティ

Source: ../../note/development/database/_/chapters/index.md

====================

 ********** は、多くのRDBMSでデフォルトで採用されるインデックス。Bツリーは、1つのノードが3つ以上の子ノードを持つことができる平衡木で、木の深さが浅いため、データにたどり着くまでに必要なディスクアクセスが少ない。

 ********** を使うと、完全一致検索と範囲検索、前方一致検索が高速化される。一方で、部分一致検索や後方一致検索、否定検索はすべてのデータを走査する必要があるため、高速化されない。

Answer: Bツリーインデックス

Source: ../../note/development/database/_/chapters/index.md

====================

 ********** は、ハッシュテーブルを利用したインデックス。データ自体にハッシュ関数を適用して格納する場所を決定するため、Bツリーよりも深さが浅く検索が速い。ただし、完全一致検索にしか用いることができない。

Answer: ハッシュインデックス

Source: ../../note/development/database/_/chapters/index.md

====================

 ************ は、あるカラムが特定の条件を満たす場合に、対応するビットを1にしたビット列を用いるインデックス。ビット演算と同様のコストであるため、OR検索やAND検索との相性が良いのが特徴。カーディナリティが低いカラムに対しても有効なインデックスであるが、更新に時間がかかるというデメリットがある。

Answer: ビットマップインデックス

Source: ../../note/development/database/_/chapters/index.md

====================

 ********** は、リレーショナルデータベースのデータモデル。

Answer: リレーショナルモデル

Source: ../../note/development/database/_/chapters/rdb.md

====================

 ****** は、顧客、部品、地域などの、データベースに格納される対象となるデータ。

Answer: エンティティ

Source: ../../note/development/database/_/chapters/rdb.md

====================

 ******* は、エンティティが持つ属性。例えば、顧客というエンティティには、顧客番号、顧客名、顧客所属名などの ******* を格納するといった具合。

Answer: アトリビュート

Source: ../../note/development/database/_/chapters/rdb.md

====================

 **** は、関連する情報の集合を格納した表形式のデータ構造。リレーショナルモデルにおけるエンティティを、コンピュータが扱いやすいようにした形式で、データはストレージに格納されて永続的に保持される。

Answer: テーブル

Source: ../../note/development/database/_/chapters/rdb.md

====================

 **** （行）は、テーブルに格納された実際のデータ。エンティティの各データのアトリビュートを説明するためのカラムの集合。

Answer: レコード

Source: ../../note/development/database/_/chapters/rdb.md

====================

レコード（ * ）は、テーブルに格納された実際のデータ。エンティティの各データのアトリビュートを説明するためのカラムの集合。

Answer: 行

Source: ../../note/development/database/_/chapters/rdb.md

====================

 *** （列）は、テーブルが持つ情報。リレーショナルモデルにおけるアトリビュートを、テーブルの概念に合わせて定義したもの。

Answer: カラム

Source: ../../note/development/database/_/chapters/rdb.md

====================

カラム（ * ）は、テーブルが持つ情報。リレーショナルモデルにおけるアトリビュートを、テーブルの概念に合わせて定義したもの。

Answer: 列

Source: ../../note/development/database/_/chapters/rdb.md

====================

 ***** は、クエリの結果として得られる、非永続的なテーブル。

Answer: 結果セット

Source: ../../note/development/database/_/chapters/rdb.md

====================

 ******* （主キー）は、テーブル内の各レコードに与えられる一意のIDとして用いることができる、1つ以上のカラム。各テーブルは ******* として利用できるカラムを持つことがほとんどで、各レコードは必ずこのカラムに一意の値を持つ必要がある。

Answer: プライマリキー

Source: ../../note/development/database/_/chapters/rdb.md

====================

プライマリキー（ *** ）は、テーブル内の各レコードに与えられる一意のIDとして用いることができる、1つ以上のカラム。各テーブルはプライマリキーとして利用できるカラムを持つことがほとんどで、各レコードは必ずこのカラムに一意の値を持つ必要がある。

Answer: 主キー

Source: ../../note/development/database/_/chapters/rdb.md

====================

 **** は、あるテーブルが別のテーブルのレコードを一意に特定するための情報を持つカラム。この制約のあるカラムには、参照先のテーブルのプライマリキーとして存在する値しか格納することができない。

Answer: 外部キー

Source: ../../note/development/database/_/chapters/rdb.md

====================

 ****** は、DBMSの動作単位で、データベースよりも上の階層にある概念。OSからはプロセスとして見える。

Answer: インスタンス

Source: ../../note/development/database/_/chapters/rdb.md

====================

 **** は、データベースの下の階層で、テーブルを格納してまとめるディレクトリのような概念。 **** ごとにアクセス制限をかけてセキュリティを向上させたり、用途によってテーブルを分けて管理したりすることができる。MySQLでは、データベースと **** を同一とみなしており、標準SQLの定める4階層構造ではなく3階層構造を採用している。

Answer: スキーマ

Source: ../../note/development/database/_/chapters/rdb.md

====================

 *** (Entity-Relationship deagram)は、現実の世界のエンティティとその関連性、エンティティが持つアトリビュートを図で示したもの。

Answer: ER図

Source: ../../note/development/database/_/chapters/rdb.md

====================

 *** は、エンティティやアトリビュートをデータベースで管理しやすいように、正しくテーブルを分割したり、重複した項目を削除する処理。1つのデータを1箇所で管理することで、データの整合性が保ちやすくなる。

Answer: 正規化

Source: ../../note/development/database/_/chapters/rdb.md

====================

 ***** は、エンティティの情報をそのまま表現した形。1つのレコードが同じカラムに格納するべきアトリビュートを複数持つ可能性があるため、通常はそのままではデータベースに格納することはできない。

Answer: 非正規化形

Source: ../../note/development/database/_/chapters/rdb.md

